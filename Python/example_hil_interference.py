#!/usr/bin/python

# This Python script has been generated by the Skydel

import math
import time
from datetime import datetime
from datetime import date
import skydelsdx
from skydelsdx.units import *
from skydelsdx.commands import *

outputId = "output1"
outputId2 = "output2"
jammerId = "jammer1"

currentTime = lambda: int(round(time.time() * 1000))
DURATION = 20000 # simulation duration is in ms
SPEED = 10       # m/s

sim = skydelsdx.RemoteSimulator(True)
sim.connect()

sim.call(ClearStatusLog())
sim.call(New(True))
sim.call(EnableLogRaw(True))
sim.call(SetModulationTarget("NoneRT", "", "", True, outputId))
sim.call(ChangeModulationTargetSignals(0, 12500000, 100000000, "UpperL", "L1CA", -1, False, outputId))
sim.call(SetModulationTarget("NoneRT", "", "", True, outputId2))
sim.call(ChangeModulationTargetInterference(0, 12500000, 100000000, 1, 1.57542e+9, 40, outputId2))
sim.call(SetVehicleTrajectory("HIL"))
sim.call(AddIntTx("Shadow", True, 1, True, 0, jammerId))
sim.call(SetIntTxCW(True, 1.57542e+9, 0, jammerId, "signalId"))
sim.call(SetIntTxHil(jammerId))

origin = Lla(toRadian(45.0), toRadian(-74.0), 1.0)
# The jammer will starts a little bit on the side
originJammer = origin.addEnu(Enu(10, -10, 0))
sim.arm()

added = False

try:
  # -- Sending positions in real time --
  startTime = currentTime()
  while True:
    elapsedTime = currentTime() - startTime
    
    if elapsedTime > DURATION: 
      break
    
    t = elapsedTime / 1000.0
    
    enu = Enu(0, SPEED * t, 0)
    
    sim.pushLla(elapsedTime, originJammer.addEnu(enu), jammerId) # Push jammer coordinates
    sim.pushLla(elapsedTime, origin.addEnu(enu)) # Push vehicle coordinates

    #Send new enu to simulator each 10 ms
    time.sleep(10.0 / 1000.0)

  sim.call(Stop())
except Exception as e:
  print("Exception during simulation: " + str(e))

# Retrieve the log
log = sim.call(GetStatusLog())
if any(record.State == SimulatorState.StateError for record in log.records()):
  print("Simulation had errors, check log file for more details")
else:
  print("Simulation stopped without error")

sim.disconnect()
