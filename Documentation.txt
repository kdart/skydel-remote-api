Skydel Remote API Version 36

Command execution permission flags:
  EXECUTE_IF_NO_CONFIG  : executed even if there is no config
  EXECUTE_IF_SIMULATING : executed only if simulating
  EXECUTE_IF_IDLE       : executed only if not simulating

***************************************************************************************************************************

Enumeration GpsASFlag

The GPS AS flag value.

Possible values:
  On
  Off
  Auto

***************************************************************************************************************************

Enumeration SimulatorState

The simulator state.

Possible values:
  StateNone
  StateIdle
  StateStarted
  StateError

***************************************************************************************************************************

Enumeration SimulatorSubState

The simulator sub-state.

Possible values:
  SubStateNone
  Idle_ConfigNotValid
  Idle_ConfigValid
  Started_InitPlugins
  Started_InitHardware
  Started_Streaming
  Started_SyncInit
  Started_SlaveSync
  Started_Armed
  Started_SyncStartTime
  Error
  Started_HILSync
  Started_SyncPPSReset
  Started_SyncStart
  Started_WFSlaveInit
  Started_WFMasterInit

***************************************************************************************************************************

Enumeration SerialPortParity

The Parity scheme used by a serial port.

Possible values:
  NoParity
  Even
  Odd
  Space
  Mark

***************************************************************************************************************************

Enumeration SerialPortFlowControl

The flow control used by a serial port.

Possible values:
  NoFlowControl
  Hardware
  Software

***************************************************************************************************************************

Result SuccessResult()

When command succeed.


***************************************************************************************************************************

Result FailureResult(errorMsg)

When command failed

Name     Type   Description
-------- ------ -------------
ErrorMsg string Error message

***************************************************************************************************************************

Command UndoCmd()
Permission: EXECUTE_IF_IDLE

Undo the last command like Ctrl+Z in the UI


***************************************************************************************************************************

Command RedoCmd()
Permission: EXECUTE_IF_IDLE

Redo the last undone command like Ctrl+Shift+Z in the UI


***************************************************************************************************************************

Command GetDataFolder()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get Skydel's Data Folder. The user can changed it in the GUI's Preferences.


***************************************************************************************************************************

Result DataFolderResult(folder)

Result of GetDataFolder.

Name   Type   Description
------ ------ ------------------
Folder string Skydel Data Folder

***************************************************************************************************************************

Command GetVersion()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get Skydel version.


***************************************************************************************************************************

Result VersionResult(version)

Result of GetVersion.

Name    Type   Description
------- ------ --------------
Version string Skydel version

***************************************************************************************************************************

Command GetSimulationElapsedTime()
Permission: EXECUTE_IF_SIMULATING

Get simulation elapsed time in milliseconds.


***************************************************************************************************************************

Result SimulationElapsedTimeResult(milliseconds)

Result of GetSimulationElapsedTime.

Name         Type Description
------------ ---- -----------------------------------------------------------------------------
Milliseconds int  Simulation elapsed time in milliseconds. Note: Resolution is limited to 10Hz.

***************************************************************************************************************************

Command New(discardCurrentConfig, loadDefaultConfig)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Create a new configuration.

Name                 Type          Description
-------------------- ------------- ----------------------------------------------
DiscardCurrentConfig bool          Discard current config even if it is not saved
LoadDefaultConfig    optional bool Apply the default configuration

***************************************************************************************************************************

Command SaveAs(path, overwrite)
Permission: EXECUTE_IF_IDLE

Save configuration with new name.

Name      Type   Description
--------- ------ ---------------------------------------------------------------------------------------------------------
Path      string Configuration path. Automatically add file suffix if missing. If folder not defined, user default folder.
Overwrite bool   Overwrite existing configuration if is exists

***************************************************************************************************************************

Command Save()
Permission: EXECUTE_IF_IDLE

Save configuration.


***************************************************************************************************************************

Command Open(path, discardCurrentConfig)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Open configuration.

Name                 Type   Description
-------------------- ------ ----------------------------------------------------------------------------------------------------
Path                 string Filename path, Automatically add file suffix if missing. If folder not defined, user default folder.
DiscardCurrentConfig bool   Discard current config even if it is not saved

***************************************************************************************************************************

Command SetDefaultConfiguration()
Permission: EXECUTE_IF_IDLE

Set current configuration as default configuration.


***************************************************************************************************************************

Command ResetDefaultConfiguration()
Permission: EXECUTE_IF_IDLE

Reset the default configuration.


***************************************************************************************************************************

Command ClearAutomatePage()
Permission: EXECUTE_IF_IDLE

Clear automate page.


***************************************************************************************************************************

Command Start()
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Start the simulation. Simulation may or may not start depending on the current state of the simulator.


***************************************************************************************************************************

Command Arm()
Permission: EXECUTE_IF_IDLE

Arm the simulation. Simulation may or may not arm depending on the current state of the simulator.


***************************************************************************************************************************

Command Pause()
Permission: EXECUTE_IF_SIMULATING

Pause vehicle motion during simulation.


***************************************************************************************************************************

Command Resume()
Permission: EXECUTE_IF_SIMULATING

Resume vehicle motion during simulation.


***************************************************************************************************************************

Command Stop()
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Stop the simulation.


***************************************************************************************************************************

Command Quit(forceQuit)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Quit/Exit Skydel. Simulation must be stopped to be able to quit Skydel

Name      Type Description
--------- ---- --------------------------------------------------------
ForceQuit bool Force to quit Skydel even if current config is not saved

***************************************************************************************************************************

Command LockGUI()
Permission: EXECUTE_IF_IDLE

Prevent GUI updates while modify the configuration. Use UnlockGUI when done with
configuration modifications.


***************************************************************************************************************************

Command UnlockGUI()
Permission: EXECUTE_IF_IDLE

Resume GUI updates and force one update immediately.


***************************************************************************************************************************

Command EnableRFOutputForSV(system, svId, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) RF output for specified satellite. Use SV ID 0 to enabled/disable all satellites.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID
Enabled bool   RF is enabled when value is True

***************************************************************************************************************************

Command IsRFOutputEnabled(system, svId)
Permission: EXECUTE_IF_IDLE

Tells if the RF output is enabled or disabled for the specified satellite.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID

***************************************************************************************************************************

Result IsRFOutputEnabledResult(system, svId, enabled)

Result of IsRFOutputEnabled.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID
Enabled bool   RF is enabled when value is True

***************************************************************************************************************************

Command EnableRFOutputForEachSV(system, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) RF output for each satellite individually.

Name    Type       Description
------- ---------- -------------------------------------------------------------------------------------------------
System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).

***************************************************************************************************************************

Command IsRFOutputEnabledForEachSV(system)
Permission: EXECUTE_IF_IDLE

Tells if the RF output is enabled or disabled for each satellite.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result IsRFOutputEnabledForEachSVResult(system, enabled)

Result of IsRFOutputEnabledForEachSV.

Name    Type       Description
------- ---------- -------------------------------------------------------------------------------------------------
System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).

***************************************************************************************************************************

Command EnableSignalForSV(signal, svId, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) signal for specified satellite.

Name    Type   Description
------- ------ -------------------------------------------------------------------------------------------------
Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                     "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
Enabled bool   Signal is enabled when value is True

***************************************************************************************************************************

Command IsSignalEnabledForSV(signal, svId)
Permission: EXECUTE_IF_IDLE

Tells if the signal is enabled or disabled.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                    "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                    "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
                                    "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId   int    The satellite's SV ID (use 0 for all constellation's satellites)

***************************************************************************************************************************

Result IsSignalEnabledForSVResult(signal, svId, enabled)

Result of IsSignalEnabledForSV.

Name    Type   Description
------- ------ -------------------------------------------------------------------------------------------------
Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                     "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
Enabled bool   Signal is enabled when value is True

***************************************************************************************************************************

Command EnableSignalForEachSV(signal, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) signal for each satellite individually.

Name    Type       Description
------- ---------- --------------------------------------------------------------------------------------------------------------
Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                         "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                         "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
                                         "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).

***************************************************************************************************************************

Command IsSignalEnabledForEachSV(signal)
Permission: EXECUTE_IF_IDLE

Tells if the signal is enabled or disabled for each satellite.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                    "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                    "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
                                    "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Result IsSignalEnabledForEachSVResult(signal, enabled)

Result of IsSignalEnabledForEachSV.

Name    Type       Description
------- ---------- --------------------------------------------------------------------------------------------------------------
Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                         "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                         "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
                                         "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).

***************************************************************************************************************************

Command EnablePYCodeForSV(signal, svId, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) P(Y)-Code for specified satellite.

Name    Type   Description
------- ------ -----------------------------------------------
Signal  string Accepted signal keys: "L1P", "L2P"
SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
Enabled bool   Enable P(Y)-Code if True

***************************************************************************************************************************

Command IsPYCodeEnabledForSV(signal, svId)
Permission: EXECUTE_IF_IDLE

Tells if P(Y)-Code is enabled for the specified satellite.

Name   Type   Description
------ ------ -----------------------------------------------
Signal string Accepted signal keys: "L1P", "L2P"
SvId   int    The satellite's SV ID 1..32 (use 0 for all SVs)

***************************************************************************************************************************

Result IsPYCodeEnabledForSVResult(signal, svId, enabled)

Result of IsPYCodeEnabledForSV.

Name    Type   Description
------- ------ -----------------------------------------------
Signal  string Accepted signal keys: "L1P", "L2P"
SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
Enabled bool   Enable P(Y)-Code if True

***************************************************************************************************************************

Command EnablePYCodeForEachSV(signal, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable (or disable) P(Y)-Code for each satellite individually.

Name    Type       Description
------- ---------- ----------------------------------------------------------------------------------------
Signal  string     Accepted signal keys: "L1P", "L2P"
Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command IsPYCodeEnabledForEachSV(signal)
Permission: EXECUTE_IF_IDLE

Tells if the P(Y)-Code is enabled or disabled for each satellite.

Name   Type   Description
------ ------ ----------------------------------
Signal string Accepted signal keys: "L1P", "L2P"

***************************************************************************************************************************

Result IsPYCodeEnabledForEachSVResult(signal, enabled)

Result of IsPYCodeEnabledForEachSV.

Name    Type       Description
------- ---------- ----------------------------------------------------------------------------------------
Signal  string     Accepted signal keys: "L1P", "L2P"
Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command SetPowerForSV(system, svId, powerOffset, otherSatsFollow)
Permission: EXECUTE_IF_SIMULATING

Set power offset for specified satellite SV ID. Use SV ID 0 to set power for all satellites.

Name            Type   Description
--------------- ------ -----------------------------------------------------------------------------------------
System          string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId            int    The Satellite SV ID
PowerOffset     double Power offset in dB (relative to signal power reference level)
OtherSatsFollow bool   If true, other sats power will be adjusted to maintain current offsets between satellites

***************************************************************************************************************************

Command GetPowerForSV(system, svId)
Permission: EXECUTE_IF_SIMULATING

Get the power offset for specified satellite SV ID.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------
System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The Satellite SV ID

***************************************************************************************************************************

Result GetPowerForSVResult(system, svId, nominalPower, signalStrengthModel, antenna, signalLevelOffset, manualGain, total)

Result of GetPowerForSV.

Name                Type   Description
------------------- ------ -----------------------------------------------------------------------------------------------------------
System              string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId                int    The Satellite SV ID
NominalPower        double The nominal power in dBm
SignalStrengthModel double The power difference coming from the Signal Strength Model (dB)
Antenna             double The receiver antenna power offset (dB). It depends on antenna pattern and relative orientation with signal.
SignalLevelOffset   double The global power offset (dB)
ManualGain          double The power offset provided by the user (dB). See SetPowerForSV
Total               double The sum of all the other fields (dBm)

***************************************************************************************************************************

Command ResetAllSatPower(system)
Permission: EXECUTE_IF_SIMULATING

Reset power offset for all satellites is specified system to default value

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command ExportPerformanceDataToCSV(path, overwriting)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Export the performance graph data into a csv file.

Name        Type   Description
----------- ------ -----------------------------------------------------------------------------------------------
Path        string The full path to the csv file.
Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.

***************************************************************************************************************************

Command SetPropagationDelay(system, enabled)
Permission: EXECUTE_IF_IDLE

Enable (or disable) the satellite signal propagation delay. If disabled, the signal is immediately received
by the receiver. The delay should always be enabled, unless your are doing a PPS calibration for the simulator.

Name    Type   Description
------- ------ -------------------------------------------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.

***************************************************************************************************************************

Command IsPropagationDelayEnabled(system)
Permission: EXECUTE_IF_IDLE

Tells if the propagation delay is enabled.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result IsPropagationDelayEnabledResult(system, enabled)

Result of IsPropagationDelayEnabled.

Name    Type   Description
------- ------ -------------------------------------------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.

***************************************************************************************************************************

Command SetSatMotionFixed(system, svId, isFixed)
Permission: EXECUTE_IF_IDLE

If IsFixed is set to true, the satellite will not move during the simulation and keep its initial position calculated at the beginning of the simulation.

Name    Type   Description
------- ------ --------------------------------------------------------------------------------------------------------------
System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID.
IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.

***************************************************************************************************************************

Command IsSatMotionFixed(system, svId)
Permission: EXECUTE_IF_IDLE

Tells if the satellite is fixed (True) or not fixed (false).

Name   Type   Description
------ ------ ---------------------------------------------
System string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID.

***************************************************************************************************************************

Result IsSatMotionFixedResult(system, svId, isFixed)

Result of IsSatMotionFixed.

Name    Type   Description
------- ------ --------------------------------------------------------------------------------------------------------------
System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID.
IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.

***************************************************************************************************************************

Command SetIonoAlpha(index, val)
Permission: EXECUTE_IF_IDLE

Set the GPS ionospheric Alpha coefficient
Alpha 0 is in seconds
Alpha 1 is in seconds/semicircle
Alpha 2 is in seconds/semicircle^2
Alpha 3 is in seconds/semicircle^3

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [0..3]
Val   double Coefficient value

***************************************************************************************************************************

Command GetIonoAlpha(index)
Permission: EXECUTE_IF_IDLE

Get the GPS ionospheric Alpha coefficient
Alpha 0 is in seconds
Alpha 1 is in seconds/semicircle
Alpha 2 is in seconds/semicircle^2
Alpha 3 is in seconds/semicircle^3

Name  Type Description
----- ---- ------------------------
Index int  Coefficient index [0..3]

***************************************************************************************************************************

Result GetIonoAlphaResult(index, val)

Result of GetIonoAlpha.

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [0..3]
Val   double Coefficient value

***************************************************************************************************************************

Command SetIonoBeta(index, val)
Permission: EXECUTE_IF_IDLE

Set the GPS ionospheric Beta coefficient
Beta 0 is in seconds
Beta 1 is in seconds/semicircle
Beta 2 is in seconds/semicircle^2
Beta 3 is in seconds/semicircle^3

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [0..3]
Val   double Coefficient value

***************************************************************************************************************************

Command GetIonoBeta(index)
Permission: EXECUTE_IF_IDLE

Get the GPS ionospheric Beta coefficient
Beta 0 is in seconds
Beta 1 is in seconds/semicircle
Beta 2 is in seconds/semicircle^2
Beta 3 is in seconds/semicircle^3

Name  Type Description
----- ---- ------------------------
Index int  Coefficient index [0..3]

***************************************************************************************************************************

Result GetIonoBetaResult(index, val)

Result of GetIonoBeta.

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [0..3]
Val   double Coefficient value

***************************************************************************************************************************

Command SetIonoBdgimAlpha(index, val)
Permission: EXECUTE_IF_IDLE

Set the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [1..9]
Val   double Coefficient value

***************************************************************************************************************************

Command GetIonoBdgimAlpha(index)
Permission: EXECUTE_IF_IDLE

Get the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)

Name  Type Description
----- ---- ------------------------
Index int  Coefficient index [1..9]

***************************************************************************************************************************

Result GetIonoBdgimAlphaResult(index, val)

Result of GetIonoBdgimAlpha.

Name  Type   Description
----- ------ ------------------------
Index int    Coefficient index [1..9]
Val   double Coefficient value

***************************************************************************************************************************

Command SetEffectiveIonisationLevelCoefficient(index, val)
Permission: EXECUTE_IF_IDLE

Set the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).

Name  Type   Description
----- ------ ---------------------------------------------------------------
Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
Val   double Coefficient value.

***************************************************************************************************************************

Command GetEffectiveIonisationLevelCoefficient(index)
Permission: EXECUTE_IF_IDLE

Get the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).

Name  Type Description
----- ---- ---------------------------------------------------------------
Index int  Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.

***************************************************************************************************************************

Result GetEffectiveIonisationLevelCoefficientResult(index, val)

Result of GetEffectiveIonisationLevelCoefficient.

Name  Type   Description
----- ------ ---------------------------------------------------------------
Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
Val   double Coefficient value.

***************************************************************************************************************************

Command SetIonoModel(model)
Permission: EXECUTE_IF_IDLE

Set ionospheric model

Name  Type   Description
----- ------ ------------------------------------------------------------------
Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")

***************************************************************************************************************************

Command GetIonoModel()
Permission: EXECUTE_IF_IDLE

Get ionospheric model


***************************************************************************************************************************

Result GetIonoModelResult(model)

Result of GetIonoModel.

Name  Type   Description
----- ------ ------------------------------------------------------------------
Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")

***************************************************************************************************************************

Command SetTropoModel(model)
Permission: EXECUTE_IF_IDLE

Set tropospheric model

Name  Type   Description
----- ------ -----------------------------------------------------------------
Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")

***************************************************************************************************************************

Command GetTropoModel()
Permission: EXECUTE_IF_IDLE

Get tropospheric model


***************************************************************************************************************************

Result GetTropoModelResult(model)

Result of GetTropoModel.

Name  Type   Description
----- ------ -----------------------------------------------------------------
Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")

***************************************************************************************************************************

Command SetStartTimeMode(mode)
Permission: EXECUTE_IF_IDLE

Set the simulation start time mode.

Name Type   Description
---- ------ --------------------------------------------
Mode string Accepted Modes ("Custom", "Computer", "GPS")

***************************************************************************************************************************

Command GetStartTimeMode()
Permission: EXECUTE_IF_IDLE

Get the simulation start time mode.


***************************************************************************************************************************

Result GetStartTimeModeResult(mode)

Result of GetStartTimeMode.

Name Type   Description
---- ------ --------------------------------------------
Mode string Accepted Modes ("Custom", "Computer", "GPS")

***************************************************************************************************************************

Command SetGpsTimingReceiver(port, baudRate, dataBits, parity, stopBits, flowControl)
Permission: EXECUTE_IF_IDLE

Set the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.

Name        Type                           Description
----------- ------------------------------ -----------------------------------------------------------------------------------------
Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
BaudRate    optional int                   Data baud rate of the serial port (optional)
DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)

***************************************************************************************************************************

Command GetGpsTimingReceiver()
Permission: EXECUTE_IF_IDLE

Get the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.


***************************************************************************************************************************

Result GetGpsTimingReceiverResult(port, baudRate, dataBits, parity, stopBits, flowControl)

Result of GetGpsTimingReceiver.

Name        Type                           Description
----------- ------------------------------ -----------------------------------------------------------------------------------------
Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
BaudRate    optional int                   Data baud rate of the serial port (optional)
DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)

***************************************************************************************************************************

Command SetStartTimeOffset(offset)
Permission: EXECUTE_IF_IDLE

Set offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
This value has no effect when GPS start time is "custom" or "computer".

Name   Type Description
------ ---- -----------------------------------------------------------------------------------------
Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver

***************************************************************************************************************************

Command GetStartTimeOffset()
Permission: EXECUTE_IF_IDLE

Get offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
This value has no effect when GPS start time is "custom" or "computer".


***************************************************************************************************************************

Result GetStartTimeOffsetResult(offset)

Result of GetStartTimeOffset.

Name   Type Description
------ ---- -----------------------------------------------------------------------------------------
Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver

***************************************************************************************************************************

Command SetLeapSecond(leapSecond)
Permission: EXECUTE_IF_IDLE

Set the UTC leap seconds added since GPS epoch.

Name       Type Description
---------- ---- ----------------------------------------------------------------
LeapSecond int  The number of leap seconds to convert GPS date and time into UTC

***************************************************************************************************************************

Command SetGpsStartTime(start)
Permission: EXECUTE_IF_IDLE

Set the simulation start date and time

Name  Type     Description
----- -------- --------------------------------------------------------------
Start datetime GPS date and time (it is the GPS time expressed in UTC format)

***************************************************************************************************************************

Command GetGpsStartTime()
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Get the simulation GPS start date and time and leap second to convert into UTC time


***************************************************************************************************************************

Result GetGpsStartTimeResult(startTime, leapSecond)

Result of GetGpsStartTime.

Name       Type     Description
---------- -------- ------------------------------------------------------------------------------------------------
StartTime  datetime GPS date and time when the simulation started (it is the GPS time expressed in Gregorian format)
LeapSecond int      The number of leap seconds to convert GPS date and time into UTC

***************************************************************************************************************************

Command SetDuration(second)
Permission: EXECUTE_IF_IDLE

Set the simulation duration. The simulation will stop automatically when this duration is reached

Name   Type Description
------ ---- -----------------------
Second int  The duration in seconds

***************************************************************************************************************************

Command GetDuration()
Permission: EXECUTE_IF_IDLE

Get the simulation duration.


***************************************************************************************************************************

Result GetDurationResult(second)

Result of GetDuration.

Name   Type Description
------ ---- -----------------------
Second int  The duration in seconds

***************************************************************************************************************************

Command EnableLogRaw(enabled)
Permission: EXECUTE_IF_IDLE

Enable (or disable) raw data logging (pseudorange, antenna gain, receiver position, satellite position, etc.)

Name    Type Description
------- ---- -----------------------------------------------
Enabled bool If true, file will be created during simulation

***************************************************************************************************************************

Command IsLogRawEnabled()
Permission: EXECUTE_IF_IDLE

Tells if raw data logging is enabled.


***************************************************************************************************************************

Result IsLogRawEnabledResult(enabled)

Result of IsLogRawEnabled.

Name    Type Description
------- ---- -----------------------------------------------
Enabled bool If true, file will be created during simulation

***************************************************************************************************************************

Command EnableLogDownlink(enabled, beforeEncoding, afterEncoding)
Permission: EXECUTE_IF_IDLE

Enable (or disable) downlink data logging in csv format

Name           Type          Description
-------------- ------------- ----------------------------------------------------------------------------------------------------------------------
Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding

***************************************************************************************************************************

Command IsLogDownlinkEnabled()
Permission: EXECUTE_IF_IDLE

Tells if downlink data Logging is enabled


***************************************************************************************************************************

Result IsLogDownlinkEnabledResult(enabled, beforeEncoding, afterEncoding)

Result of IsLogDownlinkEnabled.

Name           Type          Description
-------------- ------------- ----------------------------------------------------------------------------------------------------------------------
Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding

***************************************************************************************************************************

Command EnableLogRinex(enabled)
Permission: EXECUTE_IF_IDLE

Enable (or disable) ephemeris data logging in RINEX v3.03 format

Name    Type Description
------- ---- ------------------------------------------------
Enabled bool If true, files will be created during simulation

***************************************************************************************************************************

Command IsLogRinexEnabled()
Permission: EXECUTE_IF_IDLE

Tells if ephemeris data Logging is enabled


***************************************************************************************************************************

Result IsLogRinexEnabledResult(enabled)

Result of IsLogRinexEnabled.

Name    Type Description
------- ---- ------------------------------------------------
Enabled bool If true, files will be created during simulation

***************************************************************************************************************************

Command EnableLogHILInput(enabled)
Permission: EXECUTE_IF_IDLE

Enable (or disable) log of all the data received on the HIL API in a CSV format

Name    Type Description
------- ---- ------------------------------------------------
Enabled bool If true, files will be created during simulation

***************************************************************************************************************************

Command IsLogHILInputEnabled()
Permission: EXECUTE_IF_IDLE

Tells if data received on the HIL API logging is enabled


***************************************************************************************************************************

Result IsLogHILInputEnabledResult(enabled)

Result of IsLogHILInputEnabled.

Name    Type Description
------- ---- ------------------------------------------------
Enabled bool If true, files will be created during simulation

***************************************************************************************************************************

Command SetLogRawRate(rate)
Permission: EXECUTE_IF_IDLE

Set Rate logging of raw data

Name Type Description
---- ---- --------------------------------------
Rate int  Accepted rates are 10, 100 and 1000 Hz

***************************************************************************************************************************

Command GetLogRawRate()
Permission: EXECUTE_IF_IDLE

Get Rate logging of raw data


***************************************************************************************************************************

Result LogRawRateResult(rate)

Result of GetLogRawRate.

Name Type Description
---- ---- --------------------------------------
Rate int  Accepted rates are 10, 100 and 1000 Hz

***************************************************************************************************************************

Command EnableLogNmea(enabled)
Permission: EXECUTE_IF_IDLE

Set Logging of NMEA for the simulated position enable/disable.
If a receiver is connected, that NMEA is saved as well.

Name    Type Description
------- ---- --------------------------------------------------
Enabled bool If true, file(s) will be created during simulation

***************************************************************************************************************************

Command IsLogNmeaEnabled()
Permission: EXECUTE_IF_IDLE

Get Logging of NMEA for the simulated position enable/disable.
If a receiver is connected, that NMEA is saved as well.


***************************************************************************************************************************

Result IsLogNmeaEnabledResult(enabled)

Result of IsLogNmeaEnabled.

Name    Type Description
------- ---- --------------------------------------------------
Enabled bool If true, file(s) will be created during simulation

***************************************************************************************************************************

Command SetLogNmeaRate(rate)
Permission: EXECUTE_IF_IDLE

Set Rate logging of NMEA data

Name Type Description
---- ---- ------------------------------
Rate int  Accepted rates are 1 and 10 Hz

***************************************************************************************************************************

Command GetLogNmeaRate()
Permission: EXECUTE_IF_IDLE

Get Rate logging of NMEA data


***************************************************************************************************************************

Result LogNmeaRateResult(rate)

Result of GetLogNmeaRate.

Name Type Description
---- ---- ------------------------------
Rate int  Accepted rates are 1 and 10 Hz

***************************************************************************************************************************

Command EnableMasterPps(enabled)
Permission: EXECUTE_IF_IDLE

Enable/Disable Time Synchronization Master.
The Master will control other Skydel simulators with Slave PPS Enabled.

Name    Type Description
------- ---- ---------------------------------------------------------------------
Enabled bool If true, this simulator will be the master to synchronize simulators.

***************************************************************************************************************************

Command GetMasterStatus()
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Request for the master status, returns a GetMasterStatusResult


***************************************************************************************************************************

Result GetMasterStatusResult(isMaster, slaveConnected, port)

Result of GetMasterStatus.

Name           Type Description
-------------- ---- -------------------------------------
IsMaster       bool True if Skydel is in master mode
SlaveConnected int  The number of connected slaves
Port           int  The listening port, 0 if not a master

***************************************************************************************************************************

Command EnableSlavePps(enabled)
Permission: EXECUTE_IF_IDLE

Enable/Disable Time Synchronization Slave.
The Slave will wait for the Master to synchronize the simulators.

Name    Type Description
------- ---- ---------------------------------------------------------------------------
Enabled bool If true, this simulator will wait for the master to synchronize simulators.

***************************************************************************************************************************

Command GetSlaveStatus()
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Request for the slave status, returns a GetSlaveStatusResult


***************************************************************************************************************************

Result GetSlaveStatusResult(isSlave, isConnected, hostName, hostPort)

Result of GetSlaveStatus.

Name        Type   Description
----------- ------ ---------------------------------------
IsSlave     bool   True if Skydel is in slave mode
IsConnected bool   True if Skydel is connected to a master
HostName    string The host name, empty if not a slave
HostPort    int    The host port, 0 if not a slave

***************************************************************************************************************************

Command SetLeapSecondFuture(enabled, seconds, date)
Permission: EXECUTE_IF_IDLE

Set the next leap second event

Name    Type Description
------- ---- ----------------------------------------------------------------------
Enabled bool If true, the future leap second event is set in the navigation message
Seconds int  The future leap seconds value
Date    date The event date

***************************************************************************************************************************

Command GetLeapSecondFuture()
Permission: EXECUTE_IF_IDLE

Get the next leap second event


***************************************************************************************************************************

Result GetLeapSecondFutureResult(enabled, seconds, date)

Result of GetLeapSecondFuture.

Name    Type Description
------- ---- ----------------------------------------------------------------------
Enabled bool If true, the future leap second event is set in the navigation message
Seconds int  The future leap seconds value
Date    date The event date

***************************************************************************************************************************

Command EnableSignalStrengthModel(enabled)
Permission: EXECUTE_IF_IDLE

Set signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle

Name    Type Description
------- ---- -----------------------------------------------------------
Enabled bool If true, signal strengh model is enabled for all satellites

***************************************************************************************************************************

Command IsSignalStrengthModelEnabled()
Permission: EXECUTE_IF_IDLE

Get signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle


***************************************************************************************************************************

Result IsSignalStrengthModelEnabledResult(enabled)

Result of IsSignalStrengthModelEnabled.

Name    Type Description
------- ---- -----------------------------------------------------------
Enabled bool If true, signal strengh model is enabled for all satellites

***************************************************************************************************************************

Command EnableElevationMaskBelow(enabled)
Permission: EXECUTE_IF_IDLE

Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).

Name    Type Description
------- ---- ------------------------------------------------------------------
Enabled bool If true, mask satellites with elevation angle below masking angle.

***************************************************************************************************************************

Command IsElevationMaskBelowEnabled()
Permission: EXECUTE_IF_IDLE

Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).


***************************************************************************************************************************

Result IsElevationMaskBelowEnabledResult(enabled)

Result of IsElevationMaskBelowEnabled.

Name    Type Description
------- ---- ------------------------------------------------------------------
Enabled bool If true, mask satellites with elevation angle below masking angle.

***************************************************************************************************************************

Command EnableElevationMaskAbove(enabled)
Permission: EXECUTE_IF_IDLE

Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).

Name    Type Description
------- ---- ------------------------------------------------------------------
Enabled bool If true, mask satellites with elevation angle above masking angle.

***************************************************************************************************************************

Command IsElevationMaskAboveEnabled()
Permission: EXECUTE_IF_IDLE

Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).


***************************************************************************************************************************

Result IsElevationMaskAboveEnabledResult(enabled)

Result of IsElevationMaskAboveEnabled.

Name    Type Description
------- ---- ------------------------------------------------------------------
Enabled bool If true, mask satellites with elevation angle above masking angle.

***************************************************************************************************************************

Command SetElevationMaskBelow(angle)
Permission: EXECUTE_IF_IDLE

Set elevation mask angle. See command EnableElevationMaskBelow

Name  Type   Description
----- ------ ---------------------------
Angle double Elevation mask angle in rad

***************************************************************************************************************************

Command GetElevationMaskBelow()
Permission: EXECUTE_IF_IDLE

Get elevation mask angle. See command EnableElevationMaskBelow


***************************************************************************************************************************

Result GetElevationMaskBelowResult(angle)

Result of GetElevationMaskBelow.

Name  Type   Description
----- ------ ---------------------------
Angle double Elevation mask angle in rad

***************************************************************************************************************************

Command SetElevationMaskAbove(angle)
Permission: EXECUTE_IF_IDLE

Set elevation mask angle. See command EnableElevationMaskAbove

Name  Type   Description
----- ------ ---------------------------
Angle double Elevation mask angle in rad

***************************************************************************************************************************

Command GetElevationMaskAbove()
Permission: EXECUTE_IF_IDLE

Get elevation mask angle. See command EnableElevationMaskAbove


***************************************************************************************************************************

Result GetElevationMaskAboveResult(angle)

Result of GetElevationMaskAbove.

Name  Type   Description
----- ------ ---------------------------
Angle double Elevation mask angle in rad

***************************************************************************************************************************

Command SetIssueOfData(clock, ephemeris, overrideRinex)
Permission: EXECUTE_IF_IDLE

Set GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Issue of data, clock
Ephemeris     int           Issue of data, ephemeris
OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True

***************************************************************************************************************************

Command GetIssueOfData()
Permission: EXECUTE_IF_IDLE

Get GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)


***************************************************************************************************************************

Result GetIssueOfDataResult(clock, ephemeris, overrideRinex)

Result of GetIssueOfData.

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Issue of data, clock
Ephemeris     int           Issue of data, ephemeris
OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True

***************************************************************************************************************************

Command SetIssueOfDataGalileo(navigation, almanac, overrideRinex)
Permission: EXECUTE_IF_IDLE

Set Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)

Name          Type          Description
------------- ------------- ---------------------------------------------------------
Navigation    int           Issue of data, navigation
Almanac       int           Issue of data, almanac
OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True

***************************************************************************************************************************

Command GetIssueOfDataGalileo()
Permission: EXECUTE_IF_IDLE

Get Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)


***************************************************************************************************************************

Result GetIssueOfDataGalileoResult(navigation, almanac, overrideRinex)

Result of GetIssueOfDataGalileo.

Name          Type          Description
------------- ------------- ---------------------------------------------------------
Navigation    int           Issue of data, navigation
Almanac       int           Issue of data, almanac
OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True

***************************************************************************************************************************

Command SetAgeOfDataBeiDou(clock, ephemeris, overrideRinex)
Permission: EXECUTE_IF_IDLE

Set BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Age of data, clock
Ephemeris     int           Age of data, ephemeris
OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True

***************************************************************************************************************************

Command GetAgeOfDataBeiDou()
Permission: EXECUTE_IF_IDLE

Get BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)


***************************************************************************************************************************

Result GetAgeOfDataBeiDouResult(clock, ephemeris, overrideRinex)

Result of GetAgeOfDataBeiDou.

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Age of data, clock
Ephemeris     int           Age of data, ephemeris
OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True

***************************************************************************************************************************

Command SetIssueOfDataBeiDou(clock, ephemeris)
Permission: EXECUTE_IF_IDLE

Set BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)

Name      Type Description
--------- ---- ------------------------
Clock     int  Issue of data, clock
Ephemeris int  Issue of data, ephemeris

***************************************************************************************************************************

Command GetIssueOfDataBeiDou()
Permission: EXECUTE_IF_IDLE

Get BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)


***************************************************************************************************************************

Result GetIssueOfDataBeiDouResult(clock, ephemeris)

Result of GetIssueOfDataBeiDou.

Name      Type Description
--------- ---- ------------------------
Clock     int  Issue of data, clock
Ephemeris int  Issue of data, ephemeris

***************************************************************************************************************************

Command SetIssueOfDataQzss(clock, ephemeris, overrideRinex)
Permission: EXECUTE_IF_IDLE

Set QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Issue of data, clock
Ephemeris     int           Issue of data, ephemeris
OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True

***************************************************************************************************************************

Command GetIssueOfDataQzss()
Permission: EXECUTE_IF_IDLE

Get QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)


***************************************************************************************************************************

Result GetIssueOfDataQzssResult(clock, ephemeris, overrideRinex)

Result of GetIssueOfDataQzss.

Name          Type          Description
------------- ------------- ---------------------------------------------------
Clock         int           Issue of data, clock
Ephemeris     int           Issue of data, ephemeris
OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True

***************************************************************************************************************************

Command SetIssueOfDataNavIC(ephemerisAndClock, overrideRinex)
Permission: EXECUTE_IF_IDLE

Set NavIC Issue of data, Ephemeris and Clock (IODEC)

Name              Type          Description
----------------- ------------- -------------------------------------------------------
EphemerisAndClock int           Issue of data, ephemeris and clock
OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True

***************************************************************************************************************************

Command GetIssueOfDataNavIC()
Permission: EXECUTE_IF_IDLE

Get NavIC Issue of data, Ephemeris and Clock (IODEC)


***************************************************************************************************************************

Result GetIssueOfDataNavICResult(ephemerisAndClock, overrideRinex)

Result of GetIssueOfDataNavIC.

Name              Type          Description
----------------- ------------- -------------------------------------------------------
EphemerisAndClock int           Issue of data, ephemeris and clock
OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True

***************************************************************************************************************************

Command SetGpsConfigurationCodeForSV(svId, svConfig, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set GPS SV configuration flag for one satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32
SvConfig    int             SV Config 0..4
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsConfigurationCodeForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS SV configuration flag for one satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsConfigurationCodeForSVResult(svId, svConfig, dataSetName)

Result of GetGpsConfigurationCodeForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32
SvConfig    int             SV Config 0..4
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsConfigurationForEachSV(svConfigs, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set GPS SV configuration flag for each SVs

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvConfigs   array int       SV Config of all satellite
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsSVConfigurationForAllSat(svConfigs, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Please note the command SetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use SetGpsConfigurationForEachSV.

Set GPS SV configuration flag for each SVs

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvConfigs   array int       SV Config of all satellite
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsConfigurationForEachSV(dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS SV configuration flag for each SVs

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsSVConfigurationForAllSat(dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use GetGpsConfigurationForEachSV.

Get GPS SV configuration flag for each SVs

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsConfigurationForEachSVResult(svConfigs, dataSetName)

Result of GetGpsConfigurationForEachSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvConfigs   array int       SV Config of all satellite
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsDataHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      int             Data health 0..7
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsDataHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsDataHealthForSVResult(svId, health, dataSetName)

Result of GetGpsDataHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      int             Data health 0..7
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsSignalHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS signal health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      int             Signal health 0..31
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsSignalHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS signal health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsSignalHealthForSVResult(svId, health, dataSetName)

Result of GetGpsSignalHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      int             Signal health 0..31
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoDataHealthForSV(svId, component, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set Galileo data health for I/NAV and F/NAV message

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID number 1..36.
Component   string          Component is either "E5a", "E5b", or "E1B"
Health      bool            False means Navigation data valid; True means Working without guarantee
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGalileoDataHealthForSV(svId, component, dataSetName)
Permission: EXECUTE_IF_IDLE

Get Galileo data health for I/NAV and F/NAV message

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID number 1..36.
Component   string          Component is either "E5a", "E5b", or "E1B"
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGalileoDataHealthForSVResult(svId, component, health, dataSetName)

Result of GetGalileoDataHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID number 1..36.
Component   string          Component is either "E5a", "E5b", or "E1B"
Health      bool            False means Navigation data valid; True means Working without guarantee
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoSignalHealthForSV(svId, component, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set Galileo signal health for I/NAV and F/NAV message

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..36
Component   string          Component is either "E5a", "E5b", or "E1B"
Health      int             Signal health 0..3
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGalileoSignalHealthForSV(svId, component, dataSetName)
Permission: EXECUTE_IF_IDLE

Get Galileo signal health for I/NAV and F/NAV message

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..36
Component   string          Component is either "E5a", "E5b", or "E1B"
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGalileoSignalHealthForSVResult(svId, component, health, dataSetName)

Result of GetGalileoSignalHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..36
Component   string          Component is either "E5a", "E5b", or "E1B"
Health      int             Signal health 0..3
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsL1HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS L1 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsL1HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS L1 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsL1HealthForSVResult(svId, health, dataSetName)

Result of GetGpsL1HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32
Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsL2HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS L2 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsL2HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS L2 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsL2HealthForSVResult(svId, health, dataSetName)

Result of GetGpsL2HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsL5HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS L5 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsL5HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS L5 health (used with CNAV and CNAV2)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsL5HealthForSVResult(svId, health, dataSetName)

Result of GetGpsL5HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsL1cHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS L1C health (used in CNAV2 only)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsL1cHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS L1C health (used in CNAV2 only)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsL1cHealthForSVResult(svId, health, dataSetName)

Result of GetGpsL1cHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsAntiSpoofingFlagForSV(svId, antiSpoofing, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS Anti-Spoofing Flag

Name         Type            Description
------------ --------------- -------------------------------------------------------------------------------------------
SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsAntiSpoofingFlagForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS Anti-Spoofing Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsAntiSpoofingFlagForSVResult(svId, antiSpoofing, dataSetName)

Result of GetGpsAntiSpoofingFlagForSV.

Name         Type            Description
------------ --------------- -------------------------------------------------------------------------------------------
SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsNavAlertFlagForSV(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsNavAlertFlagForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsNavAlertFlagForSVResult(svId, alert, dataSetName)

Result of GetGpsNavAlertFlagForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsCNavAlertFlagToSV(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GPS CNAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsCNavAlertFlagToSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS CNAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsCNavAlertFlagToSVResult(svId, alert, dataSetName)

Result of GetGpsCNavAlertFlagToSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouHealthInfoForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BeiDou satellite health info

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouHealthInfoForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou satellite health info

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouHealthInfoForSVResult(svId, health, dataSetName)

Result of GetBeiDouHealthInfoForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouAutonomousHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BeiDou satellite autonomous health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      bool            Status, false = Good, true = Not Good
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouAutonomousHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou satellite autonomous health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouAutonomousHealthForSVResult(svId, health, dataSetName)

Result of GetBeiDouAutonomousHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      bool            Status, false = Good, true = Not Good
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouCNavHealthInfoForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BeiDou CNav satellite health info

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouCNavHealthInfoForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou CNav satellite health info

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouCNavHealthInfoForSVResult(svId, health, dataSetName)

Result of GetBeiDouCNavHealthInfoForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouHealthStatusForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BeiDou satellite health status

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouHealthStatusForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou satellite health status

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouHealthStatusForSVResult(svId, health, dataSetName)

Result of GetBeiDouHealthStatusForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGlonassEphemerisHealthFlagForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GLONASS satellite Ephemeris Health Flag Bn(ln)

Name   Type Description
------ ---- --------------------------------------
SvId   int  The satellite's SV ID 1..24
Health bool Status, false = OK, true = Malfunction

***************************************************************************************************************************

Command GetGlonassEphemerisHealthFlagForSV(svId)
Permission: EXECUTE_IF_IDLE

Get GLONASS satellite Ephemeris Health Flag Bn(ln)

Name Type Description
---- ---- ---------------------------
SvId int  The satellite's SV ID 1..24

***************************************************************************************************************************

Result GetGlonassEphemerisHealthFlagForSVResult(svId, health)

Result of GetGlonassEphemerisHealthFlagForSV.

Name   Type Description
------ ---- --------------------------------------
SvId   int  The satellite's SV ID 1..24
Health bool Status, false = OK, true = Malfunction

***************************************************************************************************************************

Command SetGlonassAlmanacUnhealthyFlagForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set GLONASS satellite Almanac Unhealthy Flag Cn

Name   Type Description
------ ---- ----------------------------------------------------------
SvId   int  The satellite's SV ID 1..24
Health bool Status, false = Non-operability, true = Operability (Good)

***************************************************************************************************************************

Command GetGlonassAlmanacUnhealthyFlagForSV(svId)
Permission: EXECUTE_IF_IDLE

Get GLONASS satellite Almanac Unhealthy Flag Cn

Name Type Description
---- ---- ---------------------------
SvId int  The satellite's SV ID 1..24

***************************************************************************************************************************

Result GetGlonassAlmanacUnhealthyFlagForSVResult(svId, health)

Result of GetGlonassAlmanacUnhealthyFlagForSV.

Name   Type Description
------ ---- ----------------------------------------------------------
SvId   int  The satellite's SV ID 1..24
Health bool Status, false = Non-operability, true = Operability (Good)

***************************************************************************************************************************

Command SetQzssL1DataHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS L1 C/A nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      int             Data health 0..7
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteL1DataHealth(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use SetQzssL1DataHealthForSV.

Set QZSS L1 C/A nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      int             Data health 0..7
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssL1DataHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS L1 C/A nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteL1DataHealth(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use GetQzssL1DataHealthForSV.

Get QZSS L1 C/A nav data health

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssL1DataHealthForSVResult(svId, health, dataSetName)

Result of GetQzssL1DataHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      int             Data health 0..7
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssL1HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS L1 health (Health of L1C/A signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteL1Health(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteL1Health is deprecated since 21.3. You may use SetQzssL1HealthForSV.

Set QZSS L1 health (Health of L1C/A signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssL1HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS L1 health (Health of L1C/A signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteL1Health(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteL1Health is deprecated since 21.3. You may use GetQzssL1HealthForSV.

Get QZSS L1 health (Health of L1C/A signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssL1HealthForSVResult(svId, health, dataSetName)

Result of GetQzssL1HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssL2HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS L2 health (Health of L2C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L2 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteL2Health(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteL2Health is deprecated since 21.3. You may use SetQzssL2HealthForSV.

Set QZSS L2 health (Health of L2C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L2 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssL2HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS L2 health (Health of L2C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteL2Health(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteL2Health is deprecated since 21.3. You may use GetQzssL2HealthForSV.

Get QZSS L2 health (Health of L2C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssL2HealthForSVResult(svId, health, dataSetName)

Result of GetQzssL2HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L2 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssL5HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteL5Health(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteL5Health is deprecated since 21.3. You may use SetQzssL5HealthForSV.

Set QZSS L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssL5HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteL5Health(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteL5Health is deprecated since 21.3. You may use GetQzssL5HealthForSV.

Get QZSS L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssL5HealthForSVResult(svId, health, dataSetName)

Result of GetQzssL5HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssL1cHealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS L1C health (Health of L1C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1C health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteL1cHealth(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteL1cHealth is deprecated since 21.3. You may use SetQzssL1cHealthForSV.

Set QZSS L1C health (Health of L1C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1C health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssL1cHealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS L1C health (Health of L1C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteL1cHealth(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteL1cHealth is deprecated since 21.3. You may use GetQzssL1cHealthForSV.

Get QZSS L1C health (Health of L1C signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssL1cHealthForSVResult(svId, health, dataSetName)

Result of GetQzssL1cHealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Health      bool            L1C health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssNavAlertFlagForSV(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set QZSS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssSatelliteNavAlertFlag(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use SetQzssNavAlertFlagForSV.

Set QZSS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssNavAlertFlagForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssSatelliteNavAlertFlag(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use GetQzssNavAlertFlagForSV.

Get QZSS NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssNavAlertFlagForSVResult(svId, alert, dataSetName)

Result of GetQzssNavAlertFlagForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICL5HealthForSV(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set NavIC L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICSatelliteL5Health(svId, health, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetNavICSatelliteL5Health is deprecated since 21.3. You may use SetNavICL5HealthForSV.

Set NavIC L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICL5HealthForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get NavIC L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICSatelliteL5Health(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetNavICSatelliteL5Health is deprecated since 21.3. You may use GetNavICL5HealthForSV.

Get NavIC L5 health (Health of L5 signal)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetNavICL5HealthForSVResult(svId, health, dataSetName)

Result of GetNavICL5HealthForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Health      bool            L5 health, false = signal OK, true = signal bad
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICNavAlertFlagForSV(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set NavIC NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICSatelliteNavAlertFlag(svId, alert, dataSetName)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use SetNavICNavAlertFlagForSV.

Set NavIC NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICNavAlertFlagForSV(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get NavIC NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICSatelliteNavAlertFlag(svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use GetNavICNavAlertFlagForSV.

Get NavIC NAV Alert Flag

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetNavICNavAlertFlagForSVResult(svId, alert, dataSetName)

Result of GetNavICNavAlertFlagForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetPowerGlobalOffset(offset)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set global power offset default value for all signals and all systems

Name   Type   Description
------ ------ ---------------------------------------------------
Offset double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command GetPowerGlobalOffset()
Permission: EXECUTE_IF_IDLE

Get global power offset default value for all signals and all systems


***************************************************************************************************************************

Result GetPowerGlobalOffsetResult(offset)

Result of GetPowerGlobalOffset.

Name   Type   Description
------ ------ ---------------------------------------------------
Offset double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command SetPowerOffset(signal, offset)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set power offset default value for the signal given in argument

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                    "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                    "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
                                    "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Offset double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command GetPowerOffset(signal)
Permission: EXECUTE_IF_IDLE

Get power offset default value for the signal given in argument

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                    "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                    "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
                                    "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Result GetPowerOffsetResult(signal, offset)

Result of GetPowerOffset.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
                                    "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
                                    "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
                                    "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Offset double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command SetPowerSbasOffset(serviceProvider, offset)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set power offset default value for the SBAS Service Provider given in argument

Name            Type   Description
--------------- ------ ------------------------------------------------------------------------------
ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
Offset          double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command GetPowerSbasOffset(serviceProvider)
Permission: EXECUTE_IF_IDLE

Get power offset default value for the SBAS Service Provider given in argument

Name            Type   Description
--------------- ------ ------------------------------------------------------------------------------
ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"

***************************************************************************************************************************

Result GetPowerSbasOffsetResult(serviceProvider, offset)

Result of GetPowerSbasOffset.

Name            Type   Description
--------------- ------ ------------------------------------------------------------------------------
ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
Offset          double Offset in dB (negative value will attenuate signal)

***************************************************************************************************************************

Command SetModulationTarget(type, path, address, clockIsExternal, id)
Permission: EXECUTE_IF_IDLE

Set a modulation target.
If Id is not set, or if new, a new target is added.
For setter : If the Id is already used, the corresponding target is updated.

Name            Type   Description
--------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N210", "None", "NoneRT" or "X300".
Path            string File path. Optional, use only if type is "File".
Address         string Optional. IP Address if type is "N210" or "X300".
ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N210" or "X300".
Id              string Unique identifier automatically set by simulator

***************************************************************************************************************************

Command GetModulationTarget(id)
Permission: EXECUTE_IF_IDLE

Get a modulation target.
If Id is not set, or if new, a new target is added.
For setter : If the Id is already used, the corresponding target is updated.

Name Type   Description
---- ------ ------------------------------------------------
Id   string Unique identifier automatically set by simulator

***************************************************************************************************************************

Result GetModulationTargetResult(type, path, address, clockIsExternal, id)

Result of GetModulationTarget.

Name            Type   Description
--------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N210", "None", "NoneRT" or "X300".
Path            string File path. Optional, use only if type is "File".
Address         string Optional. IP Address if type is "N210" or "X300".
ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N210" or "X300".
Id              string Unique identifier automatically set by simulator

***************************************************************************************************************************

Command SetGpu(gpuIdx, output, id)
Permission: EXECUTE_IF_IDLE

Set the GPU associated with a RF output of a modulation target.

Name   Type   Description
------ ------ --------------------------------------
GpuIdx int    The gpu associated with the RF output.
Output int    Output index (zero based)
Id     string Target identifier

***************************************************************************************************************************

Command GetGpu(output, id)
Permission: EXECUTE_IF_IDLE

Get the GPU associated with a RF output of a modulation target.

Name   Type   Description
------ ------ -------------------------
Output int    Output index (zero based)
Id     string Target identifier

***************************************************************************************************************************

Result GetGpuResult(gpuIdx, output, id)

Result of GetGpu.

Name   Type   Description
------ ------ --------------------------------------
GpuIdx int    The gpu associated with the RF output.
Output int    Output index (zero based)
Id     string Target identifier

***************************************************************************************************************************

Command GetAllModulationTargets()
Permission: EXECUTE_IF_IDLE

Get all the modulation targets IDs


***************************************************************************************************************************

Result GetAllModulationTargetsResult(ids)

Result of GetAllModulationTargets.

Name Type         Description
---- ------------ ---------------
Ids  array string list of all IDs

***************************************************************************************************************************

Command RemoveModulationTarget(id)
Permission: EXECUTE_IF_IDLE

Remove a modulation target.

Name Type   Description
---- ------ -----------------
Id   string Target identifier

***************************************************************************************************************************

Command RemoveAllModulationTargets()
Permission: EXECUTE_IF_IDLE

Remove all modulation targets.


***************************************************************************************************************************

Command ChangeModulationTargetName(targetName, id)
Permission: EXECUTE_IF_IDLE

Change the modulation target name. The name is only used for display purpose.

Name       Type   Description
---------- ------ -----------------
TargetName string New target name
Id         string Target identifier

***************************************************************************************************************************

Command ChangeModulationTargetSignals(output, minRate, maxRate, band, signal, gain, gaussianNoise, id, centralFrequency)
Permission: EXECUTE_IF_IDLE

Set the signals for the specified target and output index.
Skydel tries to keep the sampling rate as low as possible,
but it is possible to set constaints with MinRate and MaxRate.

Name             Type            Description
---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Output           int             Output index (zero based)
MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
Band             string          Frequency band is "LowerL" or "UpperL"
Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
Id               string          Target identifier
CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.

***************************************************************************************************************************

Command GetModulationTargetSignals(output, id)
Permission: EXECUTE_IF_IDLE

Get the signals for the specified target and output index.
Skydel tries to keep the sampling rate as low as possible,
but it is possible to set constaints with MinRate and MaxRate.

Name   Type   Description
------ ------ -------------------------
Output int    Output index (zero based)
Id     string Target identifier

***************************************************************************************************************************

Result GetModulationTargetSignalsResult(output, minRate, maxRate, band, signal, gain, gaussianNoise, id, centralFrequency)

Result of GetModulationTargetSignals.

Name             Type            Description
---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Output           int             Output index (zero based)
MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
Band             string          Frequency band is "LowerL" or "UpperL"
Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
Id               string          Target identifier
CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.

***************************************************************************************************************************

Command ChangeModulationTargetInterference(output, minRate, maxRate, group, centralFreq, gain, id, signal)
Permission: EXECUTE_IF_IDLE

Set the specified target and output index to a group of interferences.
An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
Skydel tries to keep the sampling rate as low as possible,
but it is possible to set constaints with MinRate and MaxRate.

Name        Type            Description
----------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Output      int             Output index (zero based)
MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
Group       int             Interference group number [1..16] or 0 for no group
CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
Id          string          Target identifier
Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Command GetModulationTargetInterferences(output, id)
Permission: EXECUTE_IF_IDLE

Get the specified target and output index to a group of interferences.
An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
Skydel tries to keep the sampling rate as low as possible,
but it is possible to set constaints with MinRate and MaxRate.

Name   Type   Description
------ ------ -------------------------
Output int    Output index (zero based)
Id     string Target identifier

***************************************************************************************************************************

Result GetModulationTargetInterferencesResult(output, minRate, maxRate, group, centralFreq, gain, id, signal)

Result of GetModulationTargetInterferences.

Name        Type            Description
----------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Output      int             Output index (zero based)
MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
Group       int             Interference group number [1..16] or 0 for no group
CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
Id          string          Target identifier
Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Command ChangeModulationAnechoicTargetInterference(group, output, centralFreq)
Permission: EXECUTE_IF_IDLE

Assign an output to a specific interference group. This command works only
for Anechoic Chamber target.

Name        Type   Description
----------- ------ -------------------------------------------------------------------------------------------
Group       int    Interference group number [1..16]
Output      string Output is radio name and RF output. For example, RF output B on radio 3 is referred as "3B"
CentralFreq double Central frequency (Hz)

***************************************************************************************************************************

Command RemoveModulationAnechoicTargetInterference(group)
Permission: EXECUTE_IF_IDLE

Remove output assignation. This command works only for Anechoic Chamber
target.

Name  Type Description
----- ---- ---------------------------------
Group int  Interference group number [1..16]

***************************************************************************************************************************

Command SetRfGain(output, gain)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

USE AT YOUR OWN RISKS. Set the RF Gain of the SDR

Name   Type   Description
------ ------ -----------------------------------------------------------------------
Output int    Output index (zero based)
Gain   double RF Gain of the SDR, in dB. Default value is 0. Only supported for USRP.

***************************************************************************************************************************

Command ImportConstellationParameters(system, path, rollover, dataSetName)
Permission: EXECUTE_IF_IDLE

Import navigation message file for the specified constellation. This could be Rinex, SEM or YUMA file for GPS. Only Rinex for the others.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
System      string          "GPS", "GLONASS", "Galileo", "SBAS", "BeiDou", "QZSS" or "NavIC"
Path        string          File path
Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file. Constellations that support this parameter are  "GPS", "Galileo", "BeiDou", "QZSS" and "NavIC"

***************************************************************************************************************************

Command ImportIonoParameters(path, type)
Permission: EXECUTE_IF_IDLE

Import ionospheric parameters from a Rinex file.

Name Type            Description
---- --------------- ------------------------------------------------------------------------------
Path string          File path
Type optional string Ionospheric parameters type: "Klobuchar" or "BDGIM". The default is Klobuchar.

***************************************************************************************************************************

Command ImportMODIPFile(path)
Permission: EXECUTE_IF_IDLE

Import MODIP data file.

Name Type   Description
---- ------ -----------
Path string File path.

***************************************************************************************************************************

Command ImportCCIRFilesFromDirectory(path)
Permission: EXECUTE_IF_IDLE

Import all the CCIR data files from the specified directory.

Name Type   Description
---- ------ ---------------
Path string Directory path.

***************************************************************************************************************************

Command ImportGlonassAlmanac(path)
Permission: EXECUTE_IF_IDLE

Import GLONASS almanac file

Name Type   Description
---- ------ -----------------
Path string Almanac file path

***************************************************************************************************************************

Command ImportNmeaTrack(path)
Permission: EXECUTE_IF_IDLE

Import NMEA track file

Name Type   Description
---- ------ --------------
Path string NMEA file path

***************************************************************************************************************************

Command ClearVehiculeTrajectory()
Permission: EXECUTE_IF_IDLE

Clear NMEA trajectory file


***************************************************************************************************************************

Command SetDefaultVehicleAntennaModel(name)
Permission: EXECUTE_IF_IDLE

Set the default vehicle antenna model.

Name Type   Description
---- ------ ---------------------------
Name string Default antenna model name.

***************************************************************************************************************************

Command GetDefaultVehicleAntennaModel()
Permission: EXECUTE_IF_IDLE

Get the default vehicle antenna model.


***************************************************************************************************************************

Result GetDefaultVehicleAntennaModelResult(name)

Result of GetDefaultVehicleAntennaModel.

Name Type   Description
---- ------ ---------------------------
Name string Default antenna model name.

***************************************************************************************************************************

Command GetAllVehicleAntennaNames()
Permission: EXECUTE_IF_IDLE

Get a list of all vehicle antenna names


***************************************************************************************************************************

Result GetAllVehicleAntennaNamesResult(antennaNames)

Result of GetAllVehicleAntennaNames.

Name         Type         Description
------------ ------------ -----------------------------
AntennaNames array string A list of antenna model names

***************************************************************************************************************************

Command SetVehicleAntennaGain(gain, type, band, name)
Permission: EXECUTE_IF_IDLE

Set Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Band GNSSBand           Frequency band
Name optional string    Vehicle antenna name

***************************************************************************************************************************

Command GetVehicleAntennaGain(band, name)
Permission: EXECUTE_IF_IDLE

Get Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.

Name Type            Description
---- --------------- --------------------
Band GNSSBand        Frequency band
Name optional string Vehicle antenna name

***************************************************************************************************************************

Result GetVehicleAntennaGainResult(gain, type, band, name)

Result of GetVehicleAntennaGain.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Band GNSSBand           Frequency band
Name optional string    Vehicle antenna name

***************************************************************************************************************************

Command SetVehicleAntennaPhaseOffset(phaseOffset, type, band, name)
Permission: EXECUTE_IF_IDLE

Set Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.

Name        Type               Description
----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type        AntennaPatternType Pattern type
Band        GNSSBand           Frequency band
Name        optional string    Vehicle antenna name

***************************************************************************************************************************

Command GetVehicleAntennaPhaseOffset(band, name)
Permission: EXECUTE_IF_IDLE

Get Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.

Name Type            Description
---- --------------- --------------------
Band GNSSBand        Frequency band
Name optional string Vehicle antenna name

***************************************************************************************************************************

Result GetVehicleAntennaPhaseOffsetResult(phaseOffset, type, band, name)

Result of GetVehicleAntennaPhaseOffset.

Name        Type               Description
----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type        AntennaPatternType Pattern type
Band        GNSSBand           Frequency band
Name        optional string    Vehicle antenna name

***************************************************************************************************************************

Command SetVehicleAntennaGainCSV(filePath, type, band, name)
Permission: EXECUTE_IF_IDLE

Set vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.

Name     Type               Description
-------- ------------------ ----------------------------------------------------------------------------------------------------------------------
FilePath string             File path of the CSV (see user manual for CSV file format details). For Default and None types, leave this field empty
Type     AntennaPatternType Pattern type
Band     GNSSBand           Frequency band
Name     optional string    Vehicle antenna name

***************************************************************************************************************************

Command SetVehicleAntennaPhaseOffsetCSV(filePath, fileFormat, type, band, name)
Permission: EXECUTE_IF_IDLE

Set vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.

Name       Type                   Description
---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
Type       AntennaPatternType     Pattern type
Band       GNSSBand               Frequency band
Name       optional string        Vehicle antenna name

***************************************************************************************************************************

Command AddVehicleGainPatternOffset(band, offset, antennaName)
Permission: EXECUTE_IF_IDLE

Add an offset (in db) for all values of the pattern.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band.
Offset      double          Power offset
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command GetVehicleGainPatternOffset(band, antennaName)
Permission: EXECUTE_IF_IDLE

Get the offset (in dB) for the antenna gain pattern of the band.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band.
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Result GetVehicleGainPatternOffsetResult(band, offset, antennaName)

Result of GetVehicleGainPatternOffset.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band.
Offset      double          Power offset
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command AddVehiclePhasePatternOffset(band, offset, antennaName)
Permission: EXECUTE_IF_IDLE

Add an offset (in rad) for all values of the phase pattern.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
Offset      double          Phase offset (in rad)
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command GetVehiclePhasePatternOffset(band, antennaName)
Permission: EXECUTE_IF_IDLE

Get the offset (in rad) for the antenna phase pattern of the band.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Result GetVehiclePhasePatternOffsetResult(band, offset, antennaName)

Result of GetVehiclePhasePatternOffset.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
Offset      double          Phase offset (in rad)
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Enumeration AntennaPatternFileType

CSV file format of antenna pattern

Possible values:
  NotAngle
  Degrees
  Radians
  NoneFile

***************************************************************************************************************************

Command SetVehicleAntennaOffset(x, y, z, yaw, pitch, roll, name)
Permission: EXECUTE_IF_IDLE

Set antenna offset and orientation relative to body frame.
The origin of the body frame follows the vehicle trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name  Type            Description
----- --------------- --------------------------------------------
X     double          Antenna X offset in the body frame (meter)
Y     double          Antenna Y offset in the body frame (meter)
Z     double          Antenna Z offset in the body frame (meter)
Yaw   double          Antenna Yaw offset in the body frame (rad)
Pitch double          Antenna Pitch offset in the body frame (rad)
Roll  double          Antenna Roll offset in the body frame (rad)
Name  optional string Unique vehicle antenna name

***************************************************************************************************************************

Command GetVehicleAntennaOffset(name)
Permission: EXECUTE_IF_IDLE

Get the vehicle antenna offset infos. If no name is specified, the default vehicle antenna is get.

Name Type            Description
---- --------------- ---------------------------
Name optional string Unique vehicle antenna name

***************************************************************************************************************************

Result GetVehicleAntennaOffsetResult(x, y, z, yaw, pitch, roll, name)

Result of GetVehicleAntennaOffset.

Name  Type            Description
----- --------------- --------------------------------------------
X     double          Antenna X offset in the body frame (meter)
Y     double          Antenna Y offset in the body frame (meter)
Z     double          Antenna Z offset in the body frame (meter)
Yaw   double          Antenna Yaw offset in the body frame (rad)
Pitch double          Antenna Pitch offset in the body frame (rad)
Roll  double          Antenna Roll offset in the body frame (rad)
Name  optional string Unique vehicle antenna name

***************************************************************************************************************************

Command AddEmptyVehicleAntennaModel(name)
Permission: EXECUTE_IF_IDLE

Create an empty vehicle antenna model.

Name Type   Description
---- ------ --------------------------
Name string Vehicle antenna model name

***************************************************************************************************************************

Command DeleteVehicleAntennaModel(name)
Permission: EXECUTE_IF_IDLE

Delete a vehicle antenna model. The default vehicle antenna model can't be deleted.

Name Type   Description
---- ------ --------------------------
Name string Vehicle antenna model name

***************************************************************************************************************************

Command RenameVehicleAntennaModel(name, newName)
Permission: EXECUTE_IF_IDLE

Rename a vehicle antenna model.

Name    Type   Description
------- ------ ------------------------------------
Name    string Reference vehicle antenna model name
NewName string New vehicle antenna model name

***************************************************************************************************************************

Command CopyVehicleAntennaModel(name, copyName)
Permission: EXECUTE_IF_IDLE

Copy a vehicle antenna model.

Name     Type   Description
-------- ------ ------------------------------------
Name     string Reference vehicle antenna model name
CopyName string Copy vehicle antenna model name

***************************************************************************************************************************

Command GetVehicleAntennaModel(name)
Permission: EXECUTE_IF_IDLE

Get all infos about this antenna model.

Name Type   Description
---- ------ --------------------------
Name string Vehicle antenna model name

***************************************************************************************************************************

Result GetVehicleAntennaModelResult(gainL1, gainTypeL1, gainOffsetL1, gainL2, gainTypeL2, gainOffsetL2, gainL5, gainTypeL5, gainOffsetL5, gainE6, gainTypeE6, gainOffsetE6, phaseOffsetL1, phaseOffsetTypeL1, phasePatternOffsetL1, phaseOffsetL2, phaseOffsetTypeL2, phasePatternOffsetL2, phaseOffsetL5, phaseOffsetTypeL5, phasePatternOffsetL5, phaseOffsetE6, phaseOffsetTypeE6, phasePatternOffsetE6, x, y, z, yaw, pitch, roll, name)

Result of GetVehicleAntennaModel

Name                 Type               Description
-------------------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
GainL1               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
GainTypeL1           AntennaPatternType Pattern type
GainOffsetL1         double             Pattern offset
GainL2               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
GainTypeL2           AntennaPatternType Pattern type
GainOffsetL2         double             Pattern offset
GainL5               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
GainTypeL5           AntennaPatternType Pattern type
GainOffsetL5         double             Pattern offset
GainE6               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
GainTypeE6           AntennaPatternType Pattern type
GainOffsetE6         double             Pattern offset
PhaseOffsetL1        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
PhaseOffsetTypeL1    AntennaPatternType Pattern type
PhasePatternOffsetL1 double             Pattern offset
PhaseOffsetL2        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
PhaseOffsetTypeL2    AntennaPatternType Pattern type
PhasePatternOffsetL2 double             Pattern offset
PhaseOffsetL5        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
PhaseOffsetTypeL5    AntennaPatternType Pattern type
PhasePatternOffsetL5 double             Pattern offset
PhaseOffsetE6        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
PhaseOffsetTypeE6    AntennaPatternType Pattern type
PhasePatternOffsetE6 double             Pattern offset
X                    double             Antenna X offset in the body frame (meter)
Y                    double             Antenna Y offset in the body frame (meter)
Z                    double             Antenna Z offset in the body frame (meter)
Yaw                  double             Antenna Yaw offset in the body frame (rad)
Pitch                double             Antenna Pitch offset in the body frame (rad)
Roll                 double             Antenna Roll offset in the body frame (rad)
Name                 string             Vehicle antenna model name

***************************************************************************************************************************

Command ImportVehicleAntennaModel(filePath)
Permission: EXECUTE_IF_IDLE

Import a vehicle antenna model from a XML file.

Name     Type   Description
-------- ------ ------------------------------
FilePath string File path of the antenna model

***************************************************************************************************************************

Command ExportVehicleAntennaModel(antennaName, filePath, overwriting)
Permission: EXECUTE_IF_IDLE

Export a vehicle antenna model in a XML file.

Name        Type   Description
----------- ------ -----------------------------------------------------
AntennaName string Vehicle antenna model name
FilePath    string The antenna model will be exported in this file path.
Overwriting bool   Overwrite the old file if true.

***************************************************************************************************************************

Command SetAntennaChange(startTime, antenna, id)
Permission: EXECUTE_IF_IDLE

Add/edit an antenna change.

Name      Type   Description
--------- ------ --------------------------------------------------
StartTime double Elapsed time in seconds since start of simulation.
Antenna   string Antenna model name
Id        string Unique identifier of the event

***************************************************************************************************************************

Command GetAntennaChange(id)
Permission: EXECUTE_IF_IDLE

Get an antenna change.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetAntennaChangeResult(startTime, antenna, id)

Result of GetAntennaChange.

Name      Type   Description
--------- ------ --------------------------------------------------
StartTime double Elapsed time in seconds since start of simulation.
Antenna   string Antenna model name
Id        string Unique identifier of the event

***************************************************************************************************************************

Command RemoveAntennaChange(id)
Permission: EXECUTE_IF_IDLE

Removes an antenna change.

Name Type   Description
---- ------ -------------------------------------
Id   string Unique identifier (see AntennaChange)

***************************************************************************************************************************

Command ClearAllAntennaChanges()
Permission: EXECUTE_IF_IDLE

Clear all antenna changes.


***************************************************************************************************************************

Command SetWFAntennaOffset(x, y, z, yaw, pitch, roll)
Permission: EXECUTE_IF_IDLE

Set WF antenna offset and orientation relative to body frame.
The origin of the body frame follows the vehicle trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name  Type   Description
----- ------ -----------------------------------------------
X     double WF Antenna X offset in the body frame (meter)
Y     double WF Antenna Y offset in the body frame (meter)
Z     double WF Antenna Z offset in the body frame (meter)
Yaw   double WF Antenna Yaw offset in the body frame (rad)
Pitch double WF Antenna Pitch offset in the body frame (rad)
Roll  double WF Antenna Roll offset in the body frame (rad)

***************************************************************************************************************************

Command GetWFAntennaOffset()
Permission: EXECUTE_IF_IDLE

Get the WF antenna offset infos.


***************************************************************************************************************************

Result GetWFAntennaOffsetResult(x, y, z, yaw, pitch, roll)

Result of GetWFAntennaOffset.

Name  Type   Description
----- ------ -----------------------------------------------
X     double WF Antenna X offset in the body frame (meter)
Y     double WF Antenna Y offset in the body frame (meter)
Z     double WF Antenna Z offset in the body frame (meter)
Yaw   double WF Antenna Yaw offset in the body frame (rad)
Pitch double WF Antenna Pitch offset in the body frame (rad)
Roll  double WF Antenna Roll offset in the body frame (rad)

***************************************************************************************************************************

Command SetWFAntennaElementOffset(x, y, z, yaw, pitch, roll, element)
Permission: EXECUTE_IF_IDLE

Set WF antenna offset and orientation relative to CRPA Antenna frame for the specified element index.

Name    Type   Description
------- ------ -------------------------------------------------------
X       double WF Element X offset in the CRPA antenna frame (meter)
Y       double WF Element Y offset in the CRPA antenna frame (meter)
Z       double WF Element Z offset in the CRPA antenna frame (meter)
Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
Element int    One-based index for element in antenna.

***************************************************************************************************************************

Command GetWFAntennaElementOffset(element)
Permission: EXECUTE_IF_IDLE

Get the WF antenna offset infos for this element.

Name    Type Description
------- ---- ---------------------------------------
Element int  One-based index for element in antenna.

***************************************************************************************************************************

Result GetWFAntennaElementOffsetResult(x, y, z, yaw, pitch, roll, element)

Result of GetWFAntennaElementOffset.

Name    Type   Description
------- ------ -------------------------------------------------------
X       double WF Element X offset in the CRPA antenna frame (meter)
Y       double WF Element Y offset in the CRPA antenna frame (meter)
Z       double WF Element Z offset in the CRPA antenna frame (meter)
Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
Element int    One-based index for element in antenna.

***************************************************************************************************************************

Command SetWFAntennaElementModel(antennaModelName, element)
Permission: EXECUTE_IF_IDLE

Set WF Antenna model for this element

Name             Type   Description
---------------- ------ ----------------------------------------------------------------------------------------------------
AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
Element          int    One-based index for element in antenna.

***************************************************************************************************************************

Command GetWFAntennaElementModel(element)
Permission: EXECUTE_IF_IDLE

Get WF Antenna model for this element

Name    Type Description
------- ---- ---------------------------------------
Element int  One-based index for element in antenna.

***************************************************************************************************************************

Result GetWFAntennaElementModelResult(antennaModelName, element)

Result of GetWFAntennaElementModel.

Name             Type   Description
---------------- ------ ----------------------------------------------------------------------------------------------------
AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
Element          int    One-based index for element in antenna.

***************************************************************************************************************************

Command SetWFAntennaElementPhasePatternOffset(phaseOffset, element)
Permission: EXECUTE_IF_IDLE

Set WF Antenna phase pattern offset (in rad) for this element

Name        Type   Description
----------- ------ -------------------------------------------------------------------------
PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
Element     int    One-based index for element in antenna.

***************************************************************************************************************************

Command GetWFAntennaElementPhasePatternOffset(element)
Permission: EXECUTE_IF_IDLE

Get WF Antenna phase pattern offset (in rad) for this element

Name    Type Description
------- ---- ---------------------------------------
Element int  One-based index for element in antenna.

***************************************************************************************************************************

Result GetWFAntennaElementPhasePatternOffsetResult(phaseOffset, element)

Result of GetWFAntennaElementPhasePatternOffset.

Name        Type   Description
----------- ------ -------------------------------------------------------------------------
PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
Element     int    One-based index for element in antenna.

***************************************************************************************************************************

Command SetWFAntennaElementEnabled(element, enabled)
Permission: EXECUTE_IF_IDLE

Set WF antenna element enabled or disabled. A disabled antenna element is not simulated at all.

Name    Type Description
------- ---- -------------------------------------------------
Element int  One-based index for element in antenna.
Enabled bool If True, this antenna element will bil simulated.

***************************************************************************************************************************

Command IsWFAntennaElementEnabled(element)
Permission: EXECUTE_IF_IDLE

Get whether an antenna element is enabled or disabled.

Name    Type Description
------- ---- ---------------------------------------
Element int  One-based index for element in antenna.

***************************************************************************************************************************

Result IsWFAntennaElementEnabledResult(element, enabled)

Result of IsWFAntennaElementEnabled.

Name    Type Description
------- ---- -------------------------------------------------
Element int  One-based index for element in antenna.
Enabled bool If True, this antenna element will bil simulated.

***************************************************************************************************************************

Command GetAllSVAntennaNames(system)
Permission: EXECUTE_IF_IDLE

Get a list of all space vehicle antenna names.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result GetAllSVAntennaNamesResult(system, antennaNames)

Result of GetAllSVAntennaNames.

Name         Type         Description
------------ ------------ ----------------------------------------------------------------
System       string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
AntennaNames array string A list of antenna model names.

***************************************************************************************************************************

Command AddSVGainPatternOffset(band, system, offset, antennaName)
Permission: EXECUTE_IF_IDLE

Add an offset (in dB) for all values of the pattern.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Offset      double          Power offset
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command GetSVGainPatternOffset(band, system, antennaName)
Permission: EXECUTE_IF_IDLE

Get the offset (in dB) for the antenna gain pattern of the band.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Result GetSVGainPatternOffsetResult(band, system, offset, antennaName)

Result of GetSVGainPatternOffset.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Offset      double          Power offset
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command AddSVPhasePatternOffset(band, system, offset, antennaName)
Permission: EXECUTE_IF_IDLE

Add an offset (in rad) for all values of the phase pattern.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Offset      double          Phase offset (in rad)
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command GetSVPhasePatternOffset(band, system, antennaName)
Permission: EXECUTE_IF_IDLE

Get the offset (in rad) for the antenna phase pattern of the band.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Result GetSVPhasePatternOffsetResult(band, system, offset, antennaName)

Result of GetSVPhasePatternOffset.

Name        Type            Description
----------- --------------- ------------------------------------------------------------------------------------
Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Offset      double          Phase offset (in rad)
AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna

***************************************************************************************************************************

Command SetSVAntennaGain(gain, type, band, system, name)
Permission: EXECUTE_IF_IDLE

Set space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.

Name   Type               Description
------ ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type   AntennaPatternType Pattern type
Band   GNSSBand           Frequency band
System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name   optional string    SV antenna name

***************************************************************************************************************************

Command GetSVAntennaGain(band, system, name)
Permission: EXECUTE_IF_IDLE

Get space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.

Name   Type            Description
------ --------------- ----------------------------------------------------------------
Band   GNSSBand        Frequency band
System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name   optional string SV antenna name

***************************************************************************************************************************

Result GetSVAntennaGainResult(gain, type, band, system, name)

Result of GetSVAntennaGain.

Name   Type               Description
------ ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type   AntennaPatternType Pattern type
Band   GNSSBand           Frequency band
System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name   optional string    SV antenna name

***************************************************************************************************************************

Command SetSVAntennaPhaseOffset(phaseOffset, type, band, system, name)
Permission: EXECUTE_IF_IDLE

Set space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.

Name        Type               Description
----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type        AntennaPatternType Pattern type
Band        GNSSBand           Frequency band
System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name        optional string    SV antenna name

***************************************************************************************************************************

Command GetSVAntennaPhaseOffset(band, system, name)
Permission: EXECUTE_IF_IDLE

Get space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.

Name   Type            Description
------ --------------- ----------------------------------------------------------------
Band   GNSSBand        Frequency band
System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name   optional string SV antenna name

***************************************************************************************************************************

Result GetSVAntennaPhaseOffsetResult(phaseOffset, type, band, system, name)

Result of GetSVAntennaPhaseOffset.

Name        Type               Description
----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type        AntennaPatternType Pattern type
Band        GNSSBand           Frequency band
System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name        optional string    SV antenna name

***************************************************************************************************************************

Command SetSVAntennaGainCSV(filePath, type, band, system, name)
Permission: EXECUTE_IF_IDLE

Set space vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.

Name     Type               Description
-------- ------------------ ------------------------------------------------------------------------------------------------------------------
FilePath string             File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
Type     AntennaPatternType Pattern type
Band     GNSSBand           Frequency band
System   string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name     optional string    Vehicle antenna name

***************************************************************************************************************************

Command SetSVAntennaPhaseOffsetCSV(filePath, fileFormat, type, band, system, name)
Permission: EXECUTE_IF_IDLE

Set space vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.

Name       Type                   Description
---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
Type       AntennaPatternType     Pattern type
Band       GNSSBand               Frequency band
System     string                 "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Name       optional string        SV antenna name

***************************************************************************************************************************

Command AddEmptySVAntennaModel(name, system)
Permission: EXECUTE_IF_IDLE

Create an empty space vehicle antenna model.

Name   Type   Description
------ ------ ----------------------------------------------------------------
Name   string SV antenna model name
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command DeleteSVAntennaModel(name, system)
Permission: EXECUTE_IF_IDLE

Delete a space vehicle antenna model. The default SV antenna model can't be deleted.

Name   Type   Description
------ ------ ----------------------------------------------------------------
Name   string SV antenna model name
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command RenameSVAntennaModel(name, newName, system)
Permission: EXECUTE_IF_IDLE

Rename a space vehicle antenna model.

Name    Type   Description
------- ------ ----------------------------------------------------------------
Name    string Reference space vehicle antenna model name
NewName string New space vehicle antenna model name
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command CopySVAntennaModel(name, copyName, system)
Permission: EXECUTE_IF_IDLE

Copy a space vehicle antenna model.

Name     Type   Description
-------- ------ ----------------------------------------------------------------
Name     string Reference space vehicle antenna model name
CopyName string Copy space vehicle antenna model name
System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command ImportSVAntennaModel(filePath, system)
Permission: EXECUTE_IF_IDLE

Import a space vehicle antenna model from a XML file.

Name     Type   Description
-------- ------ ----------------------------------------------------------------
FilePath string File path of the antenna model
System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command ExportSVAntennaModel(antennaName, system, filePath, overwriting)
Permission: EXECUTE_IF_IDLE

Export a space vehicle antenna model in a XML file.

Name        Type   Description
----------- ------ ----------------------------------------------------------------
AntennaName string SV antenna model name
System      string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
FilePath    string The antenna model will be exported in this file path.
Overwriting bool   Overwrite the old file if true.

***************************************************************************************************************************

Command SetSVAntennaModelForSV(system, svId, antennaModelName)
Permission: EXECUTE_IF_IDLE

Set the antenna model used by the SV.

Name             Type   Description
---------------- ------ -----------------------------------------------------------------
System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
SvId             int    The satellite's SV ID.
AntennaModelName string SV antenna model name.

***************************************************************************************************************************

Command GetSVAntennaModelForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get the antenna model used by the SV.

Name   Type   Description
------ ------ -----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
SvId   int    The satellite's SV ID.

***************************************************************************************************************************

Result GetSVAntennaModelForSVResult(system, svId, antennaModelName)

Result of GetSVAntennaModelForSV.

Name             Type   Description
---------------- ------ -----------------------------------------------------------------
System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
SvId             int    The satellite's SV ID.
AntennaModelName string SV antenna model name.

***************************************************************************************************************************

Command SetSVAntennaModelForEachSV(system, antennaModelNames)
Permission: EXECUTE_IF_IDLE

Set the antenna model for all satellites.

Name              Type         Description
----------------- ------------ -----------------------------------------------------------------------------------------------------
System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command GetSVAntennaModelForEachSV(system)
Permission: EXECUTE_IF_IDLE

Get the antenna model for all satellites.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result GetSVAntennaModelForEachSVResult(system, antennaModelNames)

Result of GetSVAntennaModelForEachSV.

Name              Type         Description
----------------- ------------ -----------------------------------------------------------------------------------------------------
System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command SetSVType(system, svId, svType)
Permission: EXECUTE_IF_IDLE

Set the type of a SV.
Satellite SV ID accepted values (0 for all SVs):
QZSS 1..10

Name   Type   Description
------ ------ -------------------------------------------------------------
System string Only "QZSS" supported.
SvId   int    Satellite SV ID, see command description for accepted values.
SvType string Type of the SV. QZSS: "BlockI", "BlockII".

***************************************************************************************************************************

Command GetSVType(system, svId)
Permission: EXECUTE_IF_IDLE

Get the type of a SV.
Satellite SV ID accepted values:
QZSS 1..10

Name   Type   Description
------ ------ -------------------------------------------------------------
System string Only "QZSS" supported.
SvId   int    Satellite SV ID, see command description for accepted values.

***************************************************************************************************************************

Result GetSVTypeResult(system, svId, svType)

Result of GetSVType.

Name   Type   Description
------ ------ -------------------------------------------------------------
System string Only "QZSS" supported.
SvId   int    Satellite SV ID, see command description for accepted values.
SvType string Type of the SV. QZSS: "BlockI", "BlockII".

***************************************************************************************************************************

Command SetTransmittedPrnForSV(svId, signalPrnDict)
Permission: EXECUTE_IF_IDLE

Set the PRNs transmitted by the SV ID for these signals.

Name          Type            Description
------------- --------------- --------------------------------------------------------------------------------
SvId          int             Satellite SV ID.
SignalPrnDict dict string:int A dictionary of signal prn pairs.
                              Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
                                                 "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
                                                 "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"

***************************************************************************************************************************

Command GetTransmittedPrnForSV(svId, signalArray)
Permission: EXECUTE_IF_IDLE

Get the PRNs transmitted by the SV ID for these signals.

Name        Type         Description
----------- ------------ ------------------------------------------------------------------------------
SvId        int          Satellite SV ID.
SignalArray array string An array of signals.
                         Accepted values are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2",
                                              "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB",
                                              "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and
                                              "NAVICL5"

***************************************************************************************************************************

Result GetTransmittedPrnForSVResult(svId, signalPrnDict)

Result of GetTransmittedPrnForSV.

Name          Type            Description
------------- --------------- --------------------------------------------------------------------------------
SvId          int             Satellite SV ID.
SignalPrnDict dict string:int A dictionary of signal prn pairs.
                              Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
                                                 "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
                                                 "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"

***************************************************************************************************************************

Command SetPrnOfSVID(signal, svId, prn)
Permission: EXECUTE_IF_IDLE

Set the PRN transmitted by the SV ID for this signal.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId   int    Satellite SV ID.
Prn    int    PRN number.

***************************************************************************************************************************

Command GetPrnOfSVID(signal, svId)
Permission: EXECUTE_IF_IDLE

Get the PRN transmitted by the SV ID for this signal.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId   int    Satellite SV ID.

***************************************************************************************************************************

Result GetPrnOfSVIDResult(signal, svId, prn)

Result of GetPrnOfSVID.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId   int    Satellite SV ID.
Prn    int    PRN number.

***************************************************************************************************************************

Command SetPrnForEachSV(signal, prn)
Permission: EXECUTE_IF_IDLE

Set the PRN for each satellite for specified signals.

Name   Type      Description
------ --------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)

***************************************************************************************************************************

Command GetPrnForEachSV(signal)
Permission: EXECUTE_IF_IDLE

Get the PRN for each satellite for specified signals.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Result GetPrnForEachSVResult(signal, prn)

Result of GetPrnForEachSV.

Name   Type      Description
------ --------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)

***************************************************************************************************************************

Command ResetToDefaultPrn(system)
Permission: EXECUTE_IF_IDLE

Reset the PRNs of all satellites in specified system, for all signals.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command EnableTrajectorySmoothing(enabled)
Permission: EXECUTE_IF_IDLE

Set trajectory smoothing for Track or Route enabled or disabled

Name    Type Description
------- ---- ------------------------------------------------------
Enabled bool If true, trajectory will be smoothed during simulation

***************************************************************************************************************************

Command IsTrajectorySmoothingEnabled()
Permission: EXECUTE_IF_IDLE

Get trajectory smoothing for Track or Route enabled or disabled


***************************************************************************************************************************

Result IsTrajectorySmoothingEnabledResult(enabled)

Result of IsTrajectorySmoothingEnabled.

Name    Type Description
------- ---- ------------------------------------------------------
Enabled bool If true, trajectory will be smoothed during simulation

***************************************************************************************************************************

Command EnableSimulationStopAtTrajectoryEnd(enabled)
Permission: EXECUTE_IF_IDLE

Set simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes

Name    Type Description
------- ---- ------------------------------------------------------------------------
Enabled bool If true, simulation will stop when the vehicle will reach trajectory end

***************************************************************************************************************************

Command IsSimulationStopAtTrajectoryEndEnabled()
Permission: EXECUTE_IF_IDLE

Get simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes


***************************************************************************************************************************

Result IsSimulationStopAtTrajectoryEndEnabledResult(enabled)

Result of IsSimulationStopAtTrajectoryEndEnabled.

Name    Type Description
------- ---- ------------------------------------------------------------------------
Enabled bool If true, simulation will stop when the vehicle will reach trajectory end

***************************************************************************************************************************

Command ForceAttitudeToZero(enabled)
Permission: EXECUTE_IF_IDLE

Set force vehicle yaw, pitch and roll to zero enabled or disabled

Name    Type Description
------- ---- -----------------------------------------------
Enabled bool If true, vehicle won't rotate during simulation

***************************************************************************************************************************

Command IsAttitudeToZeroForced()
Permission: EXECUTE_IF_IDLE

Get force vehicle yaw, pitch and roll to zero enabled or disabled


***************************************************************************************************************************

Result IsAttitudeToZeroForcedResult(enabled)

Result of IsAttitudeToZeroForced.

Name    Type Description
------- ---- -----------------------------------------------
Enabled bool If true, vehicle won't rotate during simulation

***************************************************************************************************************************

Command SetVehicleTrajectory(type)
Permission: EXECUTE_IF_IDLE

Set vehicle trajectory type

Name Type   Description
---- ------ -----------------------------------------------------------------------
Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")

***************************************************************************************************************************

Command GetVehicleTrajectory()
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Get vehicle trajectory type


***************************************************************************************************************************

Result GetVehicleTrajectoryResult(type)

Result of GetVehicleTrajectory.

Name Type   Description
---- ------ -----------------------------------------------------------------------
Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")

***************************************************************************************************************************

Command SetVehicleType(type)
Permission: EXECUTE_IF_IDLE

Set vehicle type for Route Trajectory

Name Type   Description
---- ------ ----------------------------------------------------------
Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")

***************************************************************************************************************************

Command GetVehicleType()
Permission: EXECUTE_IF_IDLE

Get vehicle type for Route Trajectory


***************************************************************************************************************************

Result GetVehicleTypeResult(type)

Result of GetVehicleType.

Name Type   Description
---- ------ ----------------------------------------------------------
Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")

***************************************************************************************************************************

Command BeginTrackDefinition()
Permission: EXECUTE_IF_IDLE

Begins a new track definition. Actual track remains unchanged until
EndTrackDefinition command is sent and successful. After this command, the
client must push time and position pairs to form a complete track. Once all the
positions are sent, the client must send the command EndTrackDefinition.


***************************************************************************************************************************

Command PushTrackEcef(time, x, y, z)
Permission: EXECUTE_IF_IDLE

Push a track ecef node. Must be called after BeginTrackDefinition and before EndTrackDefinition.

Name Type   Description
---- ------ --------------------------------------
Time int    Node Timestamp in miliseconds
X    double X distance from earth-center in meters
Y    double Y distance from earth-center in meters
Z    double Z distance from earth-center in meters

***************************************************************************************************************************

Command PushTrackEcefNed(time, x, y, z, yaw, pitch, roll)
Permission: EXECUTE_IF_IDLE

Push a track ecef and ned attitude node. Must be called after BeginTrackDefinition and before EndTrackDefinition.

Name  Type   Description
----- ------ --------------------------------------
Time  int    Node Timestamp in miliseconds
X     double X distance from earth-center in meters
Y     double Y distance from earth-center in meters
Z     double Z distance from earth-center in meters
Yaw   double Yaw in radians
Pitch double Pitch in radians
Roll  double Roll in radians

***************************************************************************************************************************

Command EndTrackDefinition()
Permission: EXECUTE_IF_IDLE

This command completes the track started with BeginTrackDefinition command. If
the track is accepted, the current track in the configuration is replaced with
this new track. If the track is not accepted, the current track in the config
remains unchanged.


***************************************************************************************************************************

Result EndTrackDefinitionResult(count)

EndTrackDefinition Result with created track informations.

Name  Type Description
----- ---- ----------------------------------------------------------------------------------------------------
Count int  Number of nodes in the track. The client can compare this value with the number of positions pushed.

***************************************************************************************************************************

Command BeginRouteDefinition()
Permission: EXECUTE_IF_IDLE

Begins a new route definition. Actual route remains unchanged until
EndRouteDefinition command is sent and successful. After this command, the
client must push time and position pairs to form a complete route. Once all the
positions are sent, the client must send the command EndRouteDefinition.


***************************************************************************************************************************

Command PushRouteEcef(speed, x, y, z)
Permission: EXECUTE_IF_IDLE

Push a route ecef node with speed. Must be called after BeginRouteDefinition and before EndRouteDefinition.

Name  Type   Description
----- ------ --------------------------------------
Speed double Node speed in meters per second
X     double X distance from earth-center in meters
Y     double Y distance from earth-center in meters
Z     double Z distance from earth-center in meters

***************************************************************************************************************************

Command EndRouteDefinition()
Permission: EXECUTE_IF_IDLE

This command completes the route started with BeginRouteDefinition command. If
the route is accepted, the current route in the configuration is replaced with
this new route. If the route is not accepted, the current route in the config
remains unchanged.


***************************************************************************************************************************

Result EndRouteDefinitionResult(count)

EndRouteDefinition Result with created route informations.

Name  Type Description
----- ---- ----------------------------------------------------------------------------------------------------
Count int  Number of nodes in the route. The client can compare this value with the number of positions pushed.

***************************************************************************************************************************

Command SetVehicleTrajectoryFix(type, lat, lon, alt, yaw, pitch, roll)
Permission: EXECUTE_IF_IDLE

Set vehicle static position and orientation

Name  Type   Description
----- ------ -----------------------
Type  string Trajectory type ("Fix")
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)

***************************************************************************************************************************

Command GetVehicleTrajectoryFix()
Permission: EXECUTE_IF_IDLE

Get vehicle static position and orientation


***************************************************************************************************************************

Result GetVehicleTrajectoryFixResult(type, lat, lon, alt, yaw, pitch, roll)

Result of GetVehicleTrajectoryFix.

Name  Type   Description
----- ------ -----------------------
Type  string Trajectory type ("Fix")
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)

***************************************************************************************************************************

Command SetVehicleTrajectoryFixEcef(type, x, y, z, yaw, pitch, roll)
Permission: EXECUTE_IF_IDLE

Set vehicle static position and orientation

Name  Type   Description
----- ------ -----------------------
Type  string Trajectory type ("Fix")
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)

***************************************************************************************************************************

Command GetVehicleTrajectoryFixEcef()
Permission: EXECUTE_IF_IDLE

Get vehicle static position and orientation


***************************************************************************************************************************

Result GetVehicleTrajectoryFixEcefResult(type, x, y, z, yaw, pitch, roll)

Result of GetVehicleTrajectoryFixEcef.

Name  Type   Description
----- ------ -----------------------
Type  string Trajectory type ("Fix")
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)

***************************************************************************************************************************

Command SetVehicleTrajectoryCircular(type, lat, lon, alt, radius, speed, clockwise, originAngle)
Permission: EXECUTE_IF_IDLE

Set vehicle circular trajectory

Name        Type            Description
----------- --------------- --------------------------------
Type        string          Trajectory type ("Circular")
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command GetVehicleTrajectoryCircular()
Permission: EXECUTE_IF_IDLE

Get vehicle circular trajectory


***************************************************************************************************************************

Result GetVehicleTrajectoryCircularResult(type, lat, lon, alt, radius, speed, clockwise, originAngle)

Result of GetVehicleTrajectoryCircular.

Name        Type            Description
----------- --------------- --------------------------------
Type        string          Trajectory type ("Circular")
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command SetVehicleTrajectoryOrbit(type, reference, semiMajorAxis, inclination, rightAscension, eccentricity, meanAnomaly, argumentOfPerigee)
Permission: EXECUTE_IF_IDLE

Set earth-orbiting spacecraft trajectory.

Name              Type     Description
----------------- -------- ---------------------------------------------------------------------
Type              string   Trajectory type ("Orbit")
Reference         datetime Orbital parameters reference time (UTC)
SemiMajorAxis     double   Semi-major axis (meter)
Inclination       double   Inclination angle (rad)
RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
Eccentricity      double   Eccentricity
MeanAnomaly       double   Mean anomaly (rad)
ArgumentOfPerigee double   Argument of perigee (rad)

***************************************************************************************************************************

Command GetVehicleTrajectoryOrbit()
Permission: EXECUTE_IF_IDLE

Get earth-orbiting spacecraft trajectory.


***************************************************************************************************************************

Result GetVehicleTrajectoryOrbitResult(type, reference, semiMajorAxis, inclination, rightAscension, eccentricity, meanAnomaly, argumentOfPerigee)

Result of GetVehicleTrajectoryOrbit.

Name              Type     Description
----------------- -------- ---------------------------------------------------------------------
Type              string   Trajectory type ("Orbit")
Reference         datetime Orbital parameters reference time (UTC)
SemiMajorAxis     double   Semi-major axis (meter)
Inclination       double   Inclination angle (rad)
RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
Eccentricity      double   Eccentricity
MeanAnomaly       double   Mean anomaly (rad)
ArgumentOfPerigee double   Argument of perigee (rad)

***************************************************************************************************************************

Command GetHilPort()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get Hardware in the loop trajectory server port.


***************************************************************************************************************************

Result HilPortResult(port)

Result of GetHilPort.

Name Type Description
---- ---- ---------------
Port int  Hil Server Port

***************************************************************************************************************************

Command ResetHilWarning()
Permission: EXECUTE_IF_SIMULATING

Reset Hardware in the loop trajectory server warning message.


***************************************************************************************************************************

Command GetLastHilWarning()
Permission: EXECUTE_IF_SIMULATING

Get last Hardware in the loop trajectory server warning message. Returns HilWarningResult.


***************************************************************************************************************************

Result HilWarningResult(isExtrapolated, extrapolationTime)

Result of GetLastHilWarning.

Name              Type Description
----------------- ---- -----------------------------------------------------------------------------------------------------------------------------------
IsExtrapolated    bool Indicate if there is receiver position has been extrapolated because of the HIL client that did not send receiver position in time.
ExtrapolationTime int  Time of last extrapolated position

***************************************************************************************************************************

Command SetEphemerisReferenceTimeForSV(system, svId, time, dataSetName)
Permission: EXECUTE_IF_IDLE

Set the ephemeris reference time for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetEphemerisReferenceTime(system, svId, time, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetEphemerisReferenceTime is deprecated since 21.3. You may use SetEphemerisReferenceTimeForSV.

Set the ephemeris reference time for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetEphemerisReferenceTimeForSV(system, svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get the ephemeris reference time for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetEphemerisReferenceTime(system, svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetEphemerisReferenceTime is deprecated since 21.3. You may use GetEphemerisReferenceTimeForSV.

Get the ephemeris reference time for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetEphemerisReferenceTimeForSVResult(system, svId, time, dataSetName)

Result of GetEphemerisReferenceTimeForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphDoubleParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various parameters in the GPS ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec
  "IscL1Ca"         sec
  "IscL2C"          sec
  "IscL5I5"         sec
  "IscL5Q5"         sec
  "IscL1CP"         sec
  "IscL1CD"         sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphDoubleParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various parameters in the GPS ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec
  "IscL1Ca"         sec
  "IscL2C"          sec
  "IscL5I5"         sec
  "IscL5Q5"         sec
  "IscL1CP"         sec
  "IscL1CD"         sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsEphDoubleParamForSVResult(svId, paramName, val, dataSetName)

Result of GetGpsEphDoubleParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoEphDoubleParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various parameters in the Galileo ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec
  "BgdE1E5a"        ns
  "BgdE1E5b"        ns

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGalileoEphDoubleParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various parameters in the Galileo ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec
  "BgdE1E5a"        ns
  "BgdE1E5b"        ns

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGalileoEphDoubleParamForSVResult(svId, paramName, val, dataSetName)

Result of GetGalileoEphDoubleParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphDoubleParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various parameters in the BeiDou ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd1"            sec
  "Tgd2"            sec
  "TgdB1Cp"         sec
  "TgdB2Ap"         sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphDoubleParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various parameters in the BeiDou ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd1"            sec
  "Tgd2"            sec
  "TgdB1Cp"         sec
  "TgdB2Ap"         sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouEphDoubleParamForSVResult(svId, paramName, val, dataSetName)

Result of GetBeiDouEphDoubleParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGlonassEphDoubleParamForSV(svId, paramName, val)
Permission: EXECUTE_IF_IDLE

Set various parameters for GLONASS

  ParamName       Unit               Range          Description
  "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
  "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
  "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
  "TLambda"       sec                0..44100       Time of the first ascending node passage
  "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
  "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
  "Omega"         semicircle         +/- 1          Argument of perigee
  "Eccentricity"  -                  0..0.03        Eccentricity
  "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
  "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period

Name      Type   Description
--------- ------ --------------------------------------------------------------------
SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
ParamName string Parameter name (see table above for accepted names)
Val       double Parameter value (see table above for unit)

***************************************************************************************************************************

Command GetGlonassEphDoubleParamForSV(svId, paramName)
Permission: EXECUTE_IF_IDLE

Get various parameters for GLONASS

  ParamName       Unit               Range          Description
  "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
  "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
  "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
  "TLambda"       sec                0..44100       Time of the first ascending node passage
  "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
  "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
  "Omega"         semicircle         +/- 1          Argument of perigee
  "Eccentricity"  -                  0..0.03        Eccentricity
  "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
  "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period

Name      Type   Description
--------- ------ --------------------------------------------------------------------
SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
ParamName string Parameter name (see table above for accepted names)

***************************************************************************************************************************

Result GetGlonassEphDoubleParamForSVResult(svId, paramName, val)

Result of GetGlonassEphDoubleParamForSV.

Name      Type   Description
--------- ------ --------------------------------------------------------------------
SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
ParamName string Parameter name (see table above for accepted names)
Val       double Parameter value (see table above for unit)

***************************************************************************************************************************

Command SetQzssEphDoubleParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various parameters in the QZSS ephemeris.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
ParamName   string          In meters:  "Crs", "Crc"
                            In radians: "Cis", "Cic", "Cus", "Cuc"
                            In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
Val         double          Parameter value (see ParamName above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphemerisDoubleParam(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetQzssEphemerisDoubleParam is deprecated since 21.3. You may use SetQzssEphDoubleParamForSV.

Set various parameters in the QZSS ephemeris.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
ParamName   string          In meters:  "Crs", "Crc"
                            In radians: "Cis", "Cic", "Cus", "Cuc"
                            In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
Val         double          Parameter value (see ParamName above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphDoubleParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various parameters in the QZSS ephemeris.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
ParamName   string          In meters:  "Crs", "Crc"
                            In radians: "Cis", "Cic", "Cus", "Cuc"
                            In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphemerisDoubleParam(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssEphemerisDoubleParam is deprecated since 21.3. You may use GetQzssEphDoubleParamForSV.

Get various parameters in the QZSS ephemeris.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
ParamName   string          In meters:  "Crs", "Crc"
                            In radians: "Cis", "Cic", "Cus", "Cuc"
                            In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssEphDoubleParamForSVResult(svId, paramName, val, dataSetName)

Result of GetQzssEphDoubleParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
ParamName   string          In meters:  "Crs", "Crc"
                            In radians: "Cis", "Cic", "Cus", "Cuc"
                            In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
Val         double          Parameter value (see ParamName above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICEphDoubleParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various parameters in the NavIC ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICEphemerisDoubleParam(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetNavICEphemerisDoubleParam is deprecated since 21.3. You may use SetNavICEphDoubleParamForSV.

Set various parameters in the NavIC ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICEphDoubleParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various parameters in the NavIC ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICEphemerisDoubleParam(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetNavICEphemerisDoubleParam is deprecated since 21.3. You may use GetNavICEphDoubleParamForSV.

Get various parameters in the NavIC ephemeris

  ParamName         Unit
  "ClockBias"       sec
  "ClockDrift"      sec/sec
  "ClockDriftRate"  sec/sec^2
  "Crs"             meter
  "Crc"             meter
  "Cis"             rad
  "Cic"             rad
  "Cus"             rad
  "Cuc"             rad
  "DeltaN"          rad/sec
  "M0"              rad
  "Eccentricity"    -
  "SqrtA"           sqrt(meter)
  "BigOmega"        rad
  "I0"              rad
  "LittleOmega"     rad
  "BigOmegaDot"     rad/sec
  "Idot"            rad/sec
  "Accuracy"        meter
  "Adot"            meters/sec
  "DeltaN0dot"      rad/sec^2
  "Tgd"             sec

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetNavICEphDoubleParamForSVResult(svId, paramName, val, dataSetName)

Result of GetNavICEphDoubleParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         double          Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphDoubleParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set GPS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphemerisDoubleParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetGpsEphemerisDoubleParams is deprecated since 21.3. You may use SetGpsEphDoubleParamForEachSV.

Set GPS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphDoubleParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphemerisDoubleParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetGpsEphemerisDoubleParams is deprecated since 21.3. You may use GetGpsEphDoubleParamForEachSV.

Get GPS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsEphDoubleParamForEachSVResult(paramName, val, dataSetName)

Result of GetGpsEphDoubleParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoEphDoubleParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set Galileo ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoEphemerisDoubleParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use SetGalileoEphDoubleParamForEachSV.

Set Galileo ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGalileoEphDoubleParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get Galileo ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGalileoEphemerisDoubleParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use GetGalileoEphDoubleParamForEachSV.

Get Galileo ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGalileoEphDoubleParamForEachSVResult(paramName, val, dataSetName)

Result of GetGalileoEphDoubleParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphDoubleParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set BeiDou ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphemerisDoubleParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use SetBeiDouEphDoubleParamForEachSV.

Set BeiDou ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphDoubleParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphemerisDoubleParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use GetBeiDouEphDoubleParamForEachSV.

Get BeiDou ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouEphDoubleParamForEachSVResult(paramName, val, dataSetName)

Result of GetBeiDouEphDoubleParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGlonassEphDoubleParamForEachSV(paramName, val)
Permission: EXECUTE_IF_IDLE

Set GLONASS parameter value for all satellites

Name      Type         Description
--------- ------------ --------------------------------------------------------------------------------------------------
ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command SetGlonassDoubleParams(paramName, val)
Permission: EXECUTE_IF_IDLE

Please note the command SetGlonassDoubleParams is deprecated since 21.3. You may use SetGlonassEphDoubleParamForEachSV.

Set GLONASS parameter value for all satellites

Name      Type         Description
--------- ------------ --------------------------------------------------------------------------------------------------
ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command GetGlonassEphDoubleParamForEachSV(paramName)
Permission: EXECUTE_IF_IDLE

Get GLONASS parameter value for all satellites

Name      Type   Description
--------- ------ ---------------------------------------------------------
ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names

***************************************************************************************************************************

Command GetGlonassDoubleParams(paramName)
Permission: EXECUTE_IF_IDLE

Please note the command GetGlonassDoubleParams is deprecated since 21.3. You may use GetGlonassEphDoubleParamForEachSV.

Get GLONASS parameter value for all satellites

Name      Type   Description
--------- ------ ---------------------------------------------------------
ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names

***************************************************************************************************************************

Result GetGlonassEphDoubleParamForEachSVResult(paramName, val)

Result of GetGlonassEphDoubleParamForEachSV.

Name      Type         Description
--------- ------------ --------------------------------------------------------------------------------------------------
ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command GetGlonassFrequencyNumberForEachSV()
Permission: EXECUTE_IF_IDLE

Get GLONASS frequency number for all satellites. Return values range from -7 to 13. Value -8 is an invalid value, it indicates that the almanac for the satellite is invalid.


***************************************************************************************************************************

Result GetGlonassFrequencyNumberForEachSVResult(frequencyNumber)

Result of GetGlonassFrequencyNumberForEachSV

Name            Type      Description
--------------- --------- --------------------------------------------------------------------------------------------------
FrequencyNumber array int Frequency number of each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

***************************************************************************************************************************

Command SetQzssEphDoubleParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set QZSS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphemerisDoubleParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetQzssEphemerisDoubleParams is deprecated since 21.3. You may use SetQzssEphDoubleParamForEachSV.

Set QZSS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphDoubleParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphemerisDoubleParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssEphemerisDoubleParams is deprecated since 21.3. You may use GetQzssEphDoubleParamForEachSV.

Get QZSS ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssEphDoubleParamForEachSVResult(paramName, val, dataSetName)

Result of GetQzssEphDoubleParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICEphDoubleParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set NavIC ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICEphemerisDoubleParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetNavICEphemerisDoubleParams is deprecated since 21.3. You may use SetNavICEphDoubleParamForEachSV.

Set NavIC ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICEphDoubleParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get NavIC ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetNavICEphemerisDoubleParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetNavICEphemerisDoubleParams is deprecated since 21.3. You may use GetNavICEphDoubleParamForEachSV.

Get NavIC ephemeris parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetNavICEphDoubleParamForEachSVResult(paramName, val, dataSetName)

Result of GetNavICEphDoubleParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphBoolParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various boolean parameters in the GPS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphBoolParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various boolean parameters in the GPS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsEphBoolParamForSVResult(svId, paramName, val, dataSetName)

Result of GetGpsEphBoolParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphBoolParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set GPS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGpsEphemerisBoolParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetGpsEphemerisBoolParams is deprecated since 21.3. You may use SetGpsEphBoolParamForEachSV.

Set GPS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphBoolParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get GPS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetGpsEphemerisBoolParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetGpsEphemerisBoolParams is deprecated since 21.3. You may use GetGpsEphBoolParamForEachSV.

Get GPS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetGpsEphBoolParamForEachSVResult(paramName, val, dataSetName)

Result of GetGpsEphBoolParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphBoolParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various boolean parameters in the BeiDou ephemeris

  ParamName
"IscB1CdAvailable"
"IscB2adAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphBoolParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various boolean parameters in the BeiDou ephemeris

  ParamName
"IscB1CdAvailable"
"IscB2adAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouEphBoolParamForSVResult(svId, paramName, val, dataSetName)

Result of GetBeiDouEphBoolParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphBoolParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set BeiDou ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouEphemerisBoolParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use SetBeiDouEphBoolParamForEachSV.

Set BeiDou ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphBoolParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get BeiDou ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetBeiDouEphemerisBoolParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use GetBeiDouEphBoolParamForEachSV.

Get BeiDou ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetBeiDouEphBoolParamForEachSVResult(paramName, val, dataSetName)

Result of GetBeiDouEphBoolParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphBoolParamForSV(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set various boolean parameters in the QZSS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphemerisBoolParam(svId, paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetQzssEphemerisBoolParam is deprecated since 21.3. You may use SetQzssEphBoolParamForSV.

Set various boolean parameters in the QZSS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphBoolParamForSV(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get various boolean parameters in the QZSS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphemerisBoolParam(svId, paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssEphemerisBoolParam is deprecated since 21.3. You may use GetQzssEphBoolParamForSV.

Get various boolean parameters in the QZSS ephemeris

  ParamName
"IscL1CaAvailable"
"IscL2CAvailable"
"IscL5I5Available"
"IscL5Q5Available"
"IscL1CPAvailable"
"IscL1CDAvailable"

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssEphBoolParamForSVResult(svId, paramName, val, dataSetName)

Result of GetQzssEphBoolParamForSV.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
ParamName   string          Parameter name (see table above for accepted names)
Val         bool            Parameter value (see table above for unit)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphBoolParamForEachSV(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Set QZSS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssEphemerisBoolParams(paramName, val, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command SetQzssEphemerisBoolParams is deprecated since 21.3. You may use SetQzssEphBoolParamForEachSV.

Set QZSS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphBoolParamForEachSV(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Get QZSS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetQzssEphemerisBoolParams(paramName, dataSetName)
Permission: EXECUTE_IF_IDLE

Please note the command GetQzssEphemerisBoolParams is deprecated since 21.3. You may use GetQzssEphBoolParamForEachSV.

Get QZSS ephemeris boolean parameter value for all satellites

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetQzssEphBoolParamForEachSVResult(paramName, val, dataSetName)

Result of GetQzssEphBoolParamForEachSV.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------
ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetSbasEphParamsForSV(svId, paramValueDict)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)

Name           Type               Description
-------------- ------------------ --------------------------------------------------------------------------
SvId           int                The satellite's SV ID
ParamValueDict dict string:double A dictionary of param value pairs.
                                  Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
                                                     "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
                                                     "AccelerationY", "AccelerationZ", "Health", "URA" and
                                                     "UraIndex"

***************************************************************************************************************************

Command GetSbasEphParamsForSV(svId, paramArray)
Permission: EXECUTE_IF_IDLE

Get parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)

Name       Type         Description
---------- ------------ ----------------------------------------------------------------------------
SvId       int          The satellite's SV ID
ParamArray array string An array of params.
                        Accepted values are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
                                             "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
                                             "AccelerationY", "AccelerationZ", "Health", "URA" and
                                             "UraIndex"

***************************************************************************************************************************

Result GetSbasEphParamsForSVResult(svId, paramValueDict)

Result of GetSbasEphParamsForSV.

Name           Type               Description
-------------- ------------------ --------------------------------------------------------------------------
SvId           int                The satellite's SV ID
ParamValueDict dict string:double A dictionary of param value pairs.
                                  Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
                                                     "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
                                                     "AccelerationY", "AccelerationZ", "Health", "URA" and
                                                     "UraIndex"

***************************************************************************************************************************

Command SetSbasRangingHealthForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Apply ranging flag for a SBAS satellite

Name   Type Description
------ ---- --------------------------
SvId   int  The satellite's SV ID
Health bool The ranging unhealthy flag

***************************************************************************************************************************

Command SetSbasCorrectionsHealthForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Apply correction flag for a SBAS satellite

Name   Type Description
------ ---- -----------------------------
SvId   int  The satellite's SV ID
Health bool The correction unhealthy flag

***************************************************************************************************************************

Command SetSbasIntegrityHealthForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Apply integrity flag for a SBAS satellite

Name   Type Description
------ ---- ----------------------------
SvId   int  The satellite's SV ID
Health bool The integrity unhealthy flag

***************************************************************************************************************************

Command SetSbasReservedHealthForSV(svId, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Apply reserved flag for a SBAS satellite

Name   Type Description
------ ---- ---------------------------
SvId   int  The satellite's SV ID
Health bool The reserved unhealthy flag

***************************************************************************************************************************

Command SetSbasServiceHealthForSV(svId, health)
Permission: EXECUTE_IF_IDLE

Apply service provider for a satellite

Name   Type Description
------ ---- ---------------------
SvId   int  The satellite's SV ID
Health int  The service provider

***************************************************************************************************************************

Command ResetPerturbations(system, svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) to zero for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID. Use 0 to apply new value to all satellites in the constellation.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetPerturbations(system, svId, crs, crc, cis, cic, cus, cuc, dataSetName)
Permission: EXECUTE_IF_IDLE

Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
Crs         double          Crs (meter)
Crc         double          Crc (meter)
Cis         double          Cis (rad)
Cic         double          Cic (rad)
Cus         double          Cus (rad)
Cuc         double          Cuc (rad)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetPerturbations(system, svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetPerturbationsResult(system, svId, crs, crc, cis, cic, cus, cuc, dataSetName)

Result of GetPerturbations.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite's SV ID.
Crs         double          Crs (meter)
Crc         double          Crc (meter)
Cis         double          Cis (rad)
Cic         double          Cic (rad)
Cus         double          Cus (rad)
Cuc         double          Cuc (rad)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetPerturbationsForAllSat(system, crs, crc, cis, cic, cus, cuc, dataSetName)
Permission: EXECUTE_IF_IDLE

Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
Crs         array double    Crs (meter)
Crc         array double    Crc (meter)
Cis         array double    Cis (rad)
Cic         array double    Cic (rad)
Cus         array double    Cus (rad)
Cuc         array double    Cuc (rad)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command GetPerturbationsForAllSat(system, dataSetName)
Permission: EXECUTE_IF_IDLE

Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result GetPerturbationsForAllSatResult(system, crs, crc, cis, cic, cus, cuc, dataSetName)

Result of GetPerturbationsForAllSat.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
Crs         array double    Crs (meter)
Crc         array double    Crc (meter)
Cis         array double    Cis (rad)
Cic         array double    Cic (rad)
Cus         array double    Cus (rad)
Cuc         array double    Cuc (rad)
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetMessageModificationToGpsCNav(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change GPS CNAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ---------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGpsCNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the GPS CNAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGpsCNavResult(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToGpsCNav.

Name             Type         Description
---------------- ------------ ---------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGpsMNav(signalArray, svId, startTime, stopTime, messageType, occurrence, condition, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change GPS MNAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          MNAV Message type
Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier automatically set by simulator

***************************************************************************************************************************

Command GetMessageModificationToGpsMNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the GPS MNAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------------------------
Id   string Unique identifier automatically set by simulator

***************************************************************************************************************************

Result GetMessageModificationToGpsMNavResult(signalArray, svId, startTime, stopTime, messageType, occurrence, condition, bitModifications, id)

Result of GetMessageModificationToGpsMNav.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          MNAV Message type
Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier automatically set by simulator

***************************************************************************************************************************

Command SetMessageModificationToGpsCNav2(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change GPS CNAV-2 message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV-2 page (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGpsCNav2(id)
Permission: EXECUTE_IF_IDLE

Get infos about the GPS CNAV-2 message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGpsCNav2Result(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToGpsCNav2.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV-2 page (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGpsLNav(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change GPS LNAV message bits.

Note that start and stop time are automatically extended to beginning and ending of overlapped
subframes. The Modification parameter is a string where the first character applies to the first
bit of subframe word and last character applies to last bit of subframe word.
   '0' will force bit to zero
   '1' will for bit to one
   'X' will negate bit value
   any other byte value will have no effect

Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
                      and negate bit 24

Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.

The ID parameter is automatically updated with a unique ID by the simulator for future reference.
If the ID is set with a value other than an empty string, the simulator will try to find a match
with previously added events. If there is a match, the event is updated with this message
instead of adding a new event. If there is no match, the event is added and the ID is not
changed.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..25 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGpsLNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the GPS LNAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGpsLNavResult(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)

Result of GetMessageModificationToGpsLNav.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..25 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGalileoCNav(signalArray, svId, startTime, stopTime, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change Galileo C/NAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ -------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGalileoCNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the Galileo C/NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGalileoCNavResult(signalArray, svId, startTime, stopTime, updateCRC, bitModifications, id)

Result of GetMessageModificationToGalileoCNav.

Name             Type         Description
---------------- ------------ -------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGalileoFNav(signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change Galileo F/NAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
Page             int          Page 1..5 (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGalileoFNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the Galileo F/NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGalileoFNavResult(signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToGalileoFNav.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
Page             int          Page 1..5 (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGalileoINav(signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change Galileo I/NAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ---------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
Page             int          Page 1..15 (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGalileoINav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the Galileo I/NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGalileoINavResult(signalArray, svId, startTime, stopTime, subframe, page, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToGalileoINav.

Name             Type         Description
---------------- ------------ ---------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
Page             int          Page 1..15 (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToGlonassNav(signalArray, svId, startTime, stopTime, frame, stringNumber, updateHammingCode, stringModification, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change GLONASS NAV message bits.

Note that start and stop time are automatically extended to beginning and ending of overlapped
message strings. The Modification parameter is a string where the first character applies to bit
85 of frame string and last character applies to Hamming Code bit 1.
   '0' will force bit to zero
   '1' will for bit to one
   'X' will negate bit value
   ' ' white space are ignored (use them to separate the string into bytes to help reading)
   '-' or any other byte value will have no effect

Example:

"-0--- 1------- -------- -------- -------- -------- -------- -------- -------- -------- ---1--X-"
  |  |                                           |  |
  |  +- Force bit 80 to '1'               Force Hamming code bit 5 to '1' -+  |
  |                                               |
  +------ Force bit 84 to 0                   Negate Hamming code bit 2 ----+

Note: if UpdateHammingCode is true, any modification to bits 1..8 will have no effect.

The ID parameter is automatically updated with a unique ID by the simulator for future reference.
If the ID is set with a value other than an empty string, the simulator will try to find a match
with previously added events. If there is a match, the event is updated with this message
instead of adding a new event. If there is no match, the event is added and the ID is not
changed.

Name               Type         Description
------------------ ------------ --------------------------------------------------------------------------------------------
SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
StartTime          int          Elapsed time in seconds since start of simulation
StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
UpdateHammingCode  bool         Recalculate Hamming Code after making modification
StringModification string       Modification string must be 85 bits long (or more if using white spaces)
Id                 string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToGlonassNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the GLONASS NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToGlonassNavResult(signalArray, svId, startTime, stopTime, frame, stringNumber, updateHammingCode, stringModification, id)

Result of GetMessageModificationToGlonassNav.

Name               Type         Description
------------------ ------------ --------------------------------------------------------------------------------------------
SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
StartTime          int          Elapsed time in seconds since start of simulation
StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
UpdateHammingCode  bool         Recalculate Hamming Code after making modification
StringModification string       Modification string must be 85 bits long (or more if using white spaces)
Id                 string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToBeiDouD1Nav(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change BeiDou D1 NAV navigation message bits.

Note that start and stop time are automatically extended to beginning and ending of overlapped
subframes. The Modification parameter is a string where the first character applies to the first
bit of subframe word and last character applies to last bit of subframe word.
   '0' will force bit to zero
   '1' will for bit to one
   'X' will negate bit value
   any other byte value will have no effect

Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
                      and negate bit 24

Note: if UpdateParity is true, any modification to parity bits will have no effect.

The ID parameter is automatically updated with a unique ID by the simulator for future reference.
If the ID is set with a value other than an empty string, the simulator will try to find a match
with previously added events. If there is a match, the event is updated with this message
instead of adding a new event. If there is no match, the event is added and the ID is not
changed.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..24 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToBeiDouD1Nav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the BeiDou D1 NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToBeiDouD1NavResult(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)

Result of GetMessageModificationToBeiDouD1Nav.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..24 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToBeiDouD2Nav(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change BeiDou D2 NAV message bits.

Note that start and stop time are automatically extended to beginning and ending of overlapped
subframes. The Modification parameter is a string where the first character applies to the first
bit of subframe word and last character applies to last bit of subframe word.
   '0' will force bit to zero
   '1' will for bit to one
   'X' will negate bit value
   any other byte value will have no effect

Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
                      and negate bit 24

Note: if UpdateParity is true, any modification to parity bits will have no effect.

The ID parameter is automatically updated with a unique ID by the simulator for future reference.
If the ID is set with a value other than an empty string, the simulator will try to find a match
with previously added events. If there is a match, the event is updated with this message
instead of adding a new event. If there is no match, the event is added and the ID is not
changed.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..120 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToBeiDouD2Nav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the BeiDou D2 NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToBeiDouD2NavResult(signalArray, svId, startTime, stopTime, subframe, page, word, updateParity, wordModification, id)

Result of GetMessageModificationToBeiDouD2Nav.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
Page             int          Page 1..120 (use 0 to apply modification to all pages)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToBeiDouCNav1(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change BeiDou CNAV1 message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV1 page (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToBeiDouCNav1(id)
Permission: EXECUTE_IF_IDLE

Get infos about the BeiDou CNAV1 message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToBeiDouCNav1Result(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToBeiDouCNav1.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV1 page (use 0 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToBeiDouCNav2(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change BeiDou CNAV2 message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToBeiDouCNav2(id)
Permission: EXECUTE_IF_IDLE

Get infos about the BeiDou CNAV2 message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToBeiDouCNav2Result(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToBeiDouCNav2.

Name             Type         Description
---------------- ------------ ------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToQzssLNav(signalArray, svId, startTime, stopTime, subframe, lNavSvId, word, updateParity, wordModification, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change QZSS LNAV message bits.

Note that start and stop time are automatically extended to beginning and ending of overlapped
subframes. The Modification parameter is a string where the first character applies to the first
bit of subframe word and last character applies to last bit of subframe word.
   '0' will force bit to zero
   '1' will for bit to one
   'X' will negate bit value
   any other byte value will have no effect

Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
                      and negate bit 24

Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.

The ID parameter is automatically updated with a unique ID by the simulator for future reference.
If the ID is set with a value other than an empty string, the simulator will try to find a match
with previously added events. If there is a match, the event is updated with this message
instead of adding a new event. If there is no match, the event is added and the ID is not
changed.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToQzssLNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the QZSS LNAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToQzssLNavResult(signalArray, svId, startTime, stopTime, subframe, lNavSvId, word, updateParity, wordModification, id)

Result of GetMessageModificationToQzssLNav.

Name             Type         Description
---------------- ------------ --------------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
Word             int          Word 1..10 (use 0 to apply modification to all words)
UpdateParity     bool         Recalculate parity after making modification
WordModification string       Modification string must be 30 bits long
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToQzssSlas(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change QZSS SLAS message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToQzssSlas(id)
Permission: EXECUTE_IF_IDLE

Get infos about the QZSS SLAS message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToQzssSlasResult(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToQzssSlas.

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToQzssCNav(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change QZSS CNAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ -----------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToQzssCNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the QZSS CNAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToQzssCNavResult(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToQzssCNav.

Name             Type         Description
---------------- ------------ -----------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToQzssCNav2(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change QZSS CNAV2 message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV2 page (use -1 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToQzssCNav2(id)
Permission: EXECUTE_IF_IDLE

Get infos about the QZSS CNAV2 message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToQzssCNav2Result(signalArray, svId, startTime, stopTime, page, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToQzssCNav2.

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Page             int          CNAV2 page (use -1 to apply modification to all pages)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToNavICNav(signalArray, svId, startTime, stopTime, subframe, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change NavIC NAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
MessageType      int          NAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToNavICNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the NavIC NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToNavICNavResult(signalArray, svId, startTime, stopTime, subframe, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToNavICNav.

Name             Type         Description
---------------- ------------ ----------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
MessageType      int          NAV Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command SetMessageModificationToSbasNav(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set (or Modify) event to change SBAS NAV message bits. If you send this command without setting the ID
parameter, or if you set the ID with a value never used before, a new Modification event will be
created. If you reuse the same event ID, it will modify the existing event.

Note that start and stop time are automatically extended to beginning and ending of overlapped
messages.

The Condition parameter is optional and allows you to add content matching condition before applying
bit modifications.

BitModifications can be an empty string. The Modification will have no effect until you modify it with at
least one bits mod.

A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
index (1 refers to the first transmitted bit) and Bits is a modification mask where each
character describes a modification to a single bit. The allowed characters are:
   0 : force bit to 0
   1 : force bit to 1
   - : leave bit unchanged
   X : revert bit (0 becomes 1 and 1 becomes 0)

For example: "24:X---10XX" will: revert bits 24, 30 and 31
                 set bit 28 to 1
                 set bit 29 to 0
The other bits are not affected.

You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"

Name             Type         Description
---------------- ------------ -----------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command GetMessageModificationToSbasNav(id)
Permission: EXECUTE_IF_IDLE

Get infos about the SBAS NAV message modification with this ID.

Name Type   Description
---- ------ ------------------------------
Id   string Unique identifier of the event

***************************************************************************************************************************

Result GetMessageModificationToSbasNavResult(signalArray, svId, startTime, stopTime, messageType, condition, updateCRC, bitModifications, id)

Result of GetMessageModificationToSbasNav.

Name             Type         Description
---------------- ------------ -----------------------------------------------------------------------------------------------------
SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
StartTime        int          Elapsed time in seconds since start of simulation
StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
MessageType      int          Message type (use -1 to apply modification to all message types)
Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
UpdateCRC        bool         Recalculate CRC after making modification
BitModifications string       Comma separated bit modifications
Id               string       Unique identifier of the event

***************************************************************************************************************************

Command RemoveMessageModificationForNavMsgFamily(navMsgFamily, id)
Permission: EXECUTE_IF_IDLE

Removes a message modification event for the navigation message family.

Name         Type   Description
------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
Id           string Unique identifier

***************************************************************************************************************************

Command ClearAllMessageModificationsForNavMsgFamily(navMsgFamily)
Permission: EXECUTE_IF_IDLE

Clear all message modification events for this navigation message family.

Name         Type   Description
------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"

***************************************************************************************************************************

Command GetAllMessageModificationIdsForNavMsgFamily(navMsgFamily, svId)
Permission: EXECUTE_IF_IDLE

Get all the message modification event's IDs for this navigation message family and SV ID.

Name         Type   Description
------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
SvId         int    The satellite's SV ID

***************************************************************************************************************************

Result GetAllMessageModificationIdsForNavMsgFamilyResult(ids)

Result of GetAllMessageModificationIdsForNavMsgFamily.

Name Type         Description
---- ------------ -------------------------------------------------------------------------
Ids  array string List of event IDs which will modify the navigation message for this SV ID

***************************************************************************************************************************

Command RemoveMessageModificationForSignal(signal, id)
Permission: EXECUTE_IF_IDLE

Removes the signal for the message modification.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
Id     string Unique identifier

***************************************************************************************************************************

Command RemoveMessageModification(signal, id)
Permission: EXECUTE_IF_IDLE

Please note the command RemoveMessageModification is deprecated since 21.3. You may use RemoveMessageModificationForSignal.

Removes the signal for the message modification.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
Id     string Unique identifier

***************************************************************************************************************************

Command ClearAllMessageModificationsForSignal(signal)
Permission: EXECUTE_IF_IDLE

Clear the signal for all message modifications.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"

***************************************************************************************************************************

Command ClearAllMessageModifications(signal)
Permission: EXECUTE_IF_IDLE

Please note the command ClearAllMessageModifications is deprecated since 21.3. You may use ClearAllMessageModificationsForSignal.

Clear the signal for all message modifications.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"

***************************************************************************************************************************

Command GetAllMessageModificationIdsForSignal(signal, svId)
Permission: EXECUTE_IF_IDLE

Get all the message modification event's IDs for this signal and SV ID.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
SvId   int    The satellite's SV ID

***************************************************************************************************************************

Result GetAllMessageModificationIdsForSignalResult(ids)

Result of GetAllMessageModificationIdsForSignal.

Name Type         Description
---- ------------ -------------------------------------------------------------------------
Ids  array string List of event IDs which will modify the navigation message for this SV ID

***************************************************************************************************************************

Command SetInterferenceCW(startTime, stopTime, centralFreq, power, enabled, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Add or update continuous wave interference.

Name        Type   Description
----------- ------ -------------------------------------------------
StartTime   int    Elapsed time in seconds since start of simulation
StopTime    int    Elapsed time in seconds since start of simulation
CentralFreq double Central frequency (Hz)
Power       double Power (dB) relative to nominal power
Enabled     bool   Interference enable or not
Id          string Unique identifier automatically set by simulator

***************************************************************************************************************************

Command SetInterferenceChirp(startTime, stopTime, centralFreq, power, bandwidth, sweepTime, enabled, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Add or update chirp signal interference.

Name        Type   Description
----------- ------ -------------------------------------------------
StartTime   int    Elapsed time in seconds since start of simulation
StopTime    int    Elapsed time in seconds since start of simulation
CentralFreq double Central frequency (Hz)
Power       double Power (dB) relative to nominal power
Bandwidth   double Bandwidth (Hz)
SweepTime   double Sweep Time (us)
Enabled     bool   Interference enable or not
Id          string Unique identifier automatically set by simulator

***************************************************************************************************************************

Command RemoveInterference(id)
Permission: EXECUTE_IF_IDLE

Removes an interference. When adding an event, the simulator
sets the Id parameter. Use that Id here to remove the associated interference.

Name Type   Description
---- ------ ------------------------------------------------
Id   string Unique identifier of the interference to remove.

***************************************************************************************************************************

Command RemoveAllInterferences()
Permission: EXECUTE_IF_IDLE

Clear all interferences


***************************************************************************************************************************

Command SetPseudorangeRampForSV(system, svId, offset, startTime, holdStartTime, holdStopTime, stopTime, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set PSR ramp event. This function lets user change the pseudorange of any satellite.
If SV ID is set to 0, the change is applied to all satellites.

         Hold Start Time
         |     Hold Stop Time
         |     |
         ...........
       ..       ...
       ..        ...
  .......           .........> Time
      |           |
      Start Time      Stop Time

Name          Type   Description
------------- ------ ----------------------------------------------------------------------------------
System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId          int    The satellite SV ID.
Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
StartTime     int    Elapsed time in seconds since start of simulation.
HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
Id            string Unique identifier automatically set by simulator.

***************************************************************************************************************************

Command GetPseudorangeRampForSV(id)
Permission: EXECUTE_IF_IDLE

Get PSR ramp event. This function lets user change the pseudorange of any satellite.
If SV ID is set to 0, the change is applied to all satellites.

         Hold Start Time
         |     Hold Stop Time
         |     |
         ...........
       ..       ...
       ..        ...
  .......           .........> Time
      |           |
      Start Time      Stop Time

Name Type   Description
---- ------ -------------------------------------------------
Id   string Unique identifier automatically set by simulator.

***************************************************************************************************************************

Result GetPseudorangeRampForSVResult(system, svId, offset, startTime, holdStartTime, holdStopTime, stopTime, id)

Result of GetPseudorangeRampForSV.

Name          Type   Description
------------- ------ ----------------------------------------------------------------------------------
System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId          int    The satellite SV ID.
Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
StartTime     int    Elapsed time in seconds since start of simulation.
HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
Id            string Unique identifier automatically set by simulator.

***************************************************************************************************************************

Command GetAllPseudorangeRampForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get a list of all the pseudorange ramps IDs for a system's satellite.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID.

***************************************************************************************************************************

Result GetAllPseudorangeRampForSVResult(system, svId, ids)

Result of GetAllPseudorangeRampForSV.

Name   Type         Description
------ ------------ ------------------------------------------------------------------
System string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int          The satellite's SV ID.
Ids    array string List of all the pseudorange ramps IDs for this system's satellite.

***************************************************************************************************************************

Command RemovePseudorangeRamp(system, id)
Permission: EXECUTE_IF_IDLE

Removes a PSR ramp events. When adding an event, the simulator
sets the Id parameter. Use that Id here to remove the associated ramp.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Id     string Unique identifier of the PSR ramp to remove.

***************************************************************************************************************************

Command RemoveAllPseudorangeRampForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Remove all PSR Ramps for the specified system's satellite.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID.

***************************************************************************************************************************

Command RemoveAllPseudorangeRampForSystem(system)
Permission: EXECUTE_IF_IDLE

Remove all PSR Ramps for all satellites of the specified system.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command RemoveAllPseudorangeRamp(system)
Permission: EXECUTE_IF_IDLE

Please note the command RemoveAllPseudorangeRamp is deprecated since 21.3. You may use RemoveAllPseudorangeRampForSystem.

Remove all PSR Ramps for all satellites of the specified system.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command SetAlmanacInitialUploadTimeOffset(system, offset)
Permission: EXECUTE_IF_IDLE

Set next almanac upload time relative to simulation start time.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------
System string Must be "GPS"
Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]

***************************************************************************************************************************

Command GetAlmanacInitialUploadTimeOffset()
Permission: EXECUTE_IF_IDLE

Get next almanac upload time relative to simulation start time.


***************************************************************************************************************************

Result GetAlmanacInitialUploadTimeOffsetResult(system, offset)

Result of GetAlmanacInitialUploadTimeOffset.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------
System string Must be "GPS"
Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]

***************************************************************************************************************************

Command SetAlmanacUploadTimeInterval(system, interval)
Permission: EXECUTE_IF_IDLE

Set almanac upload interval in seconds. After the initial upload set with command 
SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.

Name     Type   Description
-------- ------ ----------------------------------------------------------
System   string Must be "GPS"
Interval int    Interval duration in sec. Accepted range is [3600..259200]

***************************************************************************************************************************

Command GetAlmanacUploadTimeInterval()
Permission: EXECUTE_IF_IDLE

Get almanac upload interval in seconds. After the initial upload set with command 
SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.


***************************************************************************************************************************

Result GetAlmanacUploadTimeIntervalResult(system, interval)

Result of GetAlmanacUploadTimeInterval.

Name     Type   Description
-------- ------ ----------------------------------------------------------
System   string Must be "GPS"
Interval int    Interval duration in sec. Accepted range is [3600..259200]

***************************************************************************************************************************

Command SetMultipathForSV(signal, svId, powerLoss, pseudorange, doppler, carrierPhase, echo, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Add or update signal echo (multipath). Offsets (power loss, pseudorange, Doppler and carrier phase) are all relative to line-of-sight signal.
If Id is not set, or unknown to Skydel, a new echo will be added. Otherwise, existing echo will be updated.

Name         Type   Description
------------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId         int    The satellite's SV ID
PowerLoss    double Power loss in dB (value must be positive)
Pseudorange  double Pseudorange offset in meters (value must be positive)
Doppler      double Doppler frequency offset in Hz
CarrierPhase double Carrier phase offset in radians
Echo         int    Echo number [1..4], or use zero to let Skydel assign an echo number.
Id           string Unique identifier.

***************************************************************************************************************************

Command EnableMultipath(enabled, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable/Disable a multipath signal.

Name    Type   Description
------- ------ ---------------------------------------------------------------
Enabled bool   Enable (true) or disable (false) multipath.
Id      string Unique identifier of the multipath signal to enable or disable.

***************************************************************************************************************************

Command RemoveMultipath(id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Removes a multipath signal.

Name Type   Description
---- ------ ----------------------------------------------------
Id   string Unique identifier of the multipath signal to remove.

***************************************************************************************************************************

Command RemoveAllMultipathForSignal(signal, reset)
Permission: EXECUTE_IF_IDLE

Disable all multipath in all satellites but only for the specified signal.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)

***************************************************************************************************************************

Command RemoveAllMultipathForSV(system, svId, reset)
Permission: EXECUTE_IF_IDLE

Disable all multipath for the specified satellite.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID
Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)

***************************************************************************************************************************

Command RemoveAllMultipathForSystem(system, reset)
Permission: EXECUTE_IF_IDLE

Disable all multipath for the specified constellation.

Name   Type   Description
------ ------ -------------------------------------------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)

***************************************************************************************************************************

Command GetMultipathForID(id)
Permission: EXECUTE_IF_IDLE

Get multipath infos for the specified multipath ID.

Name Type   Description
---- ------ --------------
Id   string A multipath ID

***************************************************************************************************************************

Result GetMultipathForIDResult(id, system, signal, svId, powerLoss, pseudorange, doppler, carrierPhase, echo)

Result of GetMultipathForID.

Name         Type   Description
------------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Id           string A multipath ID
System       string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
SvId         int    The satellite's SV ID
PowerLoss    double Power loss in dB (value must be positive)
Pseudorange  double Pseudorange offset in meters (value must be positive)
Doppler      double Doppler frequency offset in Hz
CarrierPhase double Carrier phase offset in radians
Echo         int    Echo number [1..3], or use zero to let Skydel assign an echo number.

***************************************************************************************************************************

Command GetAllMultipathForSystem(system)
Permission: EXECUTE_IF_IDLE

Get all multipath ID for the specified constellation.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command GetAllMultipathForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get all multipath ID for the specified satellite of the constellation.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID

***************************************************************************************************************************

Command GetAllMultipathForSignal(signal)
Permission: EXECUTE_IF_IDLE

Get all multipath ID for the specified signal.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"

***************************************************************************************************************************

Result GetAllMultipathForResult(ids)

Result of GetAllMultipathFor(Signal|SV|System) commands.

Name Type         Description
---- ------------ ------------------------------------------------------
Ids  array string IDs of multipaths for the specified argument in getter

***************************************************************************************************************************

Command EnableLosForSV(system, svId, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID
Enabled bool   Direct Line of Sight enabled or not

***************************************************************************************************************************

Command IsLosEnabledForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID

***************************************************************************************************************************

Result IsLosEnabledForSVResult(system, svId, enabled)

Result of IsLosEnabledForSV.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID
Enabled bool   Direct Line of Sight enabled or not

***************************************************************************************************************************

Command ClearAllLOSForSystem(system)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable Direct Line of Sight (LoS) of all satellites for the specified constellation.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command EnableLosForEachSV(system, enabled)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.

Name    Type       Description
------- ---------- -----------------------------------------------------------------------------------------------------------
System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).

***************************************************************************************************************************

Command IsLOSEnabledForEachSV(system)
Permission: EXECUTE_IF_IDLE

Get Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result IsLOSEnabledForEachSVResult(system, enabled)

Result of IsLOSEnabledForEachSV.

Name    Type       Description
------- ---------- -----------------------------------------------------------------------------------------------------------
System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).

***************************************************************************************************************************

Command AddPlugInInstance(name, type)
Permission: EXECUTE_IF_IDLE

Set Add a plug-in instance of specified type.

Name Type   Description
---- ------ -------------------------------------
Name string Unique name for the plug-in instance.
Type string Type of the plug-in instance.

***************************************************************************************************************************

Command GetPlugInInstance()
Permission: EXECUTE_IF_IDLE

Get Add a plug-in instance of specified type.


***************************************************************************************************************************

Result GetPlugInInstanceResult(name, type)

Result of GetPlugInInstance.

Name Type   Description
---- ------ -------------------------------------
Name string Unique name for the plug-in instance.
Type string Type of the plug-in instance.

***************************************************************************************************************************

Command RemovePlugInInstance(name)
Permission: EXECUTE_IF_IDLE

Removes the plug-in instance.

Name Type   Description
---- ------ -----------------------------
Name string Plug-in instance unique name.

***************************************************************************************************************************

Command SetDefaultIntTxPersistence(defaultValue)
Permission: EXECUTE_IF_IDLE

Set wether by default transmitters should keep the modification done during simulation.

Name         Type Description
------------ ---- --------------------------------------------------------------------------------
DefaultValue bool True if jammers should keep the modifications done during simulation by default.

***************************************************************************************************************************

Command GetDefaultIntTxPersistence()
Permission: EXECUTE_IF_IDLE

Get wether by default transmitters should keep the modification done during simulation.


***************************************************************************************************************************

Result GetDefaultIntTxPersistenceResult(defaultValue)

Result of GetDefaultIntTxPersistence.

Name         Type Description
------------ ---- --------------------------------------------------------------------------------
DefaultValue bool True if jammers should keep the modifications done during simulation by default.

***************************************************************************************************************************

Command GetAllIntTxID()
Permission: EXECUTE_IF_IDLE

Get the ID of all interferences transmitters.


***************************************************************************************************************************

Result GetAllIntTxIDResult(ids)

Result of GetAllIntTxID.

Name Type         Description
---- ------------ ------------------------------------------
Ids  array string ID list of all interferences transmitters.

***************************************************************************************************************************

Command AddIntTx(usualName, enabled, group, dynamic, power, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set an interference transmitter. For set : the transmitter Id parameter is not set (empty string),
Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
command will fail.

Name      Type   Description
--------- ------ ----------------------------------------------------------------------------------------
UsualName string Usual name for the transmitter.
Enabled   bool   Enable (true) or disable (false) the transmitter
Group     int    Interference group number [1..16]
Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
Power     double Set the transmitter reference power
Id        string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTx(id)
Permission: EXECUTE_IF_IDLE

Get an interference transmitter. For set : the transmitter Id parameter is not set (empty string),
Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
command will fail.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxResult(usualName, enabled, group, dynamic, power, id)

Result of GetIntTx.

Name      Type   Description
--------- ------ ----------------------------------------------------------------------------------------
UsualName string Usual name for the transmitter.
Enabled   bool   Enable (true) or disable (false) the transmitter
Group     int    Interference group number [1..16]
Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
Power     double Set the transmitter reference power
Id        string Transmitter unique identifier.

***************************************************************************************************************************

Command RenameIntTx(usualName, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Rename a transmitter.

Name      Type   Description
--------- ------ -------------------------------
UsualName string Usual name for the transmitter.
Id        string Transmitter unique identifier.

***************************************************************************************************************************

Command ChangeIntTxColor(color, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set a transmitter color in spectrums

Name  Type   Description
----- ------ -------------------------------------------------------------------------------
Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxColor(id)
Permission: EXECUTE_IF_IDLE

Get a transmitter color in spectrums

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxColorResult(color, id)

Result of GetIntTxColor.

Name  Type   Description
----- ------ -------------------------------------------------------------------------------
Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command EnableIntTx(enabled, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Enable/Disable the interference transmitter.

Name    Type   Description
------- ------ ------------------------------------------------
Enabled bool   Enable (true) or disable (false) the transmitter
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxGroup(group, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set the interference transmitter group (which links to a specific RF output target).

Name  Type   Description
----- ------ ---------------------------------
Group int    Interference group number [1..16]
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxRefPower(power, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set the interference transmitter reference power.

Name  Type   Description
----- ------ ------------------------------
Power double Reference Power (dBm)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxPersistence(persistence, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set wether the transmitter should keep the modifications done during the simulation.

Name        Type   Description
----------- ------ ------------------------------------------------------
Persistence bool   True to keep the modifications, false to discard them.
Id          string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxPersistence(id)
Permission: EXECUTE_IF_IDLE

Get wether the transmitter should keep the modifications done during the simulation.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxPersistenceResult(persistence, id)

Result of GetIntTxPersistence.

Name        Type   Description
----------- ------ ------------------------------------------------------
Persistence bool   True to keep the modifications, false to discard them.
Id          string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxSignalManualPropagationLoss(propagationLoss, transmitterId, signalId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set the manual propagation loss for the given interference signal. Value is used only if SetIntTxUseManualPropagationLoss has been set on the corresponding transmitter. This value is not preserved after simulation end.

Name            Type   Description
--------------- ------ --------------------------------------------------------------------------------------------------------
PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
TransmitterId   string Transmitter unique identifier.
SignalId        string Signal unique identifier.

***************************************************************************************************************************

Command SetIntTxUseManualPropagationLoss(manual, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a dynamic transmitter should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.

Name   Type   Description
------ ------ -------------------------------------------------------------
Manual bool   If true, propagation loss will be 1000 dB until set manually.
Id     string Interference transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxIgnorePropagationLoss(ignore, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a dynamic transmitter should ignore propagation loss or not.

Name   Type   Description
------ ------ ------------------------------------------
Ignore bool   If true, propagation loss will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxIgnoreRxAntennaPatterns(ignore, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).

Name   Type   Description
------ ------ -------------------------------------------------------------------------
Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxIgnoreVehicleAntennaPattern(ignore, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetIntTxIgnoreVehicleAntennaPattern is deprecated since 20.2. You may use SetIntTxIgnoreRxAntennaPatterns.

Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).

Name   Type   Description
------ ------ -------------------------------------------------------------------------
Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxHiddenOnMap(hiddenOnMap, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a transmitter should be hidden on the map.

Name        Type   Description
----------- ------ -----------------------------------------------
HiddenOnMap bool   If true, transmitter will be hidden on the map.
Id          string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxHiddenOnMap(id)
Permission: EXECUTE_IF_IDLE

Get whether a transmitter should be hidden on the map.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxHiddenOnMapResult(hiddenOnMap, id)

Result of GetIntTxHiddenOnMap.

Name        Type   Description
----------- ------ -----------------------------------------------
HiddenOnMap bool   If true, transmitter will be hidden on the map.
Id          string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxIgnoreRxAntennaGainPattern(ignore, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a dynamic transmitter should ignore the receiver's antenna gain pattern.

Name   Type   Description
------ ------ -------------------------------------------------------------
Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command IsIntTxIgnoreRxAntennaGainPattern(id)
Permission: EXECUTE_IF_IDLE

Get whether a dynamic transmitter ignore the receiver's antenna gain pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsIntTxIgnoreRxAntennaGainPatternResult(ignore, id)

Result of IsIntTxIgnoreRxAntennaGainPattern.

Name   Type   Description
------ ------ -------------------------------------------------------------
Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxIgnoreRxAntennaPhasePattern(ignore, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a dynamic transmitter should ignore the receiver's antenna phase pattern.

Name   Type   Description
------ ------ --------------------------------------------------------------
Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command IsIntTxIgnoreRxAntennaPhasePattern(id)
Permission: EXECUTE_IF_IDLE

Get whether a dynamic transmitter ignore the receiver's antenna phase pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsIntTxIgnoreRxAntennaPhasePatternResult(ignore, id)

Result of IsIntTxIgnoreRxAntennaPhasePattern.

Name   Type   Description
------ ------ --------------------------------------------------------------
Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxNone(id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set an undefined trajectory to a transmitter, thus preventing it to be modulated (default value).

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxFix(lat, lon, alt, yaw, pitch, roll, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set interference transmitter static position and orientation

Name  Type   Description
----- ------ ------------------------------
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxFix(id)
Permission: EXECUTE_IF_IDLE

Get interference transmitter static position and orientation

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxFixResult(lat, lon, alt, yaw, pitch, roll, id)

Result of GetIntTxFix.

Name  Type   Description
----- ------ ------------------------------
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxFixEcef(x, y, z, yaw, pitch, roll, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set interference transmitter static position and orientation

Name  Type   Description
----- ------ ------------------------------
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxFixEcef(id)
Permission: EXECUTE_IF_IDLE

Get interference transmitter static position and orientation

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxFixEcefResult(x, y, z, yaw, pitch, roll, id)

Result of GetIntTxFixEcef.

Name  Type   Description
----- ------ ------------------------------
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxCircular(lat, lon, alt, radius, speed, clockwise, id, originAngle)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set interference transmitter circular trajectory

Name        Type            Description
----------- --------------- --------------------------------
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
Id          string          Transmitter unique identifier.
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command GetIntTxCircular(id)
Permission: EXECUTE_IF_IDLE

Get interference transmitter circular trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxCircularResult(lat, lon, alt, radius, speed, clockwise, id, originAngle)

Result of GetIntTxCircular.

Name        Type            Description
----------- --------------- --------------------------------
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
Id          string          Transmitter unique identifier.
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command SetIntTxHil(id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set interference transmitter HIL trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command BeginIntTxTrackDefinition(id)
Permission: EXECUTE_IF_IDLE

Begins a new interference track definition. Actual track remains unchanged until
EndIntTxTrackDefinition command is sent and successful. After this command, the
client must push time and position pairs to form a complete track. Once all the
positions are sent, the client must send the command EndIntTxTrackDefinition.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command PushIntTxTrackEcef(time, x, y, z, id)
Permission: EXECUTE_IF_IDLE

Push an interference track ecef node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.

Name Type   Description
---- ------ --------------------------------------
Time int    Node Timestamp in miliseconds
X    double X distance from earth-center in meters
Y    double Y distance from earth-center in meters
Z    double Z distance from earth-center in meters
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command PushIntTxTrackEcefNed(time, x, y, z, yaw, pitch, roll, id)
Permission: EXECUTE_IF_IDLE

Push an interference track ecef and ned attitude node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.

Name  Type   Description
----- ------ --------------------------------------
Time  int    Node Timestamp in miliseconds
X     double X distance from earth-center in meters
Y     double Y distance from earth-center in meters
Z     double Z distance from earth-center in meters
Yaw   double Yaw in radians
Pitch double Pitch in radians
Roll  double Roll in radians
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command EndIntTxTrackDefinition(id)
Permission: EXECUTE_IF_IDLE

This command completes the track started with BeginIntTxTrackDefinition command. If
the track is accepted, the current track in the configuration is replaced with
this new track. If the track is not accepted, the current track in the config
remains unchanged.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result EndIntTxTrackDefinitionResult(count, id)

EndIntTxTrackDefinition Result with created track informations.

Name  Type   Description
----- ------ ----------------------------------------------------------------------------------------------------
Count int    Number of nodes in the track. The client can compare this value with the number of positions pushed.
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command ImportNmeaIntTxTrack(path, id)
Permission: EXECUTE_IF_IDLE

Import NMEA interference track file

Name Type   Description
---- ------ ------------------------------
Path string NMEA file path
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command EnableIntTxTrajectorySmoothing(enabled, id)
Permission: EXECUTE_IF_IDLE

Set trajectory smoothing for interference Track enabled or disabled

Name    Type   Description
------- ------ -------------------------------------------------------------------
Enabled bool   If true, interference trajectory will be smoothed during simulation
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command IsIntTxTrajectorySmoothingEnabled(id)
Permission: EXECUTE_IF_IDLE

Get trajectory smoothing for interference Track enabled or disabled

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsIntTxTrajectorySmoothingEnabledResult(enabled, id)

Result of IsIntTxTrajectorySmoothingEnabled.

Name    Type   Description
------- ------ -------------------------------------------------------------------
Enabled bool   If true, interference trajectory will be smoothed during simulation
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command ForceIntTxAttitudeToZero(enabled, id)
Permission: EXECUTE_IF_IDLE

Set force interference vehicle yaw, pitch and roll to zero enabled or disabled

Name    Type   Description
------- ------ ------------------------------------------------------------
Enabled bool   If true, interference vehicle won't rotate during simulation
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command IsIntTxAttitudeToZeroForced(id)
Permission: EXECUTE_IF_IDLE

Get force interference vehicle yaw, pitch and roll to zero enabled or disabled

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsIntTxAttitudeToZeroForcedResult(enabled, id)

Result of IsIntTxAttitudeToZeroForced.

Name    Type   Description
------- ------ ------------------------------------------------------------
Enabled bool   If true, interference vehicle won't rotate during simulation
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxVehicleType(type, id)
Permission: EXECUTE_IF_IDLE

Set Set interference vehicle type for Track Trajectory

Name Type   Description
---- ------ ----------------------------------------------------------
Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxVehicleType(id)
Permission: EXECUTE_IF_IDLE

Get Set interference vehicle type for Track Trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxVehicleTypeResult(type, id)

Result of GetIntTxVehicleType.

Name Type   Description
---- ------ ----------------------------------------------------------
Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxTrajectory(id)
Permission: EXECUTE_IF_IDLE

Get interference transmitter trajectory.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxTrajectoryResult(trajectoryType, id)

Result of GetIntTxTrajectory.

Name           Type   Description
-------------- ------ ---------------------------------------------------------
TrajectoryType string Type of the trajectory of the interferences transmitters.
Id             string Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxAntenna(gain, type, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set transmitter antenna pattern.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Id   string             Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxAntenna(id)
Permission: EXECUTE_IF_IDLE

Get transmitter antenna pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxAntennaResult(gain, type, id)

Result of GetIntTxAntenna.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Id   string             Transmitter unique identifier.

***************************************************************************************************************************

Command SetIntTxAntennaOffset(x, y, z, yaw, pitch, roll, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set antenna offset and orientation relative to body frame.
The origin of the body frame follows the transmitter trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name  Type   Description
----- ------ --------------------------------------
X     double Antenna X offset in the body frame
Y     double Antenna Y offset in the body frame
Z     double Antenna Z offset in the body frame
Yaw   double Antenna Yaw offset in the body frame
Pitch double Antenna Pitch offset in the body frame
Roll  double Antenna Roll offset in the body frame
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetIntTxAntennaOffset(id)
Permission: EXECUTE_IF_IDLE

Get antenna offset and orientation relative to body frame.
The origin of the body frame follows the transmitter trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetIntTxAntennaOffsetResult(x, y, z, yaw, pitch, roll, id)

Result of GetIntTxAntennaOffset.

Name  Type   Description
----- ------ --------------------------------------
X     double Antenna X offset in the body frame
Y     double Antenna Y offset in the body frame
Z     double Antenna Z offset in the body frame
Yaw   double Antenna Yaw offset in the body frame
Pitch double Antenna Pitch offset in the body frame
Roll  double Antenna Roll offset in the body frame
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command RemoveIntTx(id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Removes the interference transmitter. See EnableIntTx if all you want is to
disable the interference temporarily.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command RemoveAllIntTx()
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Remove all the interference transmitters.


***************************************************************************************************************************

Command GetAllSignalsFromIntTx(id)
Permission: EXECUTE_IF_IDLE

Get all signal ID for this interference transmitters.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetAllSignalsFromIntTxResult(id, idsSignal)

Result of GetAllSignalsFromIntTx.

Name      Type         Description
--------- ------------ -----------------------------------------------------
Id        string       Transmitter unique identifier.
IdsSignal array string List of signal ID for this interferences transmitter.

***************************************************************************************************************************

Command GetSignalFromIntTx(idTransmitter, signalType)
Permission: EXECUTE_IF_IDLE

Get all signal ID from this interference transmitters and this signal type. If the signal type is invalid, get the IDs of CW type.

Name          Type   Description
------------- ------ ------------------------------------------------------------------------------------
IdTransmitter string Transmitter unique identifier.
SignalType    string Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"

***************************************************************************************************************************

Result GetSignalFromIntTxResult(idTransmitter, signalType, idsSignal)

Result of GetSignalFromIntTx.

Name          Type         Description
------------- ------------ ------------------------------------------------------------------------------------
IdTransmitter string       Transmitter unique identifier.
SignalType    string       Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"
IdsSignal     array string List of signal ID for this interferences transmitter and this signal type.

***************************************************************************************************************************

Command SetIntTxCW(enabled, centralFreq, power, transmitterId, signalId, initialPhaseOffset, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set continuous wave (CW) signal to interference transmitter. A transmitter can combine
multiple signals of different types to create complex waveform. The CW id (SignalId) can be an empty
string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
specified transmitted, the existing signal is updated, ortherwise a new signal is added.

Name               Type            Description
------------------ --------------- ---------------------------------------------------
Enabled            bool            Enable (true) or disable (false) the signal
CentralFreq        double          Central frequency (Hz)
Power              double          Power (dB), relative to transmitter reference power
TransmitterId      string          Transmitter unique identifier.
SignalId           string          CW unique identifier.
InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
Group              optional int    Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxCW(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get informations about the CW signal of the transmitter.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string CW unique identifier.

***************************************************************************************************************************

Result GetIntTxCWResult(enabled, centralFreq, power, transmitterId, signalId, initialPhaseOffset, group)

Result of GetIntTxCW.

Name               Type            Description
------------------ --------------- ---------------------------------------------------
Enabled            bool            Enable (true) or disable (false) the signal
CentralFreq        double          Central frequency (Hz)
Power              double          Power (dB), relative to transmitter reference power
TransmitterId      string          Transmitter unique identifier.
SignalId           string          CW unique identifier.
InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
Group              optional int    Group, if not using default group.

***************************************************************************************************************************

Command SetIntTxChirp(enabled, centralFreq, power, bandwidth, sweepTime, transmitterId, signalId, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set Chirp signal to interference transmitter. A transmitter can combine
multiple signals of different types to create complex waveform. The signal id (SignalId) can be an empty
string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
specified transmitted, the existing signal is updated, ortherwise a new signal is added.

Name          Type         Description
------------- ------------ ---------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Bandwidth     double       Bandwidth (Hz)
SweepTime     double       sweep Time (us)
TransmitterId string       Transmitter unique identifier.
SignalId      string       Chirp unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxChirp(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get informations about the Chirp signal of the transmitter.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string Chirp unique identifier.

***************************************************************************************************************************

Result GetIntTxChirpResult(enabled, centralFreq, power, bandwidth, sweepTime, transmitterId, signalId, group)

Result of GetIntTxChirp.

Name          Type         Description
------------- ------------ ---------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Bandwidth     double       Bandwidth (Hz)
SweepTime     double       sweep Time (us)
TransmitterId string       Transmitter unique identifier.
SignalId      string       Chirp unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command SetIntTxPulse(enabled, centralFreq, power, dutyCycle, pulseRate, transmitterId, signalId, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set pulse signal interference.

Name          Type         Description
------------- ------------ --------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
PulseRate     int          Pulse rate (Hz), between 1 and 100000
TransmitterId string       Transmitter unique identifier.
SignalId      string       Pulse unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxPulse(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get pulse signal interference.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string Pulse unique identifier.

***************************************************************************************************************************

Result GetIntTxPulseResult(enabled, centralFreq, power, dutyCycle, pulseRate, transmitterId, signalId, group)

Result of GetIntTxPulse.

Name          Type         Description
------------- ------------ --------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
PulseRate     int          Pulse rate (Hz), between 1 and 100000
TransmitterId string       Transmitter unique identifier.
SignalId      string       Pulse unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command SetIntTxBPSK(enabled, centralFreq, power, codeRate, codeLengthMs, transmitterId, signalId, group, prn)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BPSK signal interference.

Name          Type         Description
------------- ------------ -------------------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz).
Power         double       Power (dB), relative to transmitter reference power.
CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
TransmitterId string       Transmitter unique identifier.
SignalId      string       BPSK unique identifier.
Group         optional int Group, if not using default group.
Prn           optional int Prn code to use. If not specified, a random gode will be generated.

***************************************************************************************************************************

Command GetIntTxBPSK(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get BPSK signal interference.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string BPSK unique identifier.

***************************************************************************************************************************

Result GetIntTxBPSKResult(enabled, centralFreq, power, codeRate, codeLengthMs, transmitterId, signalId, group, prn)

Result of GetIntTxBPSK.

Name          Type         Description
------------- ------------ -------------------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz).
Power         double       Power (dB), relative to transmitter reference power.
CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
TransmitterId string       Transmitter unique identifier.
SignalId      string       BPSK unique identifier.
Group         optional int Group, if not using default group.
Prn           optional int Prn code to use. If not specified, a random gode will be generated.

***************************************************************************************************************************

Command SetIntTxBOC(enabled, centralFreq, power, codeRate, codeLengthMs, subCarrierRate, cosinePhaseBoc, transmitterId, signalId, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set BOC signal interference.

Name           Type         Description
-------------- ------------ -------------------------------------------------------------------------
Enabled        bool         Enable (true) or disable (false) the signal
CentralFreq    double       Central frequency (Hz)
Power          double       Power (dB), relative to transmitter reference power
CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
TransmitterId  string       Transmitter unique identifier.
SignalId       string       BOC unique identifier.
Group          optional int Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxBOC(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get BOC signal interference.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string BOC unique identifier.

***************************************************************************************************************************

Result GetIntTxBOCResult(enabled, centralFreq, power, codeRate, codeLengthMs, subCarrierRate, cosinePhaseBoc, transmitterId, signalId, group)

Result of GetIntTxBOC.

Name           Type         Description
-------------- ------------ -------------------------------------------------------------------------
Enabled        bool         Enable (true) or disable (false) the signal
CentralFreq    double       Central frequency (Hz)
Power          double       Power (dB), relative to transmitter reference power
CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
TransmitterId  string       Transmitter unique identifier.
SignalId       string       BOC unique identifier.
Group          optional int Group, if not using default group.

***************************************************************************************************************************

Command SetIntTxAWGN(enabled, centralFreq, power, bandwidth, transmitterId, signalId, seed, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set AWGN signal interference.

Name          Type         Description
------------- ------------ ------------------------------------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Bandwidth     double       Bandwidth (Hz)
TransmitterId string       Transmitter unique identifier.
SignalId      string       AWGN unique identifier.
Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxAWGN(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get AWGN signal interference.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string AWGN unique identifier.

***************************************************************************************************************************

Result GetIntTxAWGNResult(enabled, centralFreq, power, bandwidth, transmitterId, signalId, seed, group)

Result of GetIntTxAWGN.

Name          Type         Description
------------- ------------ ------------------------------------------------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Bandwidth     double       Bandwidth (Hz)
TransmitterId string       Transmitter unique identifier.
SignalId      string       AWGN unique identifier.
Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command SetIntTxIqFile(enabled, centralFreq, power, path, transmitterId, signalId, group)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set IQ file signal interference.

Name          Type         Description
------------- ------------ ---------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Path          string       Path to the file to play
TransmitterId string       Transmitter unique identifier.
SignalId      string       AWGN unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command GetIntTxIqFile(transmitterId, signalId)
Permission: EXECUTE_IF_IDLE

Get IQ file signal interference.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string AWGN unique identifier.

***************************************************************************************************************************

Result GetIntTxIqFileResult(enabled, centralFreq, power, path, transmitterId, signalId, group)

Result of GetIntTxIqFile.

Name          Type         Description
------------- ------------ ---------------------------------------------------
Enabled       bool         Enable (true) or disable (false) the signal
CentralFreq   double       Central frequency (Hz)
Power         double       Power (dB), relative to transmitter reference power
Path          string       Path to the file to play
TransmitterId string       Transmitter unique identifier.
SignalId      string       AWGN unique identifier.
Group         optional int Group, if not using default group.

***************************************************************************************************************************

Command EnableIntTxSignal(enabled, transmitterId, signalId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Change whether a signal is enabled or disabled

Name          Type   Description
------------- ------ ------------------------------------
Enabled       bool   Whether the signal is enabled or not
TransmitterId string Transmitter unique identifier.
SignalId      string CW unique identifier.

***************************************************************************************************************************

Command RemoveSignalFromIntTx(transmitterId, signalId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Removes the specified signal from the interference transmitter.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.
SignalId      string Signal unique identifier.

***************************************************************************************************************************

Command RemoveAllSignalsFromIntTx(transmitterId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Removes all signals from the interference transmitter.

Name          Type   Description
------------- ------ ------------------------------
TransmitterId string Transmitter unique identifier.

***************************************************************************************************************************

Command SetStreamingBuffer(size)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set streaming buffer size.

Name Type Description
---- ---- -----------------------------
Size int  Streaming buffer size in msec

***************************************************************************************************************************

Command SetEngineLatency(latency)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set engine latency.

Name    Type Description
------- ---- ----------------------
Latency int  Engine latency in msec

***************************************************************************************************************************

Command SetSyncServer(port)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set listening port for sync time server.

Name Type Description
---- ---- ---------------------
Port int  Listening port number

***************************************************************************************************************************

Command SetSyncClient(host, port)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set host and port to connect to sync time server.

Name Type   Description
---- ------ ----------------
Host string Host address
Port int    Host port number

***************************************************************************************************************************

Command SetSyncTime(time)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set time delay to start streaming, in order to allign PPS out Signal with RF.
2000 ms is a calibrated value.

Name Type   Description
---- ------ ----------------------------------------
Time double Time delay in msec (minimum is 500 msec)

***************************************************************************************************************************

Command GetSyncTime()
Permission: EXECUTE_IF_IDLE

Get time delay to start streaming, in order to allign PPS out Signal with RF.
2000 ms is a calibrated value.


***************************************************************************************************************************

Result GetSyncTimeResult(time)

Result of GetSyncTime.

Name Type   Description
---- ------ ----------------------------------------
Time double Time delay in msec (minimum is 500 msec)

***************************************************************************************************************************

Command SetSyncTimeMaster(time)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set time delay to start streaming after PPS synchronization. A value of 1500
means the simulation will start streaming 1.5 sec after the PPS used for
synchornization.

Name Type   Description
---- ------ ----------------------------------------
Time double Time delay in msec (minimum is 500 msec)

***************************************************************************************************************************

Command GetSyncTimeMaster()
Permission: EXECUTE_IF_IDLE

Get time delay to start streaming after PPS synchronization. A value of 1500
means the simulation will start streaming 1.5 sec after the PPS used for
synchornization.


***************************************************************************************************************************

Result GetSyncTimeMasterResult(time)

Result of GetSyncTimeMaster.

Name Type   Description
---- ------ ----------------------------------------
Time double Time delay in msec (minimum is 500 msec)

***************************************************************************************************************************

Command StopWhenCommandFail(enabled)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

If enabled, simulation stops when a command result fail.

Name    Type Description
------- ---- ----------------------------------
Enabled bool Enable stop when command fail flag

***************************************************************************************************************************

Command IsSimStopWhenCommandFailEnabled()
Permission: EXECUTE_IF_IDLE

If enabled, simulation stops when a command result fail.


***************************************************************************************************************************

Result IsSimStopWhenCommandFailEnabledResult(enabled)

Result of IsSimStopWhenCommandFailEnabled.

Name    Type Description
------- ---- ----------------------------------
Enabled bool Enable stop when command fail flag

***************************************************************************************************************************

Command StopMasterWhenSlaveStop(enabled)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

If enabled, master and all the slaves will stop if a slave stop.

Name    Type Description
------- ---- ---------------------------------------
Enabled bool Enable master stop when slave fail flag

***************************************************************************************************************************

Command IsStopMasterWhenSlaveStop()
Permission: EXECUTE_IF_IDLE

If enabled, master and all the slaves will stop if a slave stop.


***************************************************************************************************************************

Result IsStopMasterWhenSlaveStopResult(enabled)

Result of IsStopMasterWhenSlaveStop.

Name    Type Description
------- ---- ---------------------------------------
Enabled bool Enable master stop when slave fail flag

***************************************************************************************************************************

Command ShowMapAnalysis(show)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set if map is show/hide in Analysis tab.

Name Type Description
---- ---- -------------
Show bool Show map flag

***************************************************************************************************************************

Command IsMapAnalysisEnabled()
Permission: EXECUTE_IF_IDLE

Get if map is show/hide in Analysis tab.


***************************************************************************************************************************

Result IsMapAnalysisEnabledResult(show)

Result of IsMapAnalysisEnabled.

Name Type Description
---- ---- -------------
Show bool Show map flag

***************************************************************************************************************************

Command SetSpectrumVisible(visible)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set if spectrums are show/hide.

Name    Type Description
------- ---- ------------------
Visible bool Show spectrum flag

***************************************************************************************************************************

Command IsSpectrumVisible()
Permission: EXECUTE_IF_IDLE

Get if spectrums are show/hide.


***************************************************************************************************************************

Result IsSpectrumVisibleResult(visible)

Result of IsSpectrumVisible.

Name    Type Description
------- ---- ------------------
Visible bool Show spectrum flag

***************************************************************************************************************************

Command GetSimulatorState()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Ask current simulator state. Will return a SimulatorStateResult.


***************************************************************************************************************************

Command WaitSimulatorState(state, failureState)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Wait until simulator has reached the specified substate unless simulator goes to error state or specified failure substate. Will return a SimulatorStateResult.
Possible substates are :
-None
-Incomplete
-Ready
-Initializing
-Armed
-Streaming RF
-Sync Slave
-WF Init (Slave)
-WF Init (Master)
-HIL Sync
-Sync Init
-Sync PPS Reset
-Sync Start Time
-Sync Start
-Error

Name         Type   Description
------------ ------ ----------------------------------------------------------
State        string Simulator sub state string.
FailureState string Abort waiting if simulator goes to this sub state instead.

***************************************************************************************************************************

Command AbortWaitSimulatorState()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Abort the current WaitSimulatorState if any.


***************************************************************************************************************************

Result SimulatorStateResult(state, error, stateId, subStateId)

Simulator State Result.
Possible substates are :
-None
-Incomplete
-Ready
-Initializing
-Armed
-Streaming RF
-Sync Slave
-WF Init (Slave)
-WF Init (Master)
-HIL Sync
-Sync Init
-Sync PPS Reset
-Sync Start Time
-Sync Start
-Error

Name       Type              Description
---------- ----------------- ------------------------------------
State      string            Simulator substate.
Error      string            Error Message if state is Error.
StateId    SimulatorState    Simulator State value as an enum.
SubStateId SimulatorSubState Simulator SubState value as an enum.

***************************************************************************************************************************

Command BeginVehicleInfo()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Begin receiving simulated vehicle informations. 
During simulation, you must call RemoteSimulator.lastVehicleInfo to get current simulation statistics or RemoteSimulator.nextVehicleInfo to get pending simulation statistics


***************************************************************************************************************************

Command EndVehicleInfo()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

End receiving simulated vehicle informations.


***************************************************************************************************************************

Command MessageSequenceInsert(signal, index, type)
Permission: EXECUTE_IF_IDLE

Insert message to sequence.

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------------------------------
Signal string Signal Name ("L2C" for example)
Index  int    Message index in sequence where to insert. Set to -1 to append the message type at the end of the sequence.
Type   int    Message type to insert

***************************************************************************************************************************

Command MessageSequenceRemove(signal, index)
Permission: EXECUTE_IF_IDLE

Remove message from sequence.

Name   Type   Description
------ ------ ----------------------------------------------------------------------------------------
Signal string Signal Name ("L2C" for example)
Index  int    Message index in sequence where to remove. Set to -1 to remove last message in sequence.

***************************************************************************************************************************

Command MessageSequenceSwap(signal, indexI, indexJ)
Permission: EXECUTE_IF_IDLE

Swap 2 messages in sequence.

Name   Type   Description
------ ------ -------------------------------
Signal string Signal Name ("L2C" for example)
IndexI int    Message index i in sequence.
IndexJ int    Message index j in sequence.

***************************************************************************************************************************

Command MessageSequenceImport(signal, filename)
Permission: EXECUTE_IF_IDLE

Import a sequence file.
A sequence file is a CSV with one message type per line.

Name     Type   Description
-------- ------ ------------------------------------------------
Signal   string Signal Name ("L2C" for example)
Filename string Path to the CSV file on the simulator's machine.

***************************************************************************************************************************

Command GetMessageSequence(signal)
Permission: EXECUTE_IF_IDLE

Get the messages sequence for the signal

Name   Type   Description
------ ------ -------------------------------
Signal string Signal Name ("L2C" for example)

***************************************************************************************************************************

Result GetMessageSequenceResult(signal, sequence)

Result of GetMessageSequence.

Name     Type      Description
-------- --------- -------------------------------
Signal   string    Signal Name ("L2C" for example)
Sequence array int List of message type

***************************************************************************************************************************

Command SetGalileoFnavSatelliteK(prn, k)
Permission: EXECUTE_IF_IDLE

Set the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).

Name Type Description
---- ---- -----------------------
Prn  int  Satellite PRN number
K    int  Satellite K PRN number.

***************************************************************************************************************************

Command GetGalileoFnavSatelliteK(prn)
Permission: EXECUTE_IF_IDLE

Get the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).

Name Type Description
---- ---- --------------------
Prn  int  Satellite PRN number

***************************************************************************************************************************

Result GetGalileoFnavSatelliteKResult(prn, k)

Result of GetGalileoFnavSatelliteK.

Name Type Description
---- ---- -----------------------
Prn  int  Satellite PRN number
K    int  Satellite K PRN number.

***************************************************************************************************************************

Command CalibFunction(svId, signal, enableSV, enableDoppler, phaseOffet)
Permission: EXECUTE_IF_SIMULATING

Skydel special calibration function, internal use only

Name          Type   Description
------------- ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SvId          int    SV ID for GPS, Galileo, BeiDou, GLONASS, QZSS and SBAS.
Signal        string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S"
EnableSV      bool   Enable/Disable multiplication by satellite and Navigation Message
EnableDoppler bool   Enable/Disable Doppler Frequency and Phase offset
PhaseOffet    double Carrier Phase Offset applied to Line Of Sight

***************************************************************************************************************************

Command ClearStatusLog()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Clears the status log


***************************************************************************************************************************

Enumeration LogLevel

A log record level.

Possible values:
  Message
  Warning
  Error

***************************************************************************************************************************

Data LogRecord(timeStamp, state, subState, level, message)

Represents a record inside the status log.

Name      Type              Description
--------- ----------------- --------------------------------------------------
TimeStamp datetime          The record time, in the host os time.
State     SimulatorState    The simulator state at the time of the record.
SubState  SimulatorSubState The simulator sub-state at the time of the record.
Level     LogLevel          The record level.
Message   string            The record message.

***************************************************************************************************************************

Command GetStatusLog()
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Returns the status log in a GetStatusLogResult and clears it


***************************************************************************************************************************

Result GetStatusLogResult(records)

Result of GetStatusLog.

Name    Type            Description
------- --------------- ----------------
Records array LogRecord The log records.

***************************************************************************************************************************

Command CommandGroup(commands)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Group multiple commands as one

Name     Type               Description
-------- ------------------ -----------------------
Commands array command_base The commands to execute

***************************************************************************************************************************

Command GetVisibleSV(system)
Permission: EXECUTE_IF_SIMULATING

Get a list of visible satellites' SV IDs within a system, returns a GetVisibleSVResult

Name   Type   Description
------ ------ -----------------------------------------------------------------------------------
System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result GetVisibleSVResult(system, svId)

Result of GetVisibleSV.

Name   Type      Description
------ --------- -----------------------------------------------------------------------------------
System string    The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   array int A list containing the visible satellites' SV IDs

***************************************************************************************************************************

Command ArmPPS()
Permission: EXECUTE_IF_IDLE

Arm the system for further PPS synchronization instructions.


***************************************************************************************************************************

Command WaitAndResetPPS()
Permission: EXECUTE_IF_SIMULATING

Ask Skydel to reset its PPS counter.


***************************************************************************************************************************

Command StartPPS(msec)
Permission: EXECUTE_IF_SIMULATING

Start the simulation at the given PPS count.

Name Type Description
---- ---- -------------------------------------------------------------
Msec int  The number of ms after PPS to wait before starting simulation

***************************************************************************************************************************

Command EnableSV(system, svId, enabled)
Permission: EXECUTE_IF_IDLE

Enable or disable a satellite for this constellation.

Name    Type   Description
------- ------ ------------------------------------------------------------------------------------------------------
System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID (use 0 for all SVs).
Enabled bool   The satellite will be present/absent from the constellation

***************************************************************************************************************************

Command IsSVEnabled(system, svId)
Permission: EXECUTE_IF_IDLE

Get whether a satellite is enabled or disabled for this constellation.

Name   Type   Description
------ ------ ------------------------------------------------------------------------------------------------------
System string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    The satellite's SV ID (use 0 for all SVs).

***************************************************************************************************************************

Result IsSVEnabledResult(system, svId, enabled)

Result of IsSVEnabled.

Name    Type   Description
------- ------ ------------------------------------------------------------------------------------------------------
System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    The satellite's SV ID (use 0 for all SVs).
Enabled bool   The satellite will be present/absent from the constellation

***************************************************************************************************************************

Command EnableEachSV(system, enabled)
Permission: EXECUTE_IF_IDLE

Enable or disable each satellite for this constellation.

Name    Type       Description
------- ---------- ------------------------------------------------------------------------------------------------------
System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool Array of present/absent flags for the constellation

***************************************************************************************************************************

Command IsEachSVEnabled(system)
Permission: EXECUTE_IF_IDLE

Get whether each satellite is enabled or disabled for this constellation.

Name   Type   Description
------ ------ ------------------------------------------------------------------------------------------------------
System string The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result IsEachSVEnabledResult(system, enabled)

Result of IsEachSVEnabled.

Name    Type       Description
------- ---------- ------------------------------------------------------------------------------------------------------
System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool Array of present/absent flags for the constellation

***************************************************************************************************************************

Command EnableCnav2Pages(messages)
Permission: EXECUTE_IF_IDLE

Set the enabled L1C CNAV2 pages

Name     Type      Description
-------- --------- -----------------
Messages array int The enabled pages

***************************************************************************************************************************

Command GetCnav2PagesEnabled()
Permission: EXECUTE_IF_IDLE

Get the enabled L1C CNAV2 pages


***************************************************************************************************************************

Result GetCnav2PagesEnabledResult(messages)

Result of GetCnav2PagesEnabled.

Name     Type      Description
-------- --------- -----------------
Messages array int The enabled pages

***************************************************************************************************************************

Command EnableSbasMessages(messages)
Permission: EXECUTE_IF_IDLE

Set the enabled SBAS messages. Message 63 is always enabled

Name     Type      Description
-------- --------- --------------------
Messages array int The enabled messages

***************************************************************************************************************************

Command GetSbasMessagesEnabled()
Permission: EXECUTE_IF_IDLE

Get the enabled SBAS messages. Message 63 is always enabled


***************************************************************************************************************************

Result GetSbasMessagesEnabledResult(messages)

Result of GetSbasMessagesEnabled.

Name     Type      Description
-------- --------- --------------------
Messages array int The enabled messages

***************************************************************************************************************************

Command SetSbasMonitoredSystems(systems)
Permission: EXECUTE_IF_IDLE

Set the systems monitored by SBAS.

Name    Type         Description
------- ------------ ------------------------------------------------------------------------------------
Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported

***************************************************************************************************************************

Command GetSbasMonitoredSystems()
Permission: EXECUTE_IF_IDLE

Get the systems monitored by SBAS.


***************************************************************************************************************************

Result GetSbasMonitoredSystemsResult(systems)

Result of GetSbasMonitoredSystems.

Name    Type         Description
------- ------------ ------------------------------------------------------------------------------------
Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported

***************************************************************************************************************************

Command SetUdreiForSV(system, svId, udrei)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the UDREI value transmitted by SBAS for the satellite of the specified constellation.

Name   Type   Description
------ ------ ---------------------------------------------------------------
System string "GPS" or "SBAS".
SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
Udrei  int    The UDREI value.

***************************************************************************************************************************

Command GetUdreiForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get the UDREI value transmitted by SBAS for the satellite of the specified constellation.

Name   Type   Description
------ ------ ---------------------------------------------------------------
System string "GPS" or "SBAS".
SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).

***************************************************************************************************************************

Result GetUdreiForSVResult(system, svId, udrei)

Result of GetUdreiForSV.

Name   Type   Description
------ ------ ---------------------------------------------------------------
System string "GPS" or "SBAS".
SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
Udrei  int    The UDREI value.

***************************************************************************************************************************

Command SetUdreiForEachSV(system, udreis)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the UDREI value transmitted by SBAS for all satellites of the specified constellation.

Name   Type      Description
------ --------- --------------------------------------------------------------------------------------------------------------------------
System string    "GPS" or "SBAS".
Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).

***************************************************************************************************************************

Command GetUdreiForEachSV(system)
Permission: EXECUTE_IF_IDLE

Get the UDREI value transmitted by SBAS for all satellites of the specified constellation.

Name   Type   Description
------ ------ ----------------
System string "GPS" or "SBAS".

***************************************************************************************************************************

Result GetUdreiForEachSVResult(system, udreis)

Result of GetUdreiForEachSV.

Name   Type      Description
------ --------- --------------------------------------------------------------------------------------------------------------------------
System string    "GPS" or "SBAS".
Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).

***************************************************************************************************************************

Enumeration AntennaPatternType

Possible values for antenna patterns

Possible values:
  Default
  AntennaNone
  Custom

***************************************************************************************************************************

Enumeration GNSSBand

The different GNSS bands

Possible values:
  L1
  L2
  L5
  E6

***************************************************************************************************************************

Command BroadcastConfig()
Permission: EXECUTE_IF_IDLE

Ask the master to broadcast its configuration to all slaves.


***************************************************************************************************************************

Command CancelBroadcastConfig()
Permission: EXECUTE_IF_IDLE

Cancel the current configuration broadcast if any.


***************************************************************************************************************************

Command SetConfigBroadcastOnStart(broadcastOnStart)
Permission: EXECUTE_IF_IDLE

Set wether the master should send its configuration to every slave when simulation start.

Name             Type Description
---------------- ---- --------------------------------------------------------------
BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.

***************************************************************************************************************************

Command GetConfigBroadcastOnStart()
Permission: EXECUTE_IF_IDLE

Get wether the master should send its configuration to every slave when simulation start.


***************************************************************************************************************************

Result GetConfigBroadcastOnStartResult(broadcastOnStart)

Result of GetConfigBroadcastOnStart.

Name             Type Description
---------------- ---- --------------------------------------------------------------
BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.

***************************************************************************************************************************

Enumeration ConfigFilter

The different kinds of filters for configuration.

Possible values:
  Radios
  OutputAndRadios
  VehicleMotion
  VehicleAntenna
  Interference
  PlugIn

***************************************************************************************************************************

Command SetConfigBroadcastFilter(filter)
Permission: EXECUTE_IF_IDLE

Set the filter for configuration broadcast.

Name   Type               Description
------ ------------------ ------------------------------------------------------------------------------
Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.

***************************************************************************************************************************

Command GetConfigBroadcastFilter()
Permission: EXECUTE_IF_IDLE

Get the filter for configuration broadcast.


***************************************************************************************************************************

Result GetConfigBroadcastFilterResult(filter)

Result of GetConfigBroadcastFilter.

Name   Type               Description
------ ------------------ ------------------------------------------------------------------------------
Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.

***************************************************************************************************************************

Command SetPseudorangeNoiseOffsetForSV(system, svId, enabled, offset)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise constant offset.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    Satellite SV ID.
Enabled bool   If true, the offset is enabled (applied)
Offset  double The constant offset in metters

***************************************************************************************************************************

Command GetPseudorangeNoiseOffsetForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise constant offset.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId   int    Satellite SV ID.

***************************************************************************************************************************

Result GetPseudorangeNoiseOffsetForSVResult(system, svId, enabled, offset)

Result of GetPseudorangeNoiseOffsetForSV.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    Satellite SV ID.
Enabled bool   If true, the offset is enabled (applied)
Offset  double The constant offset in metters

***************************************************************************************************************************

Command SetPseudorangeNoiseOffsetForEachSV(system, enabled, offset)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise constant offset for all satellites.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool   If true, the offset is enabled (applied)
Offset  array double The constant offset in metters

***************************************************************************************************************************

Command SetAllSatellitesPseudorangeNoiseOffset(system, enabled, offset)
Permission: EXECUTE_IF_IDLE

Please note the command SetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use SetPseudorangeNoiseOffsetForEachSV.

Set the satellite pseudorange noise constant offset for all satellites.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool   If true, the offset is enabled (applied)
Offset  array double The constant offset in metters

***************************************************************************************************************************

Command GetPseudorangeNoiseOffsetForEachSV(system)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise constant offset for all satellites.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command GetAllSatellitesPseudorangeNoiseOffset(system)
Permission: EXECUTE_IF_IDLE

Please note the command GetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use GetPseudorangeNoiseOffsetForEachSV.

Get the satellite pseudorange noise constant offset for all satellites.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Result GetPseudorangeNoiseOffsetForEachSVResult(system, enabled, offset)

Result of GetPseudorangeNoiseOffsetForEachSV.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Enabled array bool   If true, the offset is enabled (applied)
Offset  array double The constant offset in metters

***************************************************************************************************************************

Command SetPseudorangeNoiseSineWaveForSV(system, svId, sineWave, enabled, amplitude, period, offset)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise sine wave attributes.

Name      Type   Description
--------- ------ ----------------------------------------------------------------
System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId      int    The satellite's SV ID
SineWave  int    Sine wave number (0 or 1)
Enabled   bool   If true, sine wave is enabled
Amplitude double Sine wave amplitude in meters
Period    int    Sine wave period in seconds (minimum 3 seconds)
Offset    double Phase offset in radians

***************************************************************************************************************************

Command GetPseudorangeNoiseSineWaveForSV(system, svId, sineWave)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise sine wave attributes.

Name     Type   Description
-------- ------ ----------------------------------------------------------------
System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId     int    The satellite's SV ID
SineWave int    Sine wave number (0 or 1)

***************************************************************************************************************************

Result GetPseudorangeNoiseSineWaveForSVResult(system, svId, sineWave, enabled, amplitude, period, offset)

Result of GetPseudorangeNoiseSineWaveForSV.

Name      Type   Description
--------- ------ ----------------------------------------------------------------
System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId      int    The satellite's SV ID
SineWave  int    Sine wave number (0 or 1)
Enabled   bool   If true, sine wave is enabled
Amplitude double Sine wave amplitude in meters
Period    int    Sine wave period in seconds (minimum 3 seconds)
Offset    double Phase offset in radians

***************************************************************************************************************************

Command SetPseudorangeNoiseSineWaveForEachSV(system, sineWave, enabled, amplitude, period, offset)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise sine wave attributes for all satellites.

Name      Type         Description
--------- ------------ ----------------------------------------------------------------
System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SineWave  int          Sine wave number (0 or 1)
Enabled   array bool   If true, sine wave is enabled
Amplitude array double Sine wave amplitude in meters
Period    array int    sine wave period in seconds
Offset    array double Phase offset in radians

***************************************************************************************************************************

Command SetAllSatellitesPseudorangeNoiseSineWave(system, sineWave, enabled, amplitude, period, offset)
Permission: EXECUTE_IF_IDLE

Please note the command SetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use SetPseudorangeNoiseSineWaveForEachSV.

Set the satellite pseudorange noise sine wave attributes for all satellites.

Name      Type         Description
--------- ------------ ----------------------------------------------------------------
System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SineWave  int          Sine wave number (0 or 1)
Enabled   array bool   If true, sine wave is enabled
Amplitude array double Sine wave amplitude in meters
Period    array int    sine wave period in seconds
Offset    array double Phase offset in radians

***************************************************************************************************************************

Command GetPseudorangeNoiseSineWaveForEachSV(system, sineWave)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise sine wave attributes for all satellites.

Name     Type   Description
-------- ------ ----------------------------------------------------------------
System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SineWave int    Sine wave number (0 or 1)

***************************************************************************************************************************

Command GetAllSatellitesPseudorangeNoiseSineWave(system, sineWave)
Permission: EXECUTE_IF_IDLE

Please note the command GetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use GetPseudorangeNoiseSineWaveForEachSV.

Get the satellite pseudorange noise sine wave attributes for all satellites.

Name     Type   Description
-------- ------ ----------------------------------------------------------------
System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SineWave int    Sine wave number (0 or 1)

***************************************************************************************************************************

Result GetPseudorangeNoiseSineWaveForEachSVResult(system, sineWave, enabled, amplitude, period, offset)

Result of GetPseudorangeNoiseSineWaveForEachSV.

Name      Type         Description
--------- ------------ ----------------------------------------------------------------
System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SineWave  int          Sine wave number (0 or 1)
Enabled   array bool   If true, sine wave is enabled
Amplitude array double Sine wave amplitude in meters
Period    array int    sine wave period in seconds
Offset    array double Phase offset in radians

***************************************************************************************************************************

Command SetPseudorangeNoiseGaussMarkovForSV(system, svId, process, enabled, sigma, time, seed)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise Gauss-Markov process attributes.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    Satellite SV ID.
Process int    Gauss-Markov Process number (0 or 1)
Enabled bool   If true, Gauss-Markov process is enabled
Sigma   double Standard devition in meters [0..5000]
Time    double Time constant [1..2000]
Seed    int    Random seed

***************************************************************************************************************************

Command GetPseudorangeNoiseGaussMarkovForSV(system, svId, process)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise Gauss-Markov process attributes.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    Satellite SV ID.
Process int    Gauss-Markov Process number (0 or 1)

***************************************************************************************************************************

Result GetPseudorangeNoiseGaussMarkovForSVResult(system, svId, process, enabled, sigma, time, seed)

Result of GetPseudorangeNoiseGaussMarkovForSV.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
SvId    int    Satellite SV ID.
Process int    Gauss-Markov Process number (0 or 1)
Enabled bool   If true, Gauss-Markov process is enabled
Sigma   double Standard devition in meters [0..5000]
Time    double Time constant [1..2000]
Seed    int    Random seed

***************************************************************************************************************************

Command SetPseudorangeNoiseGaussMarkovForEachSV(system, process, enabled, sigma, time, seed)
Permission: EXECUTE_IF_IDLE

Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Process int          Gauss-Markov Process number (0 or 1)
Enabled array bool   If true, Gauss-Markov process is enabled
Sigma   array double Standard devition
Time    array double Time constant
Seed    array int    Random seed

***************************************************************************************************************************

Command SetAllSatellitesPseudorangeNoiseGaussMarkov(system, process, enabled, sigma, time, seed)
Permission: EXECUTE_IF_IDLE

Please note the command SetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use SetPseudorangeNoiseGaussMarkovForEachSV.

Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Process int          Gauss-Markov Process number (0 or 1)
Enabled array bool   If true, Gauss-Markov process is enabled
Sigma   array double Standard devition
Time    array double Time constant
Seed    array int    Random seed

***************************************************************************************************************************

Command GetPseudorangeNoiseGaussMarkovForEachSV(system, process)
Permission: EXECUTE_IF_IDLE

Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Process int    Gauss-Markov Process number (0 or 1)

***************************************************************************************************************************

Command GetAllSatellitesPseudorangeNoiseGaussMarkov(system, process)
Permission: EXECUTE_IF_IDLE

Please note the command GetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use GetPseudorangeNoiseGaussMarkovForEachSV.

Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.

Name    Type   Description
------- ------ ----------------------------------------------------------------
System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Process int    Gauss-Markov Process number (0 or 1)

***************************************************************************************************************************

Result GetPseudorangeNoiseGaussMarkovForEachSVResult(system, process, enabled, sigma, time, seed)

Result of GetPseudorangeNoiseGaussMarkovForEachSV.

Name    Type         Description
------- ------------ ----------------------------------------------------------------
System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
Process int          Gauss-Markov Process number (0 or 1)
Enabled array bool   If true, Gauss-Markov process is enabled
Sigma   array double Standard devition
Time    array double Time constant
Seed    array int    Random seed

***************************************************************************************************************************

Command RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV(system)
Permission: EXECUTE_IF_IDLE

Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Command RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov(system)
Permission: EXECUTE_IF_IDLE

Please note the command RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV.

Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.

Name   Type   Description
------ ------ ----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"

***************************************************************************************************************************

Data RIC(r, i, c)

Relative orbit frame.

Name Type   Description
---- ------ -------------------------------------------------------------------
R    double The radial component of the relative position vector, in meter
I    double The in-track component of the relative position vector, in meter
C    double The cross-track component of the relative position vector, in meter

***************************************************************************************************************************

Command SetEphemerisErrorForSV(system, svId, orbit, deltaAf0, deltaAf1)
Permission: EXECUTE_IF_IDLE

Set the satellite ephemeris error.

Name     Type   Description
-------- ------ -----------------------------------------------------------------------------------
System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
SvId     int    Satellite SV ID.
Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.

***************************************************************************************************************************

Command GetEphemerisErrorForSV(system, svId)
Permission: EXECUTE_IF_IDLE

Get the satellite ephemeris error.

Name   Type   Description
------ ------ --------------------------------------------------------
System string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
SvId   int    Satellite SV ID.

***************************************************************************************************************************

Result GetEphemerisErrorForSVResult(system, svId, orbit, deltaAf0, deltaAf1)

Result of GetEphemerisErrorForSV.

Name     Type   Description
-------- ------ -----------------------------------------------------------------------------------
System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
SvId     int    Satellite SV ID.
Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.

***************************************************************************************************************************

Command SetUsingVelocityInSbasMessage25(useVelocity)
Permission: EXECUTE_IF_IDLE

Set whether SBAS message 25 should send velocity corrections

Name        Type Description
----------- ---- --------------------------------------------------------
UseVelocity bool Whether SBAS message 25 should send velocity corrections

***************************************************************************************************************************

Command IsUsingVelocityInSbasMessage25()
Permission: EXECUTE_IF_IDLE

Get whether SBAS message 25 should send velocity corrections


***************************************************************************************************************************

Result IsUsingVelocityInSbasMessage25Result(useVelocity)

Result of IsUsingVelocityInSbasMessage25.

Name        Type Description
----------- ---- --------------------------------------------------------
UseVelocity bool Whether SBAS message 25 should send velocity corrections

***************************************************************************************************************************

Command SetTransmitMessage2InSbasMessage0(transmitMessage2)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set whether SBAS should transmit message 2 instead of message 0.

Name             Type Description
---------------- ---- ---------------------------------------------------------
TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.

***************************************************************************************************************************

Command IsTransmitMessage2InSbasMessage0()
Permission: EXECUTE_IF_IDLE

Get whether SBAS should transmit message 2 instead of message 0.


***************************************************************************************************************************

Result IsTransmitMessage2InSbasMessage0Result(transmitMessage2)

Result of IsTransmitMessage2InSbasMessage0.

Name             Type Description
---------------- ---- ---------------------------------------------------------
TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.

***************************************************************************************************************************

Command ForceSVGeo(system, svId, isGeo, longitude, dataSetName)
Permission: EXECUTE_IF_IDLE

Set whether a satellite is geostationary

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite SV ID
IsGeo       bool            True for geostationary satellite
Longitude   double          The longitude to use, in degree
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command IsSVForcedGeo(system, svId, dataSetName)
Permission: EXECUTE_IF_IDLE

Get whether a satellite is geostationary

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite SV ID
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Result IsSVForcedGeoResult(system, svId, isGeo, longitude, dataSetName)

Result of IsSVForcedGeo.

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
SvId        int             The satellite SV ID
IsGeo       bool            True for geostationary satellite
Longitude   double          The longitude to use, in degree
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command EnableSbasFastCorrectionsFor(system, isEnabled, errorType)
Permission: EXECUTE_IF_IDLE

Set whether specific errors type for this constellation should be compensated in SBAS fast corrections

Name      Type            Description
--------- --------------- ----------------------------------------------------------------------------------------------------
System    string          "GPS" or "SBAS"
IsEnabled bool            True if corrections are enabled
ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
                          Default value is "PSR error". Getter only accepts one error type.

***************************************************************************************************************************

Command IsSbasFastCorrectionsEnabledFor(system, errorType)
Permission: EXECUTE_IF_IDLE

Get whether specific errors type for this constellation should be compensated in SBAS fast corrections

Name      Type            Description
--------- --------------- ----------------------------------------------------------------------------------------------------
System    string          "GPS" or "SBAS"
ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
                          Default value is "PSR error". Getter only accepts one error type.

***************************************************************************************************************************

Result IsSbasFastCorrectionsEnabledForResult(system, isEnabled, errorType)

Result of IsSbasFastCorrectionsEnabledFor.

Name      Type            Description
--------- --------------- ----------------------------------------------------------------------------------------------------
System    string          "GPS" or "SBAS"
IsEnabled bool            True if corrections are enabled
ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
                          Default value is "PSR error". Getter only accepts one error type.

***************************************************************************************************************************

Command ApplyDelayInSbas(isEnabled)
Permission: EXECUTE_IF_IDLE

Set whether the ionospheric offsets grid should be used for SBAS corrections in message 26

Name      Type Description
--------- ---- --------------------------------------------
IsEnabled bool True if offsets are applied in Sbas messages

***************************************************************************************************************************

Command IsDelayAppliedInSbas()
Permission: EXECUTE_IF_IDLE

Get whether the ionospheric offsets grid should be used for SBAS corrections in message 26


***************************************************************************************************************************

Result IsDelayAppliedInSbasResult(isEnabled)

Result of IsDelayAppliedInSbas.

Name      Type Description
--------- ---- --------------------------------------------
IsEnabled bool True if offsets are applied in Sbas messages

***************************************************************************************************************************

Command EnableIonoOffset(isEnabled)
Permission: EXECUTE_IF_IDLE

Set whether the ionospheric offsets grid should be applied to the ionosphere

Name      Type Description
--------- ---- ---------------------------------------------
IsEnabled bool True if offsets are applied on the ionosphere

***************************************************************************************************************************

Command IsIonoOffsetEnabled()
Permission: EXECUTE_IF_IDLE

Get whether the ionospheric offsets grid should be applied to the ionosphere


***************************************************************************************************************************

Result IsIonoOffsetEnabledResult(isEnabled)

Result of IsIonoOffsetEnabled.

Name      Type Description
--------- ---- ---------------------------------------------
IsEnabled bool True if offsets are applied on the ionosphere

***************************************************************************************************************************

Command EnableSbasLongTermCorrectionsFor(system, isEnabled)
Permission: EXECUTE_IF_IDLE

Set whether ephemeris errors for this constellation should be compensated in SBAS long term corrections

Name      Type   Description
--------- ------ ------------------------------------
System    string As of today, only "GPS" is supported
IsEnabled bool   True if corrections are enabled

***************************************************************************************************************************

Command IsSbasLongTermCorrectionsEnabledFor(system)
Permission: EXECUTE_IF_IDLE

Get whether ephemeris errors for this constellation should be compensated in SBAS long term corrections

Name   Type   Description
------ ------ ------------------------------------
System string As of today, only "GPS" is supported

***************************************************************************************************************************

Result IsSbasLongTermCorrectionsEnabledForResult(system, isEnabled)

Result of IsSbasLongTermCorrectionsEnabledFor.

Name      Type   Description
--------- ------ ------------------------------------
System    string As of today, only "GPS" is supported
IsEnabled bool   True if corrections are enabled

***************************************************************************************************************************

Command SetGpsUraIndexForSV(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the ura index of a GPS satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetBeiDouUraIndexForSV(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the ura index of a BeiDou satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssUraIndexForSV(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the URA index of a QZSS satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetQzssUraIndex(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Please note the command SetQzssUraIndex is deprecated since 21.3. You may use SetQzssUraIndexForSV.

Set the URA index of a QZSS satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICUraIndexForSV(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the URA index of a NavIC satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetNavICUraIndex(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Please note the command SetNavICUraIndex is deprecated since 21.3. You may use SetNavICUraIndexForSV.

Set the URA index of a NavIC satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetSbasUraIndexForSV(svId, urai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the URA index of a Sbas satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Urai        int             URA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoSisaE1E5aIndexForSV(svId, sisai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the SISA(E1,E5a) index of a Galileo satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Sisai       int             SISA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetGalileoSisaE1E5bIndexForSV(svId, sisai, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the SISA(E1,E5b) index of a Galileo satellite

Name        Type            Description
----------- --------------- -------------------------------------------------------------------------------------------
SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
Sisai       int             SISA index.
DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.

***************************************************************************************************************************

Command SetPilotCW(enabled, outputIdx, centralFreqOffset, power, pilotId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set CW pilot added to signal

Name              Type   Description
----------------- ------ ---------------------------------------------------
Enabled           bool   Enable (true) or disable (false) the signal
OutputIdx         int    RF Output index (zero-based)
CentralFreqOffset double Central frequency offset of the Pilot (Hz)
Power             double Power (dB), relative to transmitter reference power
PilotId           string CW Pilot unique identifier.

***************************************************************************************************************************

Command SetPilotPRN(enabled, outputIdx, centralFreqOffset, power, prn, type, pilotId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set PRN pilot added to signal

Name              Type   Description
----------------- ------ ---------------------------------------------------
Enabled           bool   Enable (true) or disable (false) the signal
OutputIdx         int    RF Output index (zero-based)
CentralFreqOffset double Central frequency offset of the Pilot (Hz)
Power             double Power (dB), relative to transmitter reference power
Prn               int    The PRN to use
Type              string The type of PRN to use (CA or Gold)
PilotId           string CW Pilot unique identifier.

***************************************************************************************************************************

Command CalibratePilotOutput(outputIdx, power, time, carrierPhase)
Permission: EXECUTE_IF_SIMULATING

Calibrate a pilot output

Name         Type   Description
------------ ------ ---------------------------------------------------
OutputIdx    int    RF Output index (zero-based)
Power        double Power (dB), relative to transmitter reference power
Time         double Code time offset in second
CarrierPhase double Carrier phase offset in radians

***************************************************************************************************************************

Command RemoveAllPilots()
Permission: EXECUTE_IF_SIMULATING

Remove all pilots on all outputs


***************************************************************************************************************************

Command SetRFOutputOffsets(outputIdx, powerOffset, timeOffset, phaseOffset)
Permission: EXECUTE_IF_SIMULATING

Change modulation offsets of one RF output

Name        Type   Description
----------- ------ ----------------------------------------------------------------
OutputIdx   int    RF Output index (zero-based)
PowerOffset double Power offset (dB), to apply on all signals of the RF Output
TimeOffset  double Time offset (seconds), to apply on all signals of the RF Output
PhaseOffset double Phase offset (radians), to apply on all signals of the RF Output

***************************************************************************************************************************

Command IsTrajectoryCompleted()
Permission: EXECUTE_IF_SIMULATING

Returns whether the vehicle trajectory was completed.
For fixed, circular and earth-orbiting spacecraft, this will always return false.
For track playback and vehicle simulation, this will return true once the vehicle will reach the last position in the track/route.
The value is unreliable for HIL trajectories.


***************************************************************************************************************************

Result IsTrajectoryCompletedResult(isCompleted)

Result of IsTrajectoryCompleted.

Name        Type Description
----------- ---- ------------------------------------------
IsCompleted bool Whether the trajectory is completed or not

***************************************************************************************************************************

Command SetIonoGridError(band, point, error)
Permission: EXECUTE_IF_IDLE

Set the error offset for a ionospheric grid point

Name  Type   Description
----- ------ -------------------------------
Band  int    The ionospheric grid band index
Point int    The IGP index
Error double The error offset at the IGP

***************************************************************************************************************************

Command GetIonoGridError(band, point)
Permission: EXECUTE_IF_IDLE

Get the error offset for a ionospheric grid point

Name  Type Description
----- ---- -------------------------------
Band  int  The ionospheric grid band index
Point int  The IGP index

***************************************************************************************************************************

Result GetIonoGridErrorResult(band, point, error)

Result of GetIonoGridError.

Name  Type   Description
----- ------ -------------------------------
Band  int    The ionospheric grid band index
Point int    The IGP index
Error double The error offset at the IGP

***************************************************************************************************************************

Command SetIonoGridGIVEI(band, point, giveI, serviceProvider)
Permission: EXECUTE_IF_IDLE

Set the GIVEI for a ionospheric grid point

Name            Type            Description
--------------- --------------- -------------------------------
Band            int             The ionospheric grid band index
Point           int             The IGP index
GiveI           int             The GIVEI at the IGP
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command GetIonoGridGIVEI(band, point, serviceProvider)
Permission: EXECUTE_IF_IDLE

Get the GIVEI for a ionospheric grid point

Name            Type            Description
--------------- --------------- -------------------------------
Band            int             The ionospheric grid band index
Point           int             The IGP index
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Result GetIonoGridGIVEIResult(band, point, giveI, serviceProvider)

Result of GetIonoGridGIVEI.

Name            Type            Description
--------------- --------------- -------------------------------
Band            int             The ionospheric grid band index
Point           int             The IGP index
GiveI           int             The GIVEI at the IGP
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command SetIonoGridErrorAll(grid)
Permission: EXECUTE_IF_IDLE

Set Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.

Name Type               Description
---- ------------------ -----------------------------------------------------------------------
Grid array array double Array containing each band, each band is an array containing the errors

***************************************************************************************************************************

Command GetIonoGridErrorAll()
Permission: EXECUTE_IF_IDLE

Get Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.


***************************************************************************************************************************

Result GetIonoGridErrorAllResult(grid)

Result of GetIonoGridErrorAll.

Name Type               Description
---- ------------------ -----------------------------------------------------------------------
Grid array array double Array containing each band, each band is an array containing the errors

***************************************************************************************************************************

Command SetIonoGridGIVEIAll(grid, serviceProvider)
Permission: EXECUTE_IF_IDLE

Set GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.

Name            Type            Description
--------------- --------------- ----------------------------------------------------------------------
Grid            array array int Array containing each band, each band is an array containing the GIVEI
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command GetIonoGridGIVEIAll(serviceProvider)
Permission: EXECUTE_IF_IDLE

Get GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.

Name            Type            Description
--------------- --------------- -------------------------------
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Result GetIonoGridGIVEIAllResult(grid, serviceProvider)

Result of GetIonoGridGIVEIAll.

Name            Type            Description
--------------- --------------- ----------------------------------------------------------------------
Grid            array array int Array containing each band, each band is an array containing the GIVEI
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command SetIonoGridMask(serviceProvider, band, point, flag)
Permission: EXECUTE_IF_IDLE

Set the flag for a ionospheric grid point in the SBAS message 18 mask

Name            Type   Description
--------------- ------ -------------------------------
ServiceProvider string The service provider
Band            int    The ionospheric grid band index
Point           int    The IGP index
Flag            bool   Is the IGP monitored

***************************************************************************************************************************

Command GetIonoGridMask(serviceProvider, band, point)
Permission: EXECUTE_IF_IDLE

Get the flag for a ionospheric grid point in the SBAS message 18 mask

Name            Type   Description
--------------- ------ -------------------------------
ServiceProvider string The service provider
Band            int    The ionospheric grid band index
Point           int    The IGP index

***************************************************************************************************************************

Result GetIonoGridMaskResult(serviceProvider, band, point, flag)

Result of GetIonoGridMask.

Name            Type   Description
--------------- ------ -------------------------------
ServiceProvider string The service provider
Band            int    The ionospheric grid band index
Point           int    The IGP index
Flag            bool   Is the IGP monitored

***************************************************************************************************************************

Command SetIonoGridMaskAll(serviceProvider, grid)
Permission: EXECUTE_IF_IDLE

Set Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.

Name            Type             Description
--------------- ---------------- ----------------------------------------------------------------------
ServiceProvider string           The service provider
Grid            array array bool Array containing each band, each band is an array containing the flags

***************************************************************************************************************************

Command GetIonoGridMaskAll(serviceProvider)
Permission: EXECUTE_IF_IDLE

Get Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.

Name            Type   Description
--------------- ------ --------------------
ServiceProvider string The service provider

***************************************************************************************************************************

Result GetIonoGridMaskAllResult(serviceProvider, grid)

Result of GetIonoGridMaskAll.

Name            Type             Description
--------------- ---------------- ----------------------------------------------------------------------
ServiceProvider string           The service provider
Grid            array array bool Array containing each band, each band is an array containing the flags

***************************************************************************************************************************

Command ImportIonoGridErrors(overwriting, path)
Permission: EXECUTE_IF_IDLE

Import ionospheric grid errors.

Name        Type   Description
----------- ------ ------------------------------------
Overwriting bool   Overwrite the previous grid if true.
Path        string Grid file path

***************************************************************************************************************************

Command ImportIonoGridGIVEI(overwriting, path, serviceProvider)
Permission: EXECUTE_IF_IDLE

Import ionospheric grid GIVEI.

Name            Type            Description
--------------- --------------- ------------------------------------
Overwriting     bool            Overwrite the previous grid if true.
Path            string          Grid file path
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command ImportIonoGridMask(serviceProvider, overwriting, path)
Permission: EXECUTE_IF_IDLE

Import ionospheric grid mask for a giver service provider.

Name            Type   Description
--------------- ------ ------------------------------------
ServiceProvider string The service provider
Overwriting     bool   Overwrite the previous mask if true.
Path            string Grid file path

***************************************************************************************************************************

Command ExportIonoGridErrors(overwriting, path)
Permission: EXECUTE_IF_IDLE

Export ionospheric grid errors.

Name        Type   Description
----------- ------ -------------------------------
Overwriting bool   Overwrite the old file if true.
Path        string Grid file path

***************************************************************************************************************************

Command ExportIonoGridGIVEI(overwriting, path, serviceProvider)
Permission: EXECUTE_IF_IDLE

Export ionospheric grid GIVEI.

Name            Type            Description
--------------- --------------- -------------------------------
Overwriting     bool            Overwrite the old file if true.
Path            string          Grid file path
ServiceProvider optional string The service provider (optional)

***************************************************************************************************************************

Command ExportIonoGridMask(serviceProvider, overwriting, path)
Permission: EXECUTE_IF_IDLE

Export ionospheric grid mask for a given service provider.

Name            Type   Description
--------------- ------ -------------------------------
ServiceProvider string The service provider
Overwriting     bool   Overwrite the old file if true.
Path            string Grid file path

***************************************************************************************************************************

Command GetConfigPaths()
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get a list of paths for all the files in the Configurations folder.


***************************************************************************************************************************

Result GetConfigPathsResult(paths)

Result of GetConfigPaths.

Name  Type         Description
----- ------------ --------------------------------
Paths array string Paths of the configuration files

***************************************************************************************************************************

Command SetPps0GpsTime(gpsTime)
Permission: EXECUTE_IF_SIMULATING

Set the 0th PPS' date time

Name    Type     Description
------- -------- --------------------------------------------------------------
GpsTime datetime GPS date and time (it is the GPS time expressed in UTC format)

***************************************************************************************************************************

Command GetOfficialLeapSecond(date)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Returns the official leap second for a given date

Name Type     Description
---- -------- ------------------------------
Date datetime A date expressed in UTC format

***************************************************************************************************************************

Result GetOfficialLeapSecondResult(leapSecond)

Result of GetOfficialLeapSecond

Name       Type Description
---------- ---- -----------------
LeapSecond int  Leap second value

***************************************************************************************************************************

Command GetLastLeapSecondDate()
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Returns the last known leap second date


***************************************************************************************************************************

Result GetLastLeapSecondDateResult(date)

Result of GetLastLeapSecondDate.

Name Type Description
---- ---- ----------------
Date date Leap second date

***************************************************************************************************************************

Command SetWFAntennaGain(gain)
Permission: EXECUTE_IF_IDLE

Set The CRPA LNA gain

Name Type Description
---- ---- -----------------
Gain int  The CRPA LNA gain

***************************************************************************************************************************

Command GetWFAntennaGain()
Permission: EXECUTE_IF_IDLE

Get The CRPA LNA gain


***************************************************************************************************************************

Result GetWFAntennaGainResult(gain)

Result of GetWFAntennaGain.

Name Type Description
---- ---- -----------------
Gain int  The CRPA LNA gain

***************************************************************************************************************************

Command AddCustomSignal(path, id)
Permission: EXECUTE_IF_IDLE

Adds a custom signal

Name Type   Description
---- ------ ------------------------------------------------
Path string Path to the custom signal XML file
Id   string Unique identifier automatically set by simulator

***************************************************************************************************************************

Command RemoveCustomSignal(id)
Permission: EXECUTE_IF_IDLE

Removes the custom signal with the given ID

Name Type   Description
---- ------ ----------------
Id   string Custom signal ID

***************************************************************************************************************************

Command RemoveAllCustomSignals()
Permission: EXECUTE_IF_IDLE

Removes all the custom signals


***************************************************************************************************************************

Command ChangeCustomSignalColor(color, id)
Permission: EXECUTE_IF_IDLE

Changes the custom signal color

Name  Type   Description
----- ------ -------------------------------------------------------------------------------
Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
Id    string Custom signal ID

***************************************************************************************************************************

Command GetAllSpoofTxID()
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get the ID of all spoofer transmitters.


***************************************************************************************************************************

Result GetAllSpoofTxIDResult(ids)

Result of GetAllSpoofTxID.

Name Type         Description
---- ------------ ------------------------------------
Ids  array string ID list of all spoofer transmitters.

***************************************************************************************************************************

Command AddSpoofTx(usualName, enabled, address, instanceId, id)
Permission: EXECUTE_IF_IDLE

Set a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
command will fail.

Name       Type   Description
---------- ------ ------------------------------------------------
UsualName  string Usual name for the transmitter.
Enabled    bool   Enable (true) or disable (false) the transmitter
Address    string Remote instance IP address.
InstanceId int    Remote instance ID.
Id         string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTx(id)
Permission: EXECUTE_IF_IDLE

Get a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
command will fail.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxResult(usualName, enabled, address, instanceId, id)

Result of GetSpoofTx.

Name       Type   Description
---------- ------ ------------------------------------------------
UsualName  string Usual name for the transmitter.
Enabled    bool   Enable (true) or disable (false) the transmitter
Address    string Remote instance IP address.
InstanceId int    Remote instance ID.
Id         string Transmitter unique identifier.

***************************************************************************************************************************

Command RemoveSpoofTx(id)
Permission: EXECUTE_IF_IDLE

Removes the spoofer transmitter. See EnableSpoofTx if all you want is to
disable the interference temporarily.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command RenameSpoofTx(usualName, id)
Permission: EXECUTE_IF_IDLE

Rename a spoofer.

Name      Type   Description
--------- ------ -------------------------------
UsualName string Usual name for the transmitter.
Id        string Transmitter unique identifier.

***************************************************************************************************************************

Command ChangeSpoofTxColor(color, id)
Permission: EXECUTE_IF_IDLE

Set a spoofer color in spectrums

Name  Type   Description
----- ------ -------------------------------------------------------------------------------
Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxColor(id)
Permission: EXECUTE_IF_IDLE

Get a spoofer color in spectrums

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxColorResult(color, id)

Result of GetSpoofTxColor.

Name  Type   Description
----- ------ -------------------------------------------------------------------------------
Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command EnableSpoofTx(enabled, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Enable/Disable the spoofer.

Name    Type   Description
------- ------ ------------------------------------------------
Enabled bool   Enable (true) or disable (false) the transmitter
Id      string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofSignalManualPropagationLoss(propagationLoss, transmitterId, signalId)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set the manual propagation loss for the given spoofer signal. Value is used only if SetSpoofTxUseManualPropagationLoss has been set on the corresponding spoofer. This value is not preserved after simulation end.

Name            Type   Description
--------------- ------ --------------------------------------------------------------------------------------------------------
PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
TransmitterId   string Transmitter unique identifier.
SignalId        string Signal unique identifier.

***************************************************************************************************************************

Command SetSpoofTxUseManualPropagationLoss(manual, id)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Set whether a spoofer should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.

Name   Type   Description
------ ------ -------------------------------------------------------------
Manual bool   If true, propagation loss will be 1000 dB until set manually.
Id     string Spoofing transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxIgnorePropagationLoss(ignore, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set whether a spoofer should ignore propagation loss or not.

Name   Type   Description
------ ------ ------------------------------------------
Ignore bool   If true, propagation loss will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxIgnoreRxAntennaPatterns(ignore, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set whether a spoofer should ignore the receiver's antenna patterns (gain and phase).

Name   Type   Description
------ ------ --------------------------------------------------------------------------
Ignore bool   If true, the receiver's antenna patterns (gain and phase) will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxIgnoreRxAntennaGainPattern(ignore, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set whether a spoofer should ignore the receiver's antenna gain pattern.

Name   Type   Description
------ ------ -------------------------------------------------------------
Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command IsSpoofTxIgnoreRxAntennaGainPattern(id)
Permission: EXECUTE_IF_IDLE

Get whether a spoofer ignore the receiver's antenna gain pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsSpoofTxIgnoreRxAntennaGainPatternResult(ignore, id)

Result of IsSpoofTxIgnoreRxAntennaGainPattern.

Name   Type   Description
------ ------ -------------------------------------------------------------
Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxIgnoreRxAntennaPhasePattern(ignore, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set whether a spoofer should ignore the receiver's antenna phase pattern.

Name   Type   Description
------ ------ --------------------------------------------------------------
Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command IsSpoofTxIgnoreRxAntennaPhasePattern(id)
Permission: EXECUTE_IF_IDLE

Get whether a spoofer ignore the receiver's antenna phase pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result IsSpoofTxIgnoreRxAntennaPhasePatternResult(ignore, id)

Result of IsSpoofTxIgnoreRxAntennaPhasePattern.

Name   Type   Description
------ ------ --------------------------------------------------------------
Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
Id     string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxFix(lat, lon, alt, yaw, pitch, roll, id)
Permission: EXECUTE_IF_IDLE

Set spoofer transmitter static position and orientation

Name  Type   Description
----- ------ ------------------------------
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxFix(id)
Permission: EXECUTE_IF_IDLE

Get spoofer transmitter static position and orientation

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxFixResult(lat, lon, alt, yaw, pitch, roll, id)

Result of GetSpoofTxFix.

Name  Type   Description
----- ------ ------------------------------
Lat   double Latitude (rad)
Lon   double Longitude (rad)
Alt   double Altitude (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxFixEcef(x, y, z, yaw, pitch, roll, id)
Permission: EXECUTE_IF_IDLE

Set spoofer transmitter static position and orientation

Name  Type   Description
----- ------ ------------------------------
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxFixEcef(id)
Permission: EXECUTE_IF_IDLE

Get spoofer transmitter static position and orientation

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxFixEcefResult(x, y, z, yaw, pitch, roll, id)

Result of GetSpoofTxFixEcef.

Name  Type   Description
----- ------ ------------------------------
X     double ECEF X (m)
Y     double ECEF Y (m)
Z     double ECEF Z (m)
Yaw   double Yaw (rad)
Pitch double Pitch (rad)
Roll  double Roll (rad)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxCircular(lat, lon, alt, radius, speed, clockwise, id, originAngle)
Permission: EXECUTE_IF_IDLE

Set spoofer transmitter circular trajectory

Name        Type            Description
----------- --------------- --------------------------------
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
Id          string          Transmitter unique identifier.
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command GetSpoofTxCircular(id)
Permission: EXECUTE_IF_IDLE

Get spoofer transmitter circular trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxCircularResult(lat, lon, alt, radius, speed, clockwise, id, originAngle)

Result of GetSpoofTxCircular.

Name        Type            Description
----------- --------------- --------------------------------
Lat         double          Center latitude (rad)
Lon         double          Center longitude (rad)
Alt         double          Altitude (m)
Radius      double          Radius (m)
Speed       double          Speed (m/s)
Clockwise   bool            If true, vehicle turns clockwise
Id          string          Transmitter unique identifier.
OriginAngle optional double Vehicle angle at elapsed time 0.

***************************************************************************************************************************

Command SetSpoofTxHil(id)
Permission: EXECUTE_IF_IDLE

Set spoofer transmitter HIL trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxTrajectory(id)
Permission: EXECUTE_IF_IDLE

Get spoofer transmitter trajectory

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxTrajectoryResult(trajectoryType, id)

Result of GetSpoofTxTrajectory.

Name           Type   Description
-------------- ------ ---------------------------------------------------
TrajectoryType string Type of the trajectory of the spoofer transmitters.
Id             string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxAntenna(gain, type, id)
Permission: EXECUTE_IF_IDLE

Set transmitter antenna pattern.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Id   string             Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxAntenna(id)
Permission: EXECUTE_IF_IDLE

Get transmitter antenna pattern.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxAntennaResult(gain, type, id)

Result of GetSpoofTxAntenna.

Name Type               Description
---- ------------------ -------------------------------------------------------------------------------------------------------------------------
Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
Type AntennaPatternType Pattern type
Id   string             Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxAntennaOffset(x, y, z, yaw, pitch, roll, id)
Permission: EXECUTE_IF_IDLE

Set antenna offset and orientation relative to body frame.
The origin of the body frame follows the transmitter trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name  Type   Description
----- ------ --------------------------------------
X     double Antenna X offset in the body frame
Y     double Antenna Y offset in the body frame
Z     double Antenna Z offset in the body frame
Yaw   double Antenna Yaw offset in the body frame
Pitch double Antenna Pitch offset in the body frame
Roll  double Antenna Roll offset in the body frame
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxAntennaOffset(id)
Permission: EXECUTE_IF_IDLE

Get antenna offset and orientation relative to body frame.
The origin of the body frame follows the transmitter trajectory.
When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
                         Y-axis is pointing east
                         Z-axis is pointing down
The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
the Roll is rotating arond the X-axis of the body frame.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxAntennaOffsetResult(x, y, z, yaw, pitch, roll, id)

Result of GetSpoofTxAntennaOffset.

Name  Type   Description
----- ------ --------------------------------------
X     double Antenna X offset in the body frame
Y     double Antenna Y offset in the body frame
Z     double Antenna Z offset in the body frame
Yaw   double Antenna Yaw offset in the body frame
Pitch double Antenna Pitch offset in the body frame
Roll  double Antenna Roll offset in the body frame
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxRemoteAddress(address, instanceId, id)
Permission: EXECUTE_IF_IDLE

Set the address of the spoofer instance that will
generate the signal for this spoofer transmitter.

Name       Type   Description
---------- ------ ------------------------------
Address    string Remote instance IP address.
InstanceId int    Remote instance ID.
Id         string Transmitter unique identifier.

***************************************************************************************************************************

Command GetSpoofTxRemoteAddress(id)
Permission: EXECUTE_IF_IDLE

Get the address of the spoofer instance that will
generate the signal for this spoofer transmitter.

Name Type   Description
---- ------ ------------------------------
Id   string Transmitter unique identifier.

***************************************************************************************************************************

Result GetSpoofTxRemoteAddressResult(address, instanceId, id)

Result of GetSpoofTxRemoteAddress.

Name       Type   Description
---------- ------ ------------------------------
Address    string Remote instance IP address.
InstanceId int    Remote instance ID.
Id         string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxRefPower(power, id)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set the spoofing transmitter reference power.

Name  Type   Description
----- ------ ------------------------------
Power double Reference Power (dBm)
Id    string Transmitter unique identifier.

***************************************************************************************************************************

Command ClearSpoofTxGpuIdx(signalId, id)
Permission: EXECUTE_IF_IDLE

Reset the spoofer's signal GPU index to default.

Name     Type   Description
-------- ------ -------------------------------
SignalId int    Spoofer output number, 0-based.
Id       string Transmitter unique identifier.

***************************************************************************************************************************

Command SetSpoofTxGpuIdx(gpuIdx, signalId, id)
Permission: EXECUTE_IF_IDLE

Set the GPU index on which this spoofer signal will be modulated.

Name     Type   Description
-------- ------ -------------------------------
GpuIdx   int    The GPU index.
SignalId int    Spoofer output number, 0-based.
Id       string Transmitter unique identifier.

***************************************************************************************************************************

Command SetExternalChannelsPath(path)
Permission: EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE

Set external channels path.

Name Type   Description
---- ------ -----------------------------
Path string Path to the sdxpand directory

***************************************************************************************************************************

Command GetSVIDsOfPrn(signal, prn)
Permission: EXECUTE_IF_IDLE

Mapping PRN to the corresponding SV ID. Get a list of SV IDs based on a specific signal. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L5", "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS", "B1", "B2", "B2a", "B1C", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"

Name   Type   Description
------ ------ ----------------------------------------------------------------------
Signal string Signal key - see GetSVIDsOfPrn command description for possible values
Prn    int    Satellite PRN number

***************************************************************************************************************************

Result GetSVIDsOfPrnResult(signal, prn, svIdList)

Result of GetSVIDsOfPrn.

Name     Type      Description
-------- --------- ----------------------------------------------------------------------
Signal   string    Signal key - see GetSVIDsOfPrn command description for possible values
Prn      int       Satellite PRN number
SvIdList array int A list containing all SV ID of a specific signal

***************************************************************************************************************************

Command SetQzssL1SAugmentation(system, prn, augmentIOD, augmentPRC, prc, id)
Permission: EXECUTE_IF_IDLE

Set Add an augmentation to the L1S navigation messages.

Name       Type   Description
---------- ------ ----------------------------------------------------------------------------------
System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
Prn        int    Satellite PRN number.
AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
Id         string Unique identifier of the augmentation.

***************************************************************************************************************************

Command GetQzssL1SAugmentation(id)
Permission: EXECUTE_IF_IDLE

Get Add an augmentation to the L1S navigation messages.

Name Type   Description
---- ------ --------------------------------------
Id   string Unique identifier of the augmentation.

***************************************************************************************************************************

Result GetQzssL1SAugmentationResult(system, prn, augmentIOD, augmentPRC, prc, id)

Result of GetQzssL1SAugmentation.

Name       Type   Description
---------- ------ ----------------------------------------------------------------------------------
System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
Prn        int    Satellite PRN number.
AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
Id         string Unique identifier of the augmentation.

***************************************************************************************************************************

Command RemoveQzssL1SAugmentation(id)
Permission: EXECUTE_IF_IDLE

Removes a QZSS L1S augmentation.

Name Type   Description
---- ------ ----------------------------------------------
Id   string Unique identifier (see SetQzssL1SAugmentation)

***************************************************************************************************************************

Command ClearQzssL1SAugmentations()
Permission: EXECUTE_IF_IDLE

Clears all QZSS L1S augmentations.


***************************************************************************************************************************

Command GetQzssL1SAugmentations()
Permission: EXECUTE_IF_IDLE

Get all QZSS L1S augmentation's IDs.


***************************************************************************************************************************

Result GetQzssL1SAugmentationsResult(ids)

Result of GetQzssL1SAugmentations.

Name Type         Description
---- ------------ --------------------------------------
Ids  array string List of IDs of QZSS L1S augmentations.

***************************************************************************************************************************

Command SetWavefrontJamCalibrationState(state)
Permission: EXECUTE_IF_SIMULATING

Set whether the JAM Calibration output is transmitting.

Name  Type Description
----- ---- ------------------------------------------------------------------------------
State bool True for the signal to go through the JAM Calibration output, False otherwise.

***************************************************************************************************************************

Command AddDataSet(system, path, rollover, dataSetName)
Permission: EXECUTE_IF_IDLE

Add a new data set for the specified constellation. This could come from a Rinex, SEM or YUMA file for GPS. Only Rinex for the others.

Name        Type            Description
----------- --------------- --------------------------------------------------------------------------------------------------------------------
System      string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
Path        string          Data set file path
Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file.

***************************************************************************************************************************

Command SetDataSetAssignation(system, dataSetType, dataSetName)
Permission: EXECUTE_IF_IDLE

Set data set assignation for the specified constellation.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetType string "Almanac", "Ephemeris" or "Orbit"
DataSetName string The name of the assigned data set.

***************************************************************************************************************************

Command GetDataSetAssignation(system, dataSetType)
Permission: EXECUTE_IF_IDLE

Get data set assignation for the specified constellation.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetType string "Almanac", "Ephemeris" or "Orbit"

***************************************************************************************************************************

Result GetDataSetAssignationResult(system, dataSetType, dataSetName)

Result of GetDataSetAssignation.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetType string "Almanac", "Ephemeris" or "Orbit"
DataSetName string The name of the assigned data set.

***************************************************************************************************************************

Command RenameDataSet(system, dataSetName, newDataSetName)
Permission: EXECUTE_IF_IDLE

Rename data set.

Name           Type   Description
-------------- ------ ---------------------------------------------
System         string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetName    string The name of the data set to rename.
NewDataSetName string The new name to be given to the data set.

***************************************************************************************************************************

Command DeleteDataSet(system, dataSetName)
Permission: EXECUTE_IF_IDLE

Delete data set.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetName string The name of the data set to delete.

***************************************************************************************************************************

Command SetActiveDataSet(system, dataSetName)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Set active data set.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetName string The name of the data set to set as active.

***************************************************************************************************************************

Command GetActiveDataSet(system)
Permission: EXECUTE_IF_IDLE

Get active data set.

Name   Type   Description
------ ------ ---------------------------------------------
System string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"

***************************************************************************************************************************

Result GetActiveDataSetResult(system, dataSetName)

Result of GetActiveDataSet.

Name        Type   Description
----------- ------ ---------------------------------------------
System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetName string The name of the data set to set as active.

***************************************************************************************************************************

Command DuplicateDataSet(system, dataSetName, newDataSetName)
Permission: EXECUTE_IF_IDLE

Duplicate an existing data set.

Name           Type            Description
-------------- --------------- ----------------------------------------------------------------------------------
System         string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
DataSetName    string          The name of the data set to duplicate.
NewDataSetName optional string The name of the new duplicate data set. If omitted, a copy name will be generated.

***************************************************************************************************************************

Data ElevationAzimuth(elevation, azimuth)

Elevation and Azimuth angular position.

Name      Type   Description
--------- ------ ----------------
Elevation double Elevation angle.
Azimuth   double Azimuth angle.

***************************************************************************************************************************

Command GetElevationAzimuthForEachSV(system)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get elevation and azimuth position angles for all satellites.

Name   Type   Description
------ ------ -----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".

***************************************************************************************************************************

Result GetElevationAzimuthForEachSVResult(system, elevationAzimuths)

Result of GetElevationAzimuthForEachSV.

Name              Type                            Description
----------------- ------------------------------- -----------------------------------------------------------------
System            string                          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
ElevationAzimuths array optional ElevationAzimuth Elevation and Azimuth position angles of the satellites.

***************************************************************************************************************************

Command GetElevationAzimuthForSV(system, svId)
Permission: EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING

Get elevation and azimuth position angles for satellite.

Name   Type   Description
------ ------ -----------------------------------------------------------------
System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
SvId   int    Satellite's SV ID.

***************************************************************************************************************************

Result GetElevationAzimuthForSVResult(system, svId, elevationAzimuth)

Result of GetElevationAzimuthForSV.

Name             Type                      Description
---------------- ------------------------- -----------------------------------------------------------------
System           string                    "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
SvId             int                       Satellite's SV ID.
ElevationAzimuth optional ElevationAzimuth Elevation and Azimuth position angles of the satellite.

***************************************************************************************************************************

Data SbasServiceMessageRegion(firstLatitude, firstLongitude, secondLatitude, secondLongitude, shape)

SBAS service message region.

Name            Type   Description
--------------- ------ -------------------------------------------------
FirstLatitude   int    First latitude (deg).
FirstLongitude  int    First longitude (deg).
SecondLatitude  int    Second latitude (deg).
SecondLongitude int    Second longitude (deg).
Shape           string Region shape, accepts "Triangle" and "Rectangle".

***************************************************************************************************************************

Command SetSbasServiceMessageRegionGroup(serviceProvider, deltaUdrei, priorityCode, regions, id)
Permission: EXECUTE_IF_IDLE

Set (or Modify) a SBAS service message region group.

Name            Type                           Description
--------------- ------------------------------ ---------------------------------------------------------------------------------
ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
Id              string                         Unique identifier of the SBAS service message region group.

***************************************************************************************************************************

Command GetSbasServiceMessageRegionGroup(serviceProvider, id)
Permission: EXECUTE_IF_IDLE

Get infos about the SBAS service message region group at this index.

Name            Type   Description
--------------- ------ -----------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
Id              string Unique identifier of the SBAS service message region group.

***************************************************************************************************************************

Result GetSbasServiceMessageRegionGroupResult(serviceProvider, deltaUdrei, priorityCode, regions, id)

Result of GetSbasServiceMessageRegionGroup.

Name            Type                           Description
--------------- ------------------------------ ---------------------------------------------------------------------------------
ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
Id              string                         Unique identifier of the SBAS service message region group.

***************************************************************************************************************************

Command SetSbasDeltaUdreiOutsideOfRegions(serviceProvider, deltaUdrei)
Permission: EXECUTE_IF_IDLE

Set SBAS delta UDREI outside all the defined regions for this service provider.

Name            Type   Description
--------------- ------ ----------------------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].

***************************************************************************************************************************

Command GetSbasDeltaUdreiOutsideOfRegions(serviceProvider)
Permission: EXECUTE_IF_IDLE

Get SBAS delta UDREI outside all the defined regions for this service provider.

Name            Type   Description
--------------- ------ -----------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".

***************************************************************************************************************************

Result GetSbasDeltaUdreiOutsideOfRegionsResult(serviceProvider, deltaUdrei)

Result of GetSbasDeltaUdreiOutsideOfRegions.

Name            Type   Description
--------------- ------ ----------------------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].

***************************************************************************************************************************

Command RemoveSbasServiceMessageRegionGroup(serviceProvider, id)
Permission: EXECUTE_IF_IDLE

Removes a SBAS service message region group for the service provider.

Name            Type   Description
--------------- ------ -----------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
Id              string Unique identifier of the SBAS service message region group to remove.

***************************************************************************************************************************

Command ClearAllSbasServiceMessageRegionGroup(serviceProvider)
Permission: EXECUTE_IF_IDLE

Clears all SBAS service message region group for this service provider.

Name            Type   Description
--------------- ------ -----------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".

***************************************************************************************************************************

Command SwapSbasServiceMessageRegionGroup(serviceProvider, firstId, secondId)
Permission: EXECUTE_IF_IDLE

Swaps 2 SBAS service message region group.

Name            Type   Description
--------------- ------ ---------------------------------------------------------------------------------
ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
FirstId         string Unique identifier of the SBAS service message region group to swap with SecondId.
SecondId        string Unique identifier of the SBAS service message region group to swap with FirstId.

***************************************************************************************************************************

Data StringPair(first, second)

A pair of string

Name   Type   Description
------ ------ ---------------------
First  string First string in pair
Second string Second string in pair

***************************************************************************************************************************

Command SetSbasHealthRanging(prn, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetSbasHealthRanging is deprecated since 21.9. You may use SetSbasSVRangingHealth.

Apply ranging flag for a SBAS satellite

Name   Type Description
------ ---- --------------------------
Prn    int  The satellite's PRN number
Health bool The ranging unhealthy flag

***************************************************************************************************************************

Command SetSbasHealthCorrections(prn, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetSbasHealthCorrections is deprecated since 21.9. You may use SetSbasSVCorrectionsHealth.

Apply correction flag for a SBAS satellite

Name   Type Description
------ ---- -----------------------------
Prn    int  The satellite's PRN number
Health bool The correction unhealthy flag

***************************************************************************************************************************

Command SetSbasHealthIntegrity(prn, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetSbasHealthIntegrity is deprecated since 21.9. You may use SetSbasSVIntegrityHealth.

Apply integrity flag for a SBAS satellite

Name   Type Description
------ ---- ----------------------------
Prn    int  The satellite's PRN number
Health bool The integrity unhealthy flag

***************************************************************************************************************************

Command SetSbasHealthReserved(prn, health)
Permission: EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE

Please note the command SetSbasHealthReserved is deprecated since 21.9. You may use SetSbasSVReservedHealth.

Apply reserved flag for a SBAS satellite

Name   Type Description
------ ---- ---------------------------
Prn    int  The satellite's PRN number
Health bool The reserved unhealthy flag

***************************************************************************************************************************

Command SetSbasHealthService(prn, health)
Permission: EXECUTE_IF_IDLE

Please note the command SetSbasHealthService is deprecated since 21.9. You may use SetSbasSVServiceHealth.

Apply service provider for a satellite

Name   Type Description
------ ---- --------------------------
Prn    int  The satellite's PRN number
Health int  The service provider

***************************************************************************************************************************

Command SetSbasUdrei(udrei)
Permission: EXECUTE_IF_IDLE

Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV.

Set the global UDREI value transmitted by SBAS

Name  Type Description
----- ---- ---------------
Udrei int  The UDREI value

***************************************************************************************************************************

Command GetSbasUdrei()
Permission: EXECUTE_IF_IDLE

Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV.

Get the global UDREI value transmitted by SBAS


***************************************************************************************************************************

Result GetSbasUdreiResult(udrei)

Result of GetSbasUdrei.

Name  Type Description
----- ---- ---------------
Udrei int  The UDREI value

