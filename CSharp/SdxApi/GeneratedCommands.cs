using System;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
namespace Sdx.Cmd
{

  public static class ApiInfo
  {
    public const int COMMANDS_API_VERSION = 39;
  }

  ///
  /// The GPS AS flag value.
  ///
  
  public enum GpsASFlag { On, Off, Auto }


  ///
  /// The simulator state.
  ///
  
  public enum SimulatorState { StateNone, StateIdle, StateStarted, StateError }


  ///
  /// The simulator sub-state.
  ///
  
  public enum SimulatorSubState { SubStateNone, Idle_ConfigNotValid, Idle_ConfigValid, Started_InitPlugins, Started_InitHardware, Started_Streaming, Started_SyncInit, Started_SlaveSync, Started_Armed, Started_SyncStartTime, Error, Started_HILSync, Started_SyncPPSReset, Started_SyncStart, Started_WFSlaveInit, Started_WFMasterInit, Started_WFSyncPPSReset, Started_WFSyncStart }


  ///
  /// The Parity scheme used by a serial port.
  ///
  
  public enum SerialPortParity { NoParity, Even, Odd, Space, Mark }


  ///
  /// The flow control used by a serial port.
  ///
  
  public enum SerialPortFlowControl { NoFlowControl, Hardware, Software }


  ///
  /// When command succeed.
  ///
  /// 
  ///

  public class SuccessResult : CommandResult
  {
    public override string Documentation
    {
      get { return "When command succeed."; }
    }

    internal const string CmdName = "SuccessResult";

    public SuccessResult()
      : base(CmdName)
    {}

    public SuccessResult(CommandBase relatedCommand)
      : base(CmdName, relatedCommand)
    {
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }
  }


  ///
  /// When command failed
  ///
  /// Name     Type   Description
  /// -------- ------ -------------
  /// ErrorMsg string Error message
  ///

  public class FailureResult : CommandResult
  {
    public override string Documentation
    {
      get { return "When command failed"; }
    }

    internal const string CmdName = "FailureResult";

    public FailureResult()
      : base(CmdName)
    {}

    public FailureResult(CommandBase relatedCommand, string errorMsg)
      : base(CmdName, relatedCommand)
    {
      ErrorMsg = errorMsg;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ErrorMsg")
      ;
      }
    }

    public override bool IsSuccess { get { return false; } }

    public override string ErrorMsg
    {
      get { return GetValue("ErrorMsg").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ErrorMsg", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Undo the last command like Ctrl+Z in the UI
  ///
  /// 
  ///

  public class UndoCmd : CommandBase
  {
    public override string Documentation
    {
      get { return "Undo the last command like Ctrl+Z in the UI"; }
    }

    internal const string CmdName = "UndoCmd";

    public UndoCmd()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Redo the last undone command like Ctrl+Shift+Z in the UI
  ///
  /// 
  ///

  public class RedoCmd : CommandBase
  {
    public override string Documentation
    {
      get { return "Redo the last undone command like Ctrl+Shift+Z in the UI"; }
    }

    internal const string CmdName = "RedoCmd";

    public RedoCmd()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Get Skydel's Data Folder. The user can changed it in the GUI's Preferences.
  ///
  /// 
  ///

  public class GetDataFolder : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Skydel's Data Folder. The user can changed it in the GUI's Preferences."; }
    }

    internal const string CmdName = "GetDataFolder";

    public GetDataFolder()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetDataFolder.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------
  /// Folder string Skydel Data Folder
  ///

  public class DataFolderResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetDataFolder."; }
    }

    internal const string CmdName = "DataFolderResult";

    public DataFolderResult()
      : base(CmdName)
    {}

    public DataFolderResult(CommandBase relatedCommand, string folder)
      : base(CmdName, relatedCommand)
    {
      Folder = folder;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Folder")
      ;
      }
    }

    public string Folder
    {
      get { return GetValue("Folder").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Folder", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Skydel version.
  ///
  /// 
  ///

  public class GetVersion : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Skydel version."; }
    }

    internal const string CmdName = "GetVersion";

    public GetVersion()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetVersion.
  ///
  /// Name    Type   Description
  /// ------- ------ --------------
  /// Version string Skydel version
  ///

  public class VersionResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVersion."; }
    }

    internal const string CmdName = "VersionResult";

    public VersionResult()
      : base(CmdName)
    {}

    public VersionResult(CommandBase relatedCommand, string version)
      : base(CmdName, relatedCommand)
    {
      Version = version;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Version")
      ;
      }
    }

    public string Version
    {
      get { return GetValue("Version").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Version", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get simulation elapsed time in milliseconds.
  ///
  /// 
  ///

  public class GetSimulationElapsedTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Get simulation elapsed time in milliseconds."; }
    }

    internal const string CmdName = "GetSimulationElapsedTime";

    public GetSimulationElapsedTime()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetSimulationElapsedTime.
  ///
  /// Name         Type Description
  /// ------------ ---- -----------------------------------------------------------------------------
  /// Milliseconds int  Simulation elapsed time in milliseconds. Note: Resolution is limited to 10Hz.
  ///

  public class SimulationElapsedTimeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSimulationElapsedTime."; }
    }

    internal const string CmdName = "SimulationElapsedTimeResult";

    public SimulationElapsedTimeResult()
      : base(CmdName)
    {}

    public SimulationElapsedTimeResult(CommandBase relatedCommand, int milliseconds)
      : base(CmdName, relatedCommand)
    {
      Milliseconds = milliseconds;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Milliseconds")
      ;
      }
    }

    public int Milliseconds
    {
      get { return GetValue("Milliseconds").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Milliseconds", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Create a new configuration.
  ///
  /// Name                 Type          Description
  /// -------------------- ------------- ----------------------------------------------
  /// DiscardCurrentConfig bool          Discard current config even if it is not saved
  /// LoadDefaultConfig    optional bool Apply the default configuration
  ///

  public class New : CommandBase
  {
    public override string Documentation
    {
      get { return "Create a new configuration."; }
    }

    internal const string CmdName = "New";

    public New()
      : base(CmdName)
    {}

    public New(bool discardCurrentConfig, bool? loadDefaultConfig = null)
      : base(CmdName)
    {
      DiscardCurrentConfig = discardCurrentConfig;
      LoadDefaultConfig = loadDefaultConfig;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("DiscardCurrentConfig")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public bool DiscardCurrentConfig
    {
      get { return GetValue("DiscardCurrentConfig").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("DiscardCurrentConfig", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? LoadDefaultConfig
    {
      get { return GetValue("LoadDefaultConfig").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("LoadDefaultConfig");
        else
          SetValue("LoadDefaultConfig", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Save configuration with new name.
  ///
  /// Name      Type   Description
  /// --------- ------ ---------------------------------------------------------------------------------------------------------
  /// Path      string Configuration path. Automatically add file suffix if missing. If folder not defined, user default folder.
  /// Overwrite bool   Overwrite existing configuration if is exists
  ///

  public class SaveAs : CommandBase
  {
    public override string Documentation
    {
      get { return "Save configuration with new name."; }
    }

    internal const string CmdName = "SaveAs";

    public SaveAs()
      : base(CmdName)
    {}

    public SaveAs(string path, bool overwrite)
      : base(CmdName)
    {
      Path = path;
      Overwrite = overwrite;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Overwrite")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwrite
    {
      get { return GetValue("Overwrite").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwrite", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Save configuration.
  ///
  /// 
  ///

  public class Save : CommandBase
  {
    public override string Documentation
    {
      get { return "Save configuration."; }
    }

    internal const string CmdName = "Save";

    public Save()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Open configuration.
  ///
  /// Name                 Type   Description
  /// -------------------- ------ ----------------------------------------------------------------------------------------------------
  /// Path                 string Filename path, Automatically add file suffix if missing. If folder not defined, user default folder.
  /// DiscardCurrentConfig bool   Discard current config even if it is not saved
  ///

  public class Open : CommandBase
  {
    public override string Documentation
    {
      get { return "Open configuration."; }
    }

    internal const string CmdName = "Open";

    public Open()
      : base(CmdName)
    {}

    public Open(string path, bool discardCurrentConfig)
      : base(CmdName)
    {
      Path = path;
      DiscardCurrentConfig = discardCurrentConfig;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("DiscardCurrentConfig")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool DiscardCurrentConfig
    {
      get { return GetValue("DiscardCurrentConfig").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("DiscardCurrentConfig", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set current configuration as default configuration.
  ///
  /// 
  ///

  public class SetDefaultConfiguration : CommandBase
  {
    public override string Documentation
    {
      get { return "Set current configuration as default configuration."; }
    }

    internal const string CmdName = "SetDefaultConfiguration";

    public SetDefaultConfiguration()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Reset the default configuration.
  ///
  /// 
  ///

  public class ResetDefaultConfiguration : CommandBase
  {
    public override string Documentation
    {
      get { return "Reset the default configuration."; }
    }

    internal const string CmdName = "ResetDefaultConfiguration";

    public ResetDefaultConfiguration()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Clear automate page.
  ///
  /// 
  ///

  public class ClearAutomatePage : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear automate page."; }
    }

    internal const string CmdName = "ClearAutomatePage";

    public ClearAutomatePage()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Start the simulation. Simulation may or may not start depending on the current state of the simulator.
  ///
  /// 
  ///

  public class Start : CommandBase
  {
    public override string Documentation
    {
      get { return "Start the simulation. Simulation may or may not start depending on the current state of the simulator."; }
    }

    internal const string CmdName = "Start";

    public Start()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Arm the simulation. Simulation may or may not arm depending on the current state of the simulator.
  ///
  /// 
  ///

  public class Arm : CommandBase
  {
    public override string Documentation
    {
      get { return "Arm the simulation. Simulation may or may not arm depending on the current state of the simulator."; }
    }

    internal const string CmdName = "Arm";

    public Arm()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Pause vehicle motion during simulation.
  ///
  /// 
  ///

  public class Pause : CommandBase
  {
    public override string Documentation
    {
      get { return "Pause vehicle motion during simulation."; }
    }

    internal const string CmdName = "Pause";

    public Pause()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Resume vehicle motion during simulation.
  ///
  /// 
  ///

  public class Resume : CommandBase
  {
    public override string Documentation
    {
      get { return "Resume vehicle motion during simulation."; }
    }

    internal const string CmdName = "Resume";

    public Resume()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Stop the simulation.
  ///
  /// 
  ///

  public class Stop : CommandBase
  {
    public override string Documentation
    {
      get { return "Stop the simulation."; }
    }

    internal const string CmdName = "Stop";

    public Stop()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Quit/Exit Skydel. Simulation must be stopped to be able to quit Skydel
  ///
  /// Name      Type Description
  /// --------- ---- --------------------------------------------------------
  /// ForceQuit bool Force to quit Skydel even if current config is not saved
  ///

  public class Quit : CommandBase
  {
    public override string Documentation
    {
      get { return "Quit/Exit Skydel. Simulation must be stopped to be able to quit Skydel"; }
    }

    internal const string CmdName = "Quit";

    public Quit()
      : base(CmdName)
    {}

    public Quit(bool forceQuit)
      : base(CmdName)
    {
      ForceQuit = forceQuit;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ForceQuit")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public bool ForceQuit
    {
      get { return GetValue("ForceQuit").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("ForceQuit", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Prevent GUI updates while modify the configuration. Use UnlockGUI when done with
  /// configuration modifications.
  ///
  /// 
  ///

  public class LockGUI : CommandBase
  {
    public override string Documentation
    {
      get { return "Prevent GUI updates while modify the configuration. Use UnlockGUI when done with\nconfiguration modifications."; }
    }

    internal const string CmdName = "LockGUI";

    public LockGUI()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Resume GUI updates and force one update immediately.
  ///
  /// 
  ///

  public class UnlockGUI : CommandBase
  {
    public override string Documentation
    {
      get { return "Resume GUI updates and force one update immediately."; }
    }

    internal const string CmdName = "UnlockGUI";

    public UnlockGUI()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Enable (or disable) RF output for specified satellite. Use SV ID 0 to enabled/disable all satellites.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID
  /// Enabled bool   RF is enabled when value is True
  ///

  public class EnableRFOutputForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) RF output for specified satellite. Use SV ID 0 to enabled/disable all satellites."; }
    }

    internal const string CmdName = "EnableRFOutputForSV";

    public EnableRFOutputForSV()
      : base(CmdName)
    {}

    public EnableRFOutputForSV(string system, int svId, bool enabled)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the RF output is enabled or disabled for the specified satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID
  ///

  public class IsRFOutputEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the RF output is enabled or disabled for the specified satellite."; }
    }

    internal const string CmdName = "IsRFOutputEnabled";

    public IsRFOutputEnabled()
      : base(CmdName)
    {}

    public IsRFOutputEnabled(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsRFOutputEnabled.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID
  /// Enabled bool   RF is enabled when value is True
  ///

  public class IsRFOutputEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsRFOutputEnabled."; }
    }

    internal const string CmdName = "IsRFOutputEnabledResult";

    public IsRFOutputEnabledResult()
      : base(CmdName)
    {}

    public IsRFOutputEnabledResult(CommandBase relatedCommand, string system, int svId, bool enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) RF output for each satellite individually.
  ///
  /// Name    Type       Description
  /// ------- ---------- -------------------------------------------------------------------------------------------------
  /// System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).
  ///

  public class EnableRFOutputForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) RF output for each satellite individually."; }
    }

    internal const string CmdName = "EnableRFOutputForEachSV";

    public EnableRFOutputForEachSV()
      : base(CmdName)
    {}

    public EnableRFOutputForEachSV(string system, List<bool> enabled)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the RF output is enabled or disabled for each satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class IsRFOutputEnabledForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the RF output is enabled or disabled for each satellite."; }
    }

    internal const string CmdName = "IsRFOutputEnabledForEachSV";

    public IsRFOutputEnabledForEachSV()
      : base(CmdName)
    {}

    public IsRFOutputEnabledForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsRFOutputEnabledForEachSV.
  ///
  /// Name    Type       Description
  /// ------- ---------- -------------------------------------------------------------------------------------------------
  /// System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool RF is enabled when value is True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc).
  ///

  public class IsRFOutputEnabledForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsRFOutputEnabledForEachSV."; }
    }

    internal const string CmdName = "IsRFOutputEnabledForEachSVResult";

    public IsRFOutputEnabledForEachSVResult()
      : base(CmdName)
    {}

    public IsRFOutputEnabledForEachSVResult(CommandBase relatedCommand, string system, List<bool> enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) signal for specified satellite.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------------------------------------
  /// Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                      "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                      "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
  ///                                      "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
  /// Enabled bool   Signal is enabled when value is True
  ///

  public class EnableSignalForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) signal for specified satellite."; }
    }

    internal const string CmdName = "EnableSignalForSV";

    public EnableSignalForSV()
      : base(CmdName)
    {}

    public EnableSignalForSV(string signal, int svId, bool enabled)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the signal is enabled or disabled.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
  ///                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId   int    The satellite's SV ID (use 0 for all constellation's satellites)
  ///

  public class IsSignalEnabledForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the signal is enabled or disabled."; }
    }

    internal const string CmdName = "IsSignalEnabledForSV";

    public IsSignalEnabledForSV()
      : base(CmdName)
    {}

    public IsSignalEnabledForSV(string signal, int svId)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSignalEnabledForSV.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------------------------------------
  /// Signal  string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                      "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                      "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA"
  ///                                      "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId    int    The satellite's SV ID (use 0 for all constellation's satellites)
  /// Enabled bool   Signal is enabled when value is True
  ///

  public class IsSignalEnabledForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSignalEnabledForSV."; }
    }

    internal const string CmdName = "IsSignalEnabledForSVResult";

    public IsSignalEnabledForSVResult()
      : base(CmdName)
    {}

    public IsSignalEnabledForSVResult(CommandBase relatedCommand, string signal, int svId, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the list of enabled signals for a specified SV ID.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------------------------------------------------------------------------
  /// System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId   int    The satellite SV ID.
  ///

  public class GetEnabledSignalsForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the list of enabled signals for a specified SV ID."; }
    }

    internal const string CmdName = "GetEnabledSignalsForSV";

    public GetEnabledSignalsForSV()
      : base(CmdName)
    {}

    public GetEnabledSignalsForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetEnabledSignalsForSV.
  ///
  /// Name        Type         Description
  /// ----------- ------------ ------------------------------------------------------------------------------------
  /// System      string       The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId        int          The satellite SV ID.
  /// SignalArray array string The list of enabled signals.
  ///

  public class GetEnabledSignalsForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetEnabledSignalsForSV."; }
    }

    internal const string CmdName = "GetEnabledSignalsForSVResult";

    public GetEnabledSignalsForSVResult()
      : base(CmdName)
    {}

    public GetEnabledSignalsForSVResult(CommandBase relatedCommand, string system, int svId, List<string> signalArray)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      SignalArray = signalArray;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SignalArray")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) signal for each satellite individually.
  ///
  /// Name    Type       Description
  /// ------- ---------- --------------------------------------------------------------------------------------------------------------
  /// Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                          "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                          "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
  ///                                          "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).
  ///

  public class EnableSignalForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) signal for each satellite individually."; }
    }

    internal const string CmdName = "EnableSignalForEachSV";

    public EnableSignalForEachSV()
      : base(CmdName)
    {}

    public EnableSignalForEachSV(string signal, List<bool> enabled)
      : base(CmdName)
    {
      Signal = signal;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the signal is enabled or disabled for each satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
  ///                                     "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class IsSignalEnabledForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the signal is enabled or disabled for each satellite."; }
    }

    internal const string CmdName = "IsSignalEnabledForEachSV";

    public IsSignalEnabledForEachSV()
      : base(CmdName)
    {}

    public IsSignalEnabledForEachSV(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSignalEnabledForEachSV.
  ///
  /// Name    Type       Description
  /// ------- ---------- --------------------------------------------------------------------------------------------------------------
  /// Signal  string     Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                          "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                          "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA",
  ///                                          "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Enabled array bool Signal is enabled when value is True. Zero based index (index 0 => first SV ID, index 1 => second SV ID, etc).
  ///

  public class IsSignalEnabledForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSignalEnabledForEachSV."; }
    }

    internal const string CmdName = "IsSignalEnabledForEachSVResult";

    public IsSignalEnabledForEachSVResult()
      : base(CmdName)
    {}

    public IsSignalEnabledForEachSVResult(CommandBase relatedCommand, string signal, List<bool> enabled)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Enabled")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) P(Y)-Code for specified satellite.
  ///
  /// Name    Type   Description
  /// ------- ------ -----------------------------------------------
  /// Signal  string Accepted signal keys: "L1P", "L2P"
  /// SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
  /// Enabled bool   Enable P(Y)-Code if True
  ///

  public class EnablePYCodeForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) P(Y)-Code for specified satellite."; }
    }

    internal const string CmdName = "EnablePYCodeForSV";

    public EnablePYCodeForSV()
      : base(CmdName)
    {}

    public EnablePYCodeForSV(string signal, int svId, bool enabled)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if P(Y)-Code is enabled for the specified satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------
  /// Signal string Accepted signal keys: "L1P", "L2P"
  /// SvId   int    The satellite's SV ID 1..32 (use 0 for all SVs)
  ///

  public class IsPYCodeEnabledForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if P(Y)-Code is enabled for the specified satellite."; }
    }

    internal const string CmdName = "IsPYCodeEnabledForSV";

    public IsPYCodeEnabledForSV()
      : base(CmdName)
    {}

    public IsPYCodeEnabledForSV(string signal, int svId)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsPYCodeEnabledForSV.
  ///
  /// Name    Type   Description
  /// ------- ------ -----------------------------------------------
  /// Signal  string Accepted signal keys: "L1P", "L2P"
  /// SvId    int    The satellite's SV ID 1..32 (use 0 for all SVs)
  /// Enabled bool   Enable P(Y)-Code if True
  ///

  public class IsPYCodeEnabledForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsPYCodeEnabledForSV."; }
    }

    internal const string CmdName = "IsPYCodeEnabledForSVResult";

    public IsPYCodeEnabledForSVResult()
      : base(CmdName)
    {}

    public IsPYCodeEnabledForSVResult(CommandBase relatedCommand, string signal, int svId, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) P(Y)-Code for each satellite individually.
  ///
  /// Name    Type       Description
  /// ------- ---------- ----------------------------------------------------------------------------------------
  /// Signal  string     Accepted signal keys: "L1P", "L2P"
  /// Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class EnablePYCodeForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) P(Y)-Code for each satellite individually."; }
    }

    internal const string CmdName = "EnablePYCodeForEachSV";

    public EnablePYCodeForEachSV()
      : base(CmdName)
    {}

    public EnablePYCodeForEachSV(string signal, List<bool> enabled)
      : base(CmdName)
    {
      Signal = signal;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the P(Y)-Code is enabled or disabled for each satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------
  /// Signal string Accepted signal keys: "L1P", "L2P"
  ///

  public class IsPYCodeEnabledForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the P(Y)-Code is enabled or disabled for each satellite."; }
    }

    internal const string CmdName = "IsPYCodeEnabledForEachSV";

    public IsPYCodeEnabledForEachSV()
      : base(CmdName)
    {}

    public IsPYCodeEnabledForEachSV(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsPYCodeEnabledForEachSV.
  ///
  /// Name    Type       Description
  /// ------- ---------- ----------------------------------------------------------------------------------------
  /// Signal  string     Accepted signal keys: "L1P", "L2P"
  /// Enabled array bool Enable P(Y)-Code if True. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class IsPYCodeEnabledForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsPYCodeEnabledForEachSV."; }
    }

    internal const string CmdName = "IsPYCodeEnabledForEachSVResult";

    public IsPYCodeEnabledForEachSVResult()
      : base(CmdName)
    {}

    public IsPYCodeEnabledForEachSVResult(CommandBase relatedCommand, string signal, List<bool> enabled)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Enabled")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the power offsets applied to the signals of a satellite. Use SV ID 0 to set the power offset of all the satellites. Use key "All" to set the power offset to all signals.
  ///
  /// Name                  Type               Description
  /// --------------------- ------------------ ------------------------------------------------------------------------------
  /// System                string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId                  int                The satellite's SV ID.
  /// SignalPowerOffsetDict dict string:double A dictionary of signal poweroffset pairs.
  ///                                          Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
  ///                                                             "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
  ///                                                             "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "SBASL1",
  ///                                                             "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C",
  ///                                                             "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  /// IsRelativePowerOffset bool               If true, the power offset(s) are added to the current value(s).
  ///

  public class SetManualPowerOffsetForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the power offsets applied to the signals of a satellite. Use SV ID 0 to set the power offset of all the satellites. Use key \"All\" to set the power offset to all signals."; }
    }

    internal const string CmdName = "SetManualPowerOffsetForSV";

    public SetManualPowerOffsetForSV()
      : base(CmdName)
    {}

    public SetManualPowerOffsetForSV(string system, int svId, Dictionary<string, double> signalPowerOffsetDict, bool isRelativePowerOffset)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SignalPowerOffsetDict = signalPowerOffsetDict;
      IsRelativePowerOffset = isRelativePowerOffset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SignalPowerOffsetDict")
        && Contains("IsRelativePowerOffset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, double> SignalPowerOffsetDict
    {
      get { return GetValue("SignalPowerOffsetDict").ToObject<Dictionary<string, double>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalPowerOffsetDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsRelativePowerOffset
    {
      get { return GetValue("IsRelativePowerOffset").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsRelativePowerOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the power offsets for specific signals of a satellite.
  ///
  /// Name        Type         Description
  /// ----------- ------------ --------------------------------------------------------------------------------
  /// System      string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId        int          The satellite's SV ID.
  /// SignalArray array string An array of signals.
  ///                          Accepted values are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
  ///                                               "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
  ///                                               "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "SBASL1",
  ///                                               "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C",
  ///                                               "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class GetManualPowerOffsetForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the power offsets for specific signals of a satellite."; }
    }

    internal const string CmdName = "GetManualPowerOffsetForSV";

    public GetManualPowerOffsetForSV()
      : base(CmdName)
    {}

    public GetManualPowerOffsetForSV(string system, int svId, List<string> signalArray)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SignalArray = signalArray;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SignalArray")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetManualPowerOffsetForSV.
  ///
  /// Name                  Type               Description
  /// --------------------- ------------------ ------------------------------------------------------------------------------
  /// System                string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId                  int                The satellite's SV ID.
  /// SignalPowerOffsetDict dict string:double A dictionary of signal poweroffset pairs.
  ///                                          Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
  ///                                                             "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
  ///                                                             "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "SBASL1",
  ///                                                             "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C",
  ///                                                             "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class GetManualPowerOffsetForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetManualPowerOffsetForSV."; }
    }

    internal const string CmdName = "GetManualPowerOffsetForSVResult";

    public GetManualPowerOffsetForSVResult()
      : base(CmdName)
    {}

    public GetManualPowerOffsetForSVResult(CommandBase relatedCommand, string system, int svId, Dictionary<string, double> signalPowerOffsetDict)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      SignalPowerOffsetDict = signalPowerOffsetDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SignalPowerOffsetDict")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, double> SignalPowerOffsetDict
    {
      get { return GetValue("SignalPowerOffsetDict").ToObject<Dictionary<string, double>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalPowerOffsetDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command ResetAllSatPower is deprecated since 21.7. You may use ResetManualPowerOffsets.
  /// 
  /// Reset power offset for all satellites is specified system to default value
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  ///

  public class ResetAllSatPower : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command ResetAllSatPower is deprecated since 21.7. You may use ResetManualPowerOffsets.\n\nReset power offset for all satellites is specified system to default value"; }
    }

    internal const string CmdName = "ResetAllSatPower";

    public ResetAllSatPower()
      : base(CmdName)
    {}

    public ResetAllSatPower(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Reset power offset for all satellites is specified system to default value
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  ///

  public class ResetManualPowerOffsets : CommandBase
  {
    public override string Documentation
    {
      get { return "Reset power offset for all satellites is specified system to default value"; }
    }

    internal const string CmdName = "ResetManualPowerOffsets";

    public ResetManualPowerOffsets()
      : base(CmdName)
    {}

    public ResetManualPowerOffsets(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Information on the signal power.
  ///
  /// Name                Type   Description
  /// ------------------- ------ -----------------------------------------------------------------------------------------------------------
  /// AntennaOffset       double The receiver antenna power offset (dB). It depends on antenna pattern and relative orientation with signal.
  /// StrengthModelOffset double The power offset coming from the Signal Strength Model (dB).
  /// SignalOffset        double The signal power offset (dB). See SetSignalPowerOffset.
  /// ManualOffset        double The manual power offset (dB). See SetManualPowerOffsetForSV.
  /// Total               double The sum of all the other fields, including nominal power and the global power offset (dBm).
  ///

  public struct SignalPower
  {
    public double AntennaOffset;
    public double StrengthModelOffset;
    public double SignalOffset;
    public double ManualOffset;
    public double Total;
  }


  ///
  /// Get the power information for the specified satellite.
  ///
  /// Name        Type         Description
  /// ----------- ------------ --------------------------------------------------------------------------------
  /// System      string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId        int          The Satellite's SV ID.
  /// SignalArray array string An array of signals.
  ///                          Accepted values are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
  ///                                               "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
  ///                                               "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "SBASL1",
  ///                                               "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C",
  ///                                               "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class GetAllPowerForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the power information for the specified satellite."; }
    }

    internal const string CmdName = "GetAllPowerForSV";

    public GetAllPowerForSV()
      : base(CmdName)
    {}

    public GetAllPowerForSV(string system, int svId, List<string> signalArray)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SignalArray = signalArray;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SignalArray")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllPowerForSV.
  ///
  /// Name            Type                    Description
  /// --------------- ----------------------- ------------------------------------------------------------------------------
  /// System          string                  "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId            int                     The Satellite's SV ID.
  /// NominalPower    double                  The nominal power in dBm.
  /// GlobalOffset    double                  The global power offset (dB).
  /// SignalPowerDict dict string:SignalPower A dictionary of signal power pairs.
  ///                                         Accepted keys are: "All", "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P",
  ///                                                            "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E1PRS", "E5a",
  ///                                                            "E5b", "E6BC", "E6PRS", "B1", "B2", "B1C", "B2a", "SBASL1",
  ///                                                            "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C",
  ///                                                            "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class GetAllPowerForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllPowerForSV."; }
    }

    internal const string CmdName = "GetAllPowerForSVResult";

    public GetAllPowerForSVResult()
      : base(CmdName)
    {}

    public GetAllPowerForSVResult(CommandBase relatedCommand, string system, int svId, double nominalPower, double globalOffset, Dictionary<string, SignalPower> signalPowerDict)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      NominalPower = nominalPower;
      GlobalOffset = globalOffset;
      SignalPowerDict = signalPowerDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("NominalPower")
        && Contains("GlobalOffset")
        && Contains("SignalPowerDict")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double NominalPower
    {
      get { return GetValue("NominalPower").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("NominalPower", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double GlobalOffset
    {
      get { return GetValue("GlobalOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("GlobalOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, SignalPower> SignalPowerDict
    {
      get { return GetValue("SignalPowerDict").ToObject<Dictionary<string, SignalPower>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalPowerDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export the performance graph data into a csv file.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------------------------------------------------------
  /// Path        string The full path to the csv file.
  /// Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
  ///

  public class ExportPerformanceDataToCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Export the performance graph data into a csv file."; }
    }

    internal const string CmdName = "ExportPerformanceDataToCSV";

    public ExportPerformanceDataToCSV()
      : base(CmdName)
    {}

    public ExportPerformanceDataToCSV(string path, bool overwriting)
      : base(CmdName)
    {
      Path = path;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export the hil graph data into a csv file.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------------------------------------------------------
  /// Path        string The full path to the csv file.
  /// Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
  ///

  public class ExportHilGraphDataToCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Export the hil graph data into a csv file."; }
    }

    internal const string CmdName = "ExportHilGraphDataToCSV";

    public ExportHilGraphDataToCSV()
      : base(CmdName)
    {}

    public ExportHilGraphDataToCSV(string path, bool overwriting)
      : base(CmdName)
    {
      Path = path;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) the satellite signal propagation delay. If disabled, the signal is immediately received
  /// by the receiver. The delay should always be enabled, unless your are doing a PPS calibration for the simulator.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.
  ///

  public class SetPropagationDelay : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) the satellite signal propagation delay. If disabled, the signal is immediately received\nby the receiver. The delay should always be enabled, unless your are doing a PPS calibration for the simulator."; }
    }

    internal const string CmdName = "SetPropagationDelay";

    public SetPropagationDelay()
      : base(CmdName)
    {}

    public SetPropagationDelay(string system, bool enabled)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the propagation delay is enabled.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class IsPropagationDelayEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the propagation delay is enabled."; }
    }

    internal const string CmdName = "IsPropagationDelayEnabled";

    public IsPropagationDelayEnabled()
      : base(CmdName)
    {}

    public IsPropagationDelayEnabled(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsPropagationDelayEnabled.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled bool   If false, the propagation delay between the GPS satellite and the receiver is forced to 0 second.
  ///

  public class IsPropagationDelayEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsPropagationDelayEnabled."; }
    }

    internal const string CmdName = "IsPropagationDelayEnabledResult";

    public IsPropagationDelayEnabledResult()
      : base(CmdName)
    {}

    public IsPropagationDelayEnabledResult(CommandBase relatedCommand, string system, bool enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// If IsFixed is set to true, the satellite will not move during the simulation and keep its initial position calculated at the beginning of the simulation.
  ///
  /// Name    Type   Description
  /// ------- ------ --------------------------------------------------------------------------------------------------------------
  /// System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID.
  /// IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.
  ///

  public class SetSatMotionFixed : CommandBase
  {
    public override string Documentation
    {
      get { return "If IsFixed is set to true, the satellite will not move during the simulation and keep its initial position calculated at the beginning of the simulation."; }
    }

    internal const string CmdName = "SetSatMotionFixed";

    public SetSatMotionFixed()
      : base(CmdName)
    {}

    public SetSatMotionFixed(string system, int svId, bool isFixed)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      IsFixed = isFixed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("IsFixed")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsFixed
    {
      get { return GetValue("IsFixed").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsFixed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if the satellite is fixed (True) or not fixed (false).
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------
  /// System string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID.
  ///

  public class IsSatMotionFixed : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if the satellite is fixed (True) or not fixed (false)."; }
    }

    internal const string CmdName = "IsSatMotionFixed";

    public IsSatMotionFixed()
      : base(CmdName)
    {}

    public IsSatMotionFixed(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSatMotionFixed.
  ///
  /// Name    Type   Description
  /// ------- ------ --------------------------------------------------------------------------------------------------------------
  /// System  string "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID.
  /// IsFixed bool   If true, the satellite relative position is fixed, if false, the satellite motion follows a normal trajectory.
  ///

  public class IsSatMotionFixedResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSatMotionFixed."; }
    }

    internal const string CmdName = "IsSatMotionFixedResult";

    public IsSatMotionFixedResult()
      : base(CmdName)
    {}

    public IsSatMotionFixedResult(CommandBase relatedCommand, string system, int svId, bool isFixed)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      IsFixed = isFixed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("IsFixed")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsFixed
    {
      get { return GetValue("IsFixed").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsFixed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the GPS ionospheric Alpha coefficient
  /// Alpha 0 is in seconds
  /// Alpha 1 is in seconds/semicircle
  /// Alpha 2 is in seconds/semicircle^2
  /// Alpha 3 is in seconds/semicircle^3
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [0..3]
  /// Val   double Coefficient value
  ///

  public class SetIonoAlpha : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the GPS ionospheric Alpha coefficient\nAlpha 0 is in seconds\nAlpha 1 is in seconds/semicircle\nAlpha 2 is in seconds/semicircle^2\nAlpha 3 is in seconds/semicircle^3"; }
    }

    internal const string CmdName = "SetIonoAlpha";

    public SetIonoAlpha()
      : base(CmdName)
    {}

    public SetIonoAlpha(int index, double val)
      : base(CmdName)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the GPS ionospheric Alpha coefficient
  /// Alpha 0 is in seconds
  /// Alpha 1 is in seconds/semicircle
  /// Alpha 2 is in seconds/semicircle^2
  /// Alpha 3 is in seconds/semicircle^3
  ///
  /// Name  Type Description
  /// ----- ---- ------------------------
  /// Index int  Coefficient index [0..3]
  ///

  public class GetIonoAlpha : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the GPS ionospheric Alpha coefficient\nAlpha 0 is in seconds\nAlpha 1 is in seconds/semicircle\nAlpha 2 is in seconds/semicircle^2\nAlpha 3 is in seconds/semicircle^3"; }
    }

    internal const string CmdName = "GetIonoAlpha";

    public GetIonoAlpha()
      : base(CmdName)
    {}

    public GetIonoAlpha(int index)
      : base(CmdName)
    {
      Index = index;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoAlpha.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [0..3]
  /// Val   double Coefficient value
  ///

  public class GetIonoAlphaResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoAlpha."; }
    }

    internal const string CmdName = "GetIonoAlphaResult";

    public GetIonoAlphaResult()
      : base(CmdName)
    {}

    public GetIonoAlphaResult(CommandBase relatedCommand, int index, double val)
      : base(CmdName, relatedCommand)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the GPS ionospheric Beta coefficient
  /// Beta 0 is in seconds
  /// Beta 1 is in seconds/semicircle
  /// Beta 2 is in seconds/semicircle^2
  /// Beta 3 is in seconds/semicircle^3
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [0..3]
  /// Val   double Coefficient value
  ///

  public class SetIonoBeta : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the GPS ionospheric Beta coefficient\nBeta 0 is in seconds\nBeta 1 is in seconds/semicircle\nBeta 2 is in seconds/semicircle^2\nBeta 3 is in seconds/semicircle^3"; }
    }

    internal const string CmdName = "SetIonoBeta";

    public SetIonoBeta()
      : base(CmdName)
    {}

    public SetIonoBeta(int index, double val)
      : base(CmdName)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the GPS ionospheric Beta coefficient
  /// Beta 0 is in seconds
  /// Beta 1 is in seconds/semicircle
  /// Beta 2 is in seconds/semicircle^2
  /// Beta 3 is in seconds/semicircle^3
  ///
  /// Name  Type Description
  /// ----- ---- ------------------------
  /// Index int  Coefficient index [0..3]
  ///

  public class GetIonoBeta : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the GPS ionospheric Beta coefficient\nBeta 0 is in seconds\nBeta 1 is in seconds/semicircle\nBeta 2 is in seconds/semicircle^2\nBeta 3 is in seconds/semicircle^3"; }
    }

    internal const string CmdName = "GetIonoBeta";

    public GetIonoBeta()
      : base(CmdName)
    {}

    public GetIonoBeta(int index)
      : base(CmdName)
    {
      Index = index;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoBeta.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [0..3]
  /// Val   double Coefficient value
  ///

  public class GetIonoBetaResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoBeta."; }
    }

    internal const string CmdName = "GetIonoBetaResult";

    public GetIonoBetaResult()
      : base(CmdName)
    {}

    public GetIonoBetaResult(CommandBase relatedCommand, int index, double val)
      : base(CmdName, relatedCommand)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [1..9]
  /// Val   double Coefficient value
  ///

  public class SetIonoBdgimAlpha : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)"; }
    }

    internal const string CmdName = "SetIonoBdgimAlpha";

    public SetIonoBdgimAlpha()
      : base(CmdName)
    {}

    public SetIonoBdgimAlpha(int index, double val)
      : base(CmdName)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)
  ///
  /// Name  Type Description
  /// ----- ---- ------------------------
  /// Index int  Coefficient index [1..9]
  ///

  public class GetIonoBdgimAlpha : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the BeiDou (BDGIM) ionospheric Alpha coefficient (in TECu)"; }
    }

    internal const string CmdName = "GetIonoBdgimAlpha";

    public GetIonoBdgimAlpha()
      : base(CmdName)
    {}

    public GetIonoBdgimAlpha(int index)
      : base(CmdName)
    {
      Index = index;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoBdgimAlpha.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------
  /// Index int    Coefficient index [1..9]
  /// Val   double Coefficient value
  ///

  public class GetIonoBdgimAlphaResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoBdgimAlpha."; }
    }

    internal const string CmdName = "GetIonoBdgimAlphaResult";

    public GetIonoBdgimAlphaResult()
      : base(CmdName)
    {}

    public GetIonoBdgimAlphaResult(CommandBase relatedCommand, int index, double val)
      : base(CmdName, relatedCommand)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------------------------------------------
  /// Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
  /// Val   double Coefficient value.
  ///

  public class SetEffectiveIonisationLevelCoefficient : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2)."; }
    }

    internal const string CmdName = "SetEffectiveIonisationLevelCoefficient";

    public SetEffectiveIonisationLevelCoefficient()
      : base(CmdName)
    {}

    public SetEffectiveIonisationLevelCoefficient(int index, double val)
      : base(CmdName)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2).
  ///
  /// Name  Type Description
  /// ----- ---- ---------------------------------------------------------------
  /// Index int  Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
  ///

  public class GetEffectiveIonisationLevelCoefficient : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the effective ionisation level coefficient for the 1st, 2nd or 3rd order, (ai0 , ai1 , ai2)."; }
    }

    internal const string CmdName = "GetEffectiveIonisationLevelCoefficient";

    public GetEffectiveIonisationLevelCoefficient()
      : base(CmdName)
    {}

    public GetEffectiveIonisationLevelCoefficient(int index)
      : base(CmdName)
    {
      Index = index;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetEffectiveIonisationLevelCoefficient.
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------------------------------------------
  /// Index int    Coefficient index, 0, 1 or 2 for ai0, ai1 and ai2 respectively.
  /// Val   double Coefficient value.
  ///

  public class GetEffectiveIonisationLevelCoefficientResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetEffectiveIonisationLevelCoefficient."; }
    }

    internal const string CmdName = "GetEffectiveIonisationLevelCoefficientResult";

    public GetEffectiveIonisationLevelCoefficientResult()
      : base(CmdName)
    {}

    public GetEffectiveIonisationLevelCoefficientResult(CommandBase relatedCommand, int index, double val)
      : base(CmdName, relatedCommand)
    {
      Index = index;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Index")
        && Contains("Val")
      ;
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set ionospheric model
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------------------------------------------
  /// Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")
  ///

  public class SetIonoModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Set ionospheric model"; }
    }

    internal const string CmdName = "SetIonoModel";

    public SetIonoModel()
      : base(CmdName)
    {}

    public SetIonoModel(string model)
      : base(CmdName)
    {
      Model = model;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Model")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Model
    {
      get { return GetValue("Model").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Model", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get ionospheric model
  ///
  /// 
  ///

  public class GetIonoModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Get ionospheric model"; }
    }

    internal const string CmdName = "GetIonoModel";

    public GetIonoModel()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIonoModel.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------------------------------------------
  /// Model string Ionospheric model ("None", "Klobuchar", "Spacecraft" or "NeQuick")
  ///

  public class GetIonoModelResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoModel."; }
    }

    internal const string CmdName = "GetIonoModelResult";

    public GetIonoModelResult()
      : base(CmdName)
    {}

    public GetIonoModelResult(CommandBase relatedCommand, string model)
      : base(CmdName, relatedCommand)
    {
      Model = model;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Model")
      ;
      }
    }

    public string Model
    {
      get { return GetValue("Model").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Model", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set tropospheric model
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------------------------------------------------
  /// Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")
  ///

  public class SetTropoModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Set tropospheric model"; }
    }

    internal const string CmdName = "SetTropoModel";

    public SetTropoModel()
      : base(CmdName)
    {}

    public SetTropoModel(string model)
      : base(CmdName)
    {
      Model = model;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Model")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Model
    {
      get { return GetValue("Model").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Model", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get tropospheric model
  ///
  /// 
  ///

  public class GetTropoModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Get tropospheric model"; }
    }

    internal const string CmdName = "GetTropoModel";

    public GetTropoModel()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetTropoModel.
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------------------------------------------------
  /// Model string Tropospheric model ("None", "Saastamoinen", "Stanag" or "DO-229")
  ///

  public class GetTropoModelResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetTropoModel."; }
    }

    internal const string CmdName = "GetTropoModelResult";

    public GetTropoModelResult()
      : base(CmdName)
    {}

    public GetTropoModelResult(CommandBase relatedCommand, string model)
      : base(CmdName, relatedCommand)
    {
      Model = model;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Model")
      ;
      }
    }

    public string Model
    {
      get { return GetValue("Model").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Model", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the simulation start time mode.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------------------------
  /// Mode string Accepted Modes ("Custom", "Computer", "GPS")
  ///

  public class SetStartTimeMode : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the simulation start time mode."; }
    }

    internal const string CmdName = "SetStartTimeMode";

    public SetStartTimeMode()
      : base(CmdName)
    {}

    public SetStartTimeMode(string mode)
      : base(CmdName)
    {
      Mode = mode;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Mode")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Mode
    {
      get { return GetValue("Mode").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Mode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the simulation start time mode.
  ///
  /// 
  ///

  public class GetStartTimeMode : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the simulation start time mode."; }
    }

    internal const string CmdName = "GetStartTimeMode";

    public GetStartTimeMode()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetStartTimeMode.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------------------------
  /// Mode string Accepted Modes ("Custom", "Computer", "GPS")
  ///

  public class GetStartTimeModeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetStartTimeMode."; }
    }

    internal const string CmdName = "GetStartTimeModeResult";

    public GetStartTimeModeResult()
      : base(CmdName)
    {}

    public GetStartTimeModeResult(CommandBase relatedCommand, string mode)
      : base(CmdName, relatedCommand)
    {
      Mode = mode;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Mode")
      ;
      }
    }

    public string Mode
    {
      get { return GetValue("Mode").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Mode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Connect a receiver.
  ///
  /// Name        Type                           Description
  /// ----------- ------------------------------ -------------------------------------------------------------------------------------------------------------------------------------
  /// Port        string                         Serial Port (ex: "COM5").
  /// BaudRate    optional int                   Data baud rate of the serial port. Can be 1200 | 2400 | 4800 | 9600 | 19200 | 38400 | 57600 | 115200 | 460800. Default value is 9600.
  /// DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8. Default value is 8.
  /// Parity      optional SerialPortParity      Parity scheme used by the serial port. Default value is NoParity.
  /// StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2. Default value is 1.
  /// FlowControl optional SerialPortFlowControl Flow control used by the serial port. Default value is NoFlowControl.
  ///

  public class ConnectSerialPortReceiver : CommandBase
  {
    public override string Documentation
    {
      get { return "Connect a receiver."; }
    }

    internal const string CmdName = "ConnectSerialPortReceiver";

    public ConnectSerialPortReceiver()
      : base(CmdName)
    {}

    public ConnectSerialPortReceiver(string port, int? baudRate = null, int? dataBits = null, SerialPortParity? parity = null, int? stopBits = null, SerialPortFlowControl? flowControl = null)
      : base(CmdName)
    {
      Port = port;
      BaudRate = baudRate;
      DataBits = dataBits;
      Parity = parity;
      StopBits = stopBits;
      FlowControl = flowControl;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Port")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Port
    {
      get { return GetValue("Port").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? BaudRate
    {
      get { return GetValue("BaudRate").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("BaudRate");
        else
          SetValue("BaudRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? DataBits
    {
      get { return GetValue("DataBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataBits");
        else
          SetValue("DataBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortParity? Parity
    {
      get { return GetValue("Parity").ToObject<SerialPortParity?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Parity");
        else
          SetValue("Parity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? StopBits
    {
      get { return GetValue("StopBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("StopBits");
        else
          SetValue("StopBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortFlowControl? FlowControl
    {
      get { return GetValue("FlowControl").ToObject<SerialPortFlowControl?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("FlowControl");
        else
          SetValue("FlowControl", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Disconnects the connected receiver. Does nothing if no receiver is connected.
  ///
  /// 
  ///

  public class DisconnectSerialPortReceiver : CommandBase
  {
    public override string Documentation
    {
      get { return "Disconnects the connected receiver. Does nothing if no receiver is connected."; }
    }

    internal const string CmdName = "DisconnectSerialPortReceiver";

    public DisconnectSerialPortReceiver()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Set the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.
  ///
  /// Name        Type                           Description
  /// ----------- ------------------------------ -----------------------------------------------------------------------------------------
  /// Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
  /// BaudRate    optional int                   Data baud rate of the serial port (optional)
  /// DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
  /// Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
  /// StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
  /// FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)
  ///

  public class SetGpsTimingReceiver : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the connection parameters to the GPS Receiver from which the simulator will get the simulation start time."; }
    }

    internal const string CmdName = "SetGpsTimingReceiver";

    public SetGpsTimingReceiver()
      : base(CmdName)
    {}

    public SetGpsTimingReceiver(string port, int? baudRate = null, int? dataBits = null, SerialPortParity? parity = null, int? stopBits = null, SerialPortFlowControl? flowControl = null)
      : base(CmdName)
    {
      Port = port;
      BaudRate = baudRate;
      DataBits = dataBits;
      Parity = parity;
      StopBits = stopBits;
      FlowControl = flowControl;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Port")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Port
    {
      get { return GetValue("Port").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? BaudRate
    {
      get { return GetValue("BaudRate").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("BaudRate");
        else
          SetValue("BaudRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? DataBits
    {
      get { return GetValue("DataBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataBits");
        else
          SetValue("DataBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortParity? Parity
    {
      get { return GetValue("Parity").ToObject<SerialPortParity?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Parity");
        else
          SetValue("Parity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? StopBits
    {
      get { return GetValue("StopBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("StopBits");
        else
          SetValue("StopBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortFlowControl? FlowControl
    {
      get { return GetValue("FlowControl").ToObject<SerialPortFlowControl?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("FlowControl");
        else
          SetValue("FlowControl", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the connection parameters to the GPS Receiver from which the simulator will get the simulation start time.
  ///
  /// 
  ///

  public class GetGpsTimingReceiver : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the connection parameters to the GPS Receiver from which the simulator will get the simulation start time."; }
    }

    internal const string CmdName = "GetGpsTimingReceiver";

    public GetGpsTimingReceiver()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetGpsTimingReceiver.
  ///
  /// Name        Type                           Description
  /// ----------- ------------------------------ -----------------------------------------------------------------------------------------
  /// Port        string                         IP Address (Octoclock-G ex: "192.168.11.3") OR Serial Port (ex: "COM5")
  /// BaudRate    optional int                   Data baud rate of the serial port (optional)
  /// DataBits    optional int                   Number of data bits used by the serial port. Possible values are 5, 6, 7 and 8 (optional)
  /// Parity      optional SerialPortParity      Parity scheme used by the serial port (optional)
  /// StopBits    optional int                   Number of stop bits used by the serial port. Possible values are 1 and 2 (optional)
  /// FlowControl optional SerialPortFlowControl Flow control used by the serial port (optional)
  ///

  public class GetGpsTimingReceiverResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsTimingReceiver."; }
    }

    internal const string CmdName = "GetGpsTimingReceiverResult";

    public GetGpsTimingReceiverResult()
      : base(CmdName)
    {}

    public GetGpsTimingReceiverResult(CommandBase relatedCommand, string port, int? baudRate = null, int? dataBits = null, SerialPortParity? parity = null, int? stopBits = null, SerialPortFlowControl? flowControl = null)
      : base(CmdName, relatedCommand)
    {
      Port = port;
      BaudRate = baudRate;
      DataBits = dataBits;
      Parity = parity;
      StopBits = stopBits;
      FlowControl = flowControl;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Port")
      ;
      }
    }

    public string Port
    {
      get { return GetValue("Port").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? BaudRate
    {
      get { return GetValue("BaudRate").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("BaudRate");
        else
          SetValue("BaudRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? DataBits
    {
      get { return GetValue("DataBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataBits");
        else
          SetValue("DataBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortParity? Parity
    {
      get { return GetValue("Parity").ToObject<SerialPortParity?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Parity");
        else
          SetValue("Parity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? StopBits
    {
      get { return GetValue("StopBits").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("StopBits");
        else
          SetValue("StopBits", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SerialPortFlowControl? FlowControl
    {
      get { return GetValue("FlowControl").ToObject<SerialPortFlowControl?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("FlowControl");
        else
          SetValue("FlowControl", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
  /// This value has no effect when GPS start time is "custom" or "computer".
  ///
  /// Name   Type Description
  /// ------ ---- -----------------------------------------------------------------------------------------
  /// Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver
  ///

  public class SetStartTimeOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.\nThis value has no effect when GPS start time is \"custom\" or \"computer\"."; }
    }

    internal const string CmdName = "SetStartTimeOffset";

    public SetStartTimeOffset()
      : base(CmdName)
    {}

    public SetStartTimeOffset(int offset)
      : base(CmdName)
    {
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Offset
    {
      get { return GetValue("Offset").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.
  /// This value has no effect when GPS start time is "custom" or "computer".
  ///
  /// 
  ///

  public class GetStartTimeOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get offset between the simulated GPS time and time given by GPS Timing receiver when using GPS Timing receiver to set the start time of the simulation.\nThis value has no effect when GPS start time is \"custom\" or \"computer\"."; }
    }

    internal const string CmdName = "GetStartTimeOffset";

    public GetStartTimeOffset()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetStartTimeOffset.
  ///
  /// Name   Type Description
  /// ------ ---- -----------------------------------------------------------------------------------------
  /// Offset int  Time Offset, in seconds, between simulated GPS time and time given by GPS Timing receiver
  ///

  public class GetStartTimeOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetStartTimeOffset."; }
    }

    internal const string CmdName = "GetStartTimeOffsetResult";

    public GetStartTimeOffsetResult()
      : base(CmdName)
    {}

    public GetStartTimeOffsetResult(CommandBase relatedCommand, int offset)
      : base(CmdName, relatedCommand)
    {
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Offset")
      ;
      }
    }

    public int Offset
    {
      get { return GetValue("Offset").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the UTC leap seconds added since GPS epoch.
  ///
  /// Name       Type Description
  /// ---------- ---- ----------------------------------------------------------------
  /// LeapSecond int  The number of leap seconds to convert GPS date and time into UTC
  ///

  public class SetLeapSecond : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the UTC leap seconds added since GPS epoch."; }
    }

    internal const string CmdName = "SetLeapSecond";

    public SetLeapSecond()
      : base(CmdName)
    {}

    public SetLeapSecond(int leapSecond)
      : base(CmdName)
    {
      LeapSecond = leapSecond;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("LeapSecond")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int LeapSecond
    {
      get { return GetValue("LeapSecond").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("LeapSecond", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the simulation start date and time
  ///
  /// Name  Type     Description
  /// ----- -------- --------------------------------------------------------------
  /// Start datetime GPS date and time (it is the GPS time expressed in UTC format)
  ///

  public class SetGpsStartTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the simulation start date and time"; }
    }

    internal const string CmdName = "SetGpsStartTime";

    public SetGpsStartTime()
      : base(CmdName)
    {}

    public SetGpsStartTime(DateTime start)
      : base(CmdName)
    {
      Start = start;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Start")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public DateTime Start
    {
      get { return GetValue("Start").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Start", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the simulation GPS start date and time and leap second to convert into UTC time
  ///
  /// 
  ///

  public class GetGpsStartTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the simulation GPS start date and time and leap second to convert into UTC time"; }
    }

    internal const string CmdName = "GetGpsStartTime";

    public GetGpsStartTime()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetGpsStartTime.
  ///
  /// Name       Type     Description
  /// ---------- -------- ------------------------------------------------------------------------------------------------
  /// StartTime  datetime GPS date and time when the simulation started (it is the GPS time expressed in Gregorian format)
  /// LeapSecond int      The number of leap seconds to convert GPS date and time into UTC
  ///

  public class GetGpsStartTimeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsStartTime."; }
    }

    internal const string CmdName = "GetGpsStartTimeResult";

    public GetGpsStartTimeResult()
      : base(CmdName)
    {}

    public GetGpsStartTimeResult(CommandBase relatedCommand, DateTime startTime, int leapSecond)
      : base(CmdName, relatedCommand)
    {
      StartTime = startTime;
      LeapSecond = leapSecond;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("StartTime")
        && Contains("LeapSecond")
      ;
      }
    }

    public DateTime StartTime
    {
      get { return GetValue("StartTime").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int LeapSecond
    {
      get { return GetValue("LeapSecond").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("LeapSecond", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the simulation duration. The simulation will stop automatically when this duration is reached
  ///
  /// Name   Type Description
  /// ------ ---- -----------------------
  /// Second int  The duration in seconds
  ///

  public class SetDuration : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the simulation duration. The simulation will stop automatically when this duration is reached"; }
    }

    internal const string CmdName = "SetDuration";

    public SetDuration()
      : base(CmdName)
    {}

    public SetDuration(int second)
      : base(CmdName)
    {
      Second = second;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Second")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Second
    {
      get { return GetValue("Second").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Second", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the simulation duration.
  ///
  /// 
  ///

  public class GetDuration : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the simulation duration."; }
    }

    internal const string CmdName = "GetDuration";

    public GetDuration()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetDuration.
  ///
  /// Name   Type Description
  /// ------ ---- -----------------------
  /// Second int  The duration in seconds
  ///

  public class GetDurationResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetDuration."; }
    }

    internal const string CmdName = "GetDurationResult";

    public GetDurationResult()
      : base(CmdName)
    {}

    public GetDurationResult(CommandBase relatedCommand, int second)
      : base(CmdName, relatedCommand)
    {
      Second = second;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Second")
      ;
      }
    }

    public int Second
    {
      get { return GetValue("Second").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Second", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) raw data logging (pseudorange, antenna gain, receiver position, satellite position, etc.)
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------
  /// Enabled bool If true, file will be created during simulation
  ///

  public class EnableLogRaw : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) raw data logging (pseudorange, antenna gain, receiver position, satellite position, etc.)"; }
    }

    internal const string CmdName = "EnableLogRaw";

    public EnableLogRaw()
      : base(CmdName)
    {}

    public EnableLogRaw(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if raw data logging is enabled.
  ///
  /// 
  ///

  public class IsLogRawEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if raw data logging is enabled."; }
    }

    internal const string CmdName = "IsLogRawEnabled";

    public IsLogRawEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsLogRawEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------
  /// Enabled bool If true, file will be created during simulation
  ///

  public class IsLogRawEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLogRawEnabled."; }
    }

    internal const string CmdName = "IsLogRawEnabledResult";

    public IsLogRawEnabledResult()
      : base(CmdName)
    {}

    public IsLogRawEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) downlink data logging in csv format
  ///
  /// Name           Type          Description
  /// -------------- ------------- ----------------------------------------------------------------------------------------------------------------------
  /// Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
  /// BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
  /// AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding
  ///

  public class EnableLogDownlink : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) downlink data logging in csv format"; }
    }

    internal const string CmdName = "EnableLogDownlink";

    public EnableLogDownlink()
      : base(CmdName)
    {}

    public EnableLogDownlink(bool enabled, bool? beforeEncoding = null, bool? afterEncoding = null)
      : base(CmdName)
    {
      Enabled = enabled;
      BeforeEncoding = beforeEncoding;
      AfterEncoding = afterEncoding;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? BeforeEncoding
    {
      get { return GetValue("BeforeEncoding").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("BeforeEncoding");
        else
          SetValue("BeforeEncoding", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? AfterEncoding
    {
      get { return GetValue("AfterEncoding").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AfterEncoding");
        else
          SetValue("AfterEncoding", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if downlink data Logging is enabled
  ///
  /// 
  ///

  public class IsLogDownlinkEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if downlink data Logging is enabled"; }
    }

    internal const string CmdName = "IsLogDownlinkEnabled";

    public IsLogDownlinkEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsLogDownlinkEnabled.
  ///
  /// Name           Type          Description
  /// -------------- ------------- ----------------------------------------------------------------------------------------------------------------------
  /// Enabled        bool          If true, files will be created during simulation. By default, the downlink files will be created after signal encoding
  /// BeforeEncoding optional bool (Optional) If true, files will be created before signal encoding. Can be used with AfterEncoding
  /// AfterEncoding  optional bool (Optional) If true, files will be created after signal encoding. Can be used with BeforeEncoding
  ///

  public class IsLogDownlinkEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLogDownlinkEnabled."; }
    }

    internal const string CmdName = "IsLogDownlinkEnabledResult";

    public IsLogDownlinkEnabledResult()
      : base(CmdName)
    {}

    public IsLogDownlinkEnabledResult(CommandBase relatedCommand, bool enabled, bool? beforeEncoding = null, bool? afterEncoding = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      BeforeEncoding = beforeEncoding;
      AfterEncoding = afterEncoding;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? BeforeEncoding
    {
      get { return GetValue("BeforeEncoding").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("BeforeEncoding");
        else
          SetValue("BeforeEncoding", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? AfterEncoding
    {
      get { return GetValue("AfterEncoding").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AfterEncoding");
        else
          SetValue("AfterEncoding", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) ephemeris data logging in RINEX v3.03 format
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------
  /// Enabled bool If true, files will be created during simulation
  ///

  public class EnableLogRinex : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) ephemeris data logging in RINEX v3.03 format"; }
    }

    internal const string CmdName = "EnableLogRinex";

    public EnableLogRinex()
      : base(CmdName)
    {}

    public EnableLogRinex(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if ephemeris data Logging is enabled
  ///
  /// 
  ///

  public class IsLogRinexEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if ephemeris data Logging is enabled"; }
    }

    internal const string CmdName = "IsLogRinexEnabled";

    public IsLogRinexEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsLogRinexEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------
  /// Enabled bool If true, files will be created during simulation
  ///

  public class IsLogRinexEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLogRinexEnabled."; }
    }

    internal const string CmdName = "IsLogRinexEnabledResult";

    public IsLogRinexEnabledResult()
      : base(CmdName)
    {}

    public IsLogRinexEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable (or disable) log of all the data received on the HIL API in a CSV format
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------
  /// Enabled bool If true, files will be created during simulation
  ///

  public class EnableLogHILInput : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable (or disable) log of all the data received on the HIL API in a CSV format"; }
    }

    internal const string CmdName = "EnableLogHILInput";

    public EnableLogHILInput()
      : base(CmdName)
    {}

    public EnableLogHILInput(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Tells if data received on the HIL API logging is enabled
  ///
  /// 
  ///

  public class IsLogHILInputEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Tells if data received on the HIL API logging is enabled"; }
    }

    internal const string CmdName = "IsLogHILInputEnabled";

    public IsLogHILInputEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsLogHILInputEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------
  /// Enabled bool If true, files will be created during simulation
  ///

  public class IsLogHILInputEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLogHILInputEnabled."; }
    }

    internal const string CmdName = "IsLogHILInputEnabledResult";

    public IsLogHILInputEnabledResult()
      : base(CmdName)
    {}

    public IsLogHILInputEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Rate logging of raw data
  ///
  /// Name Type Description
  /// ---- ---- --------------------------------------
  /// Rate int  Accepted rates are 10, 100 and 1000 Hz
  ///

  public class SetLogRawRate : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Rate logging of raw data"; }
    }

    internal const string CmdName = "SetLogRawRate";

    public SetLogRawRate()
      : base(CmdName)
    {}

    public SetLogRawRate(int rate)
      : base(CmdName)
    {
      Rate = rate;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Rate")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Rate
    {
      get { return GetValue("Rate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Rate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Rate logging of raw data
  ///
  /// 
  ///

  public class GetLogRawRate : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Rate logging of raw data"; }
    }

    internal const string CmdName = "GetLogRawRate";

    public GetLogRawRate()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetLogRawRate.
  ///
  /// Name Type Description
  /// ---- ---- --------------------------------------
  /// Rate int  Accepted rates are 10, 100 and 1000 Hz
  ///

  public class LogRawRateResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetLogRawRate."; }
    }

    internal const string CmdName = "LogRawRateResult";

    public LogRawRateResult()
      : base(CmdName)
    {}

    public LogRawRateResult(CommandBase relatedCommand, int rate)
      : base(CmdName, relatedCommand)
    {
      Rate = rate;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Rate")
      ;
      }
    }

    public int Rate
    {
      get { return GetValue("Rate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Rate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Logging of NMEA for the simulated position enable/disable.
  /// If a receiver is connected, that NMEA is saved as well.
  ///
  /// Name    Type Description
  /// ------- ---- --------------------------------------------------
  /// Enabled bool If true, file(s) will be created during simulation
  ///

  public class EnableLogNmea : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Logging of NMEA for the simulated position enable/disable.\nIf a receiver is connected, that NMEA is saved as well."; }
    }

    internal const string CmdName = "EnableLogNmea";

    public EnableLogNmea()
      : base(CmdName)
    {}

    public EnableLogNmea(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Logging of NMEA for the simulated position enable/disable.
  /// If a receiver is connected, that NMEA is saved as well.
  ///
  /// 
  ///

  public class IsLogNmeaEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Logging of NMEA for the simulated position enable/disable.\nIf a receiver is connected, that NMEA is saved as well."; }
    }

    internal const string CmdName = "IsLogNmeaEnabled";

    public IsLogNmeaEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsLogNmeaEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- --------------------------------------------------
  /// Enabled bool If true, file(s) will be created during simulation
  ///

  public class IsLogNmeaEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLogNmeaEnabled."; }
    }

    internal const string CmdName = "IsLogNmeaEnabledResult";

    public IsLogNmeaEnabledResult()
      : base(CmdName)
    {}

    public IsLogNmeaEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Rate logging of NMEA data
  ///
  /// Name Type Description
  /// ---- ---- ------------------------------
  /// Rate int  Accepted rates are 1 and 10 Hz
  ///

  public class SetLogNmeaRate : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Rate logging of NMEA data"; }
    }

    internal const string CmdName = "SetLogNmeaRate";

    public SetLogNmeaRate()
      : base(CmdName)
    {}

    public SetLogNmeaRate(int rate)
      : base(CmdName)
    {
      Rate = rate;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Rate")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Rate
    {
      get { return GetValue("Rate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Rate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Rate logging of NMEA data
  ///
  /// 
  ///

  public class GetLogNmeaRate : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Rate logging of NMEA data"; }
    }

    internal const string CmdName = "GetLogNmeaRate";

    public GetLogNmeaRate()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetLogNmeaRate.
  ///
  /// Name Type Description
  /// ---- ---- ------------------------------
  /// Rate int  Accepted rates are 1 and 10 Hz
  ///

  public class LogNmeaRateResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetLogNmeaRate."; }
    }

    internal const string CmdName = "LogNmeaRateResult";

    public LogNmeaRateResult()
      : base(CmdName)
    {}

    public LogNmeaRateResult(CommandBase relatedCommand, int rate)
      : base(CmdName, relatedCommand)
    {
      Rate = rate;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Rate")
      ;
      }
    }

    public int Rate
    {
      get { return GetValue("Rate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Rate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable/Disable Time Synchronization Master.
  /// The Master will control other Skydel simulators with Slave PPS Enabled.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------------------------------------
  /// Enabled bool If true, this simulator will be the master to synchronize simulators.
  ///

  public class EnableMasterPps : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable/Disable Time Synchronization Master.\nThe Master will control other Skydel simulators with Slave PPS Enabled."; }
    }

    internal const string CmdName = "EnableMasterPps";

    public EnableMasterPps()
      : base(CmdName)
    {}

    public EnableMasterPps(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Request for the master status, returns a GetMasterStatusResult
  ///
  /// 
  ///

  public class GetMasterStatus : CommandBase
  {
    public override string Documentation
    {
      get { return "Request for the master status, returns a GetMasterStatusResult"; }
    }

    internal const string CmdName = "GetMasterStatus";

    public GetMasterStatus()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetMasterStatus.
  ///
  /// Name           Type Description
  /// -------------- ---- -------------------------------------
  /// IsMaster       bool True if Skydel is in master mode
  /// SlaveConnected int  The number of connected slaves
  /// Port           int  The listening port, 0 if not a master
  ///

  public class GetMasterStatusResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMasterStatus."; }
    }

    internal const string CmdName = "GetMasterStatusResult";

    public GetMasterStatusResult()
      : base(CmdName)
    {}

    public GetMasterStatusResult(CommandBase relatedCommand, bool isMaster, int slaveConnected, int port)
      : base(CmdName, relatedCommand)
    {
      IsMaster = isMaster;
      SlaveConnected = slaveConnected;
      Port = port;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsMaster")
        && Contains("SlaveConnected")
        && Contains("Port")
      ;
      }
    }

    public bool IsMaster
    {
      get { return GetValue("IsMaster").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsMaster", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SlaveConnected
    {
      get { return GetValue("SlaveConnected").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SlaveConnected", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Port
    {
      get { return GetValue("Port").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable/Disable Time Synchronization Slave.
  /// The Slave will wait for the Master to synchronize the simulators.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------------------------------------------
  /// Enabled bool If true, this simulator will wait for the master to synchronize simulators.
  ///

  public class EnableSlavePps : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable/Disable Time Synchronization Slave.\nThe Slave will wait for the Master to synchronize the simulators."; }
    }

    internal const string CmdName = "EnableSlavePps";

    public EnableSlavePps()
      : base(CmdName)
    {}

    public EnableSlavePps(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Request for the slave status, returns a GetSlaveStatusResult
  ///
  /// 
  ///

  public class GetSlaveStatus : CommandBase
  {
    public override string Documentation
    {
      get { return "Request for the slave status, returns a GetSlaveStatusResult"; }
    }

    internal const string CmdName = "GetSlaveStatus";

    public GetSlaveStatus()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetSlaveStatus.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------
  /// IsSlave     bool   True if Skydel is in slave mode
  /// IsConnected bool   True if Skydel is connected to a master
  /// HostName    string The host name, empty if not a slave
  /// HostPort    int    The host port, 0 if not a slave
  ///

  public class GetSlaveStatusResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSlaveStatus."; }
    }

    internal const string CmdName = "GetSlaveStatusResult";

    public GetSlaveStatusResult()
      : base(CmdName)
    {}

    public GetSlaveStatusResult(CommandBase relatedCommand, bool isSlave, bool isConnected, string hostName, int hostPort)
      : base(CmdName, relatedCommand)
    {
      IsSlave = isSlave;
      IsConnected = isConnected;
      HostName = hostName;
      HostPort = hostPort;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsSlave")
        && Contains("IsConnected")
        && Contains("HostName")
        && Contains("HostPort")
      ;
      }
    }

    public bool IsSlave
    {
      get { return GetValue("IsSlave").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsSlave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsConnected
    {
      get { return GetValue("IsConnected").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsConnected", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string HostName
    {
      get { return GetValue("HostName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("HostName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int HostPort
    {
      get { return GetValue("HostPort").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HostPort", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the next leap second event
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------------------------------------------------------
  /// Enabled bool If true, the future leap second event is set in the navigation message
  /// Seconds int  The future leap seconds value
  /// Date    date The event date
  ///

  public class SetLeapSecondFuture : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the next leap second event"; }
    }

    internal const string CmdName = "SetLeapSecondFuture";

    public SetLeapSecondFuture()
      : base(CmdName)
    {}

    public SetLeapSecondFuture(bool enabled, int seconds, DateTime date)
      : base(CmdName)
    {
      Enabled = enabled;
      Seconds = seconds;
      Date = date;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Seconds")
        && Contains("Date")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Seconds
    {
      get { return GetValue("Seconds").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Seconds", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Date
    {
      get { return GetValue("Date").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Date", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the next leap second event
  ///
  /// 
  ///

  public class GetLeapSecondFuture : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the next leap second event"; }
    }

    internal const string CmdName = "GetLeapSecondFuture";

    public GetLeapSecondFuture()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetLeapSecondFuture.
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------------------------------------------------------
  /// Enabled bool If true, the future leap second event is set in the navigation message
  /// Seconds int  The future leap seconds value
  /// Date    date The event date
  ///

  public class GetLeapSecondFutureResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetLeapSecondFuture."; }
    }

    internal const string CmdName = "GetLeapSecondFutureResult";

    public GetLeapSecondFutureResult()
      : base(CmdName)
    {}

    public GetLeapSecondFutureResult(CommandBase relatedCommand, bool enabled, int seconds, DateTime date)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      Seconds = seconds;
      Date = date;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Seconds")
        && Contains("Date")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Seconds
    {
      get { return GetValue("Seconds").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Seconds", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Date
    {
      get { return GetValue("Date").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Date", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------------------
  /// Enabled bool If true, signal strengh model is enabled for all satellites
  ///

  public class EnableSignalStrengthModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Set signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle"; }
    }

    internal const string CmdName = "EnableSignalStrengthModel";

    public EnableSignalStrengthModel()
      : base(CmdName)
    {}

    public EnableSignalStrengthModel(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle
  ///
  /// 
  ///

  public class IsSignalStrengthModelEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get signal strength model Enable/Disable which affect satellite transmission strength based on their elevation angle"; }
    }

    internal const string CmdName = "IsSignalStrengthModelEnabled";

    public IsSignalStrengthModelEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsSignalStrengthModelEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------------------
  /// Enabled bool If true, signal strengh model is enabled for all satellites
  ///

  public class IsSignalStrengthModelEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSignalStrengthModelEnabled."; }
    }

    internal const string CmdName = "IsSignalStrengthModelEnabledResult";

    public IsSignalStrengthModelEnabledResult()
      : base(CmdName)
    {}

    public IsSignalStrengthModelEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------
  /// Enabled bool If true, mask satellites with elevation angle below masking angle.
  ///

  public class EnableElevationMaskBelow : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow)."; }
    }

    internal const string CmdName = "EnableElevationMaskBelow";

    public EnableElevationMaskBelow()
      : base(CmdName)
    {}

    public EnableElevationMaskBelow(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow).
  ///
  /// 
  ///

  public class IsElevationMaskBelowEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskBelow)."; }
    }

    internal const string CmdName = "IsElevationMaskBelowEnabled";

    public IsElevationMaskBelowEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsElevationMaskBelowEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------
  /// Enabled bool If true, mask satellites with elevation angle below masking angle.
  ///

  public class IsElevationMaskBelowEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsElevationMaskBelowEnabled."; }
    }

    internal const string CmdName = "IsElevationMaskBelowEnabledResult";

    public IsElevationMaskBelowEnabledResult()
      : base(CmdName)
    {}

    public IsElevationMaskBelowEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------
  /// Enabled bool If true, mask satellites with elevation angle above masking angle.
  ///

  public class EnableElevationMaskAbove : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove)."; }
    }

    internal const string CmdName = "EnableElevationMaskAbove";

    public EnableElevationMaskAbove()
      : base(CmdName)
    {}

    public EnableElevationMaskAbove(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove).
  ///
  /// 
  ///

  public class IsElevationMaskAboveEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GNSS satellite mask based on elevation enabled or disabled (See SetElevationMaskAbove)."; }
    }

    internal const string CmdName = "IsElevationMaskAboveEnabled";

    public IsElevationMaskAboveEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsElevationMaskAboveEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------
  /// Enabled bool If true, mask satellites with elevation angle above masking angle.
  ///

  public class IsElevationMaskAboveEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsElevationMaskAboveEnabled."; }
    }

    internal const string CmdName = "IsElevationMaskAboveEnabledResult";

    public IsElevationMaskAboveEnabledResult()
      : base(CmdName)
    {}

    public IsElevationMaskAboveEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set elevation mask angle. See command EnableElevationMaskBelow
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------
  /// Angle double Elevation mask angle in rad
  ///

  public class SetElevationMaskBelow : CommandBase
  {
    public override string Documentation
    {
      get { return "Set elevation mask angle. See command EnableElevationMaskBelow"; }
    }

    internal const string CmdName = "SetElevationMaskBelow";

    public SetElevationMaskBelow()
      : base(CmdName)
    {}

    public SetElevationMaskBelow(double angle)
      : base(CmdName)
    {
      Angle = angle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Angle")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Angle
    {
      get { return GetValue("Angle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Angle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get elevation mask angle. See command EnableElevationMaskBelow
  ///
  /// 
  ///

  public class GetElevationMaskBelow : CommandBase
  {
    public override string Documentation
    {
      get { return "Get elevation mask angle. See command EnableElevationMaskBelow"; }
    }

    internal const string CmdName = "GetElevationMaskBelow";

    public GetElevationMaskBelow()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetElevationMaskBelow.
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------
  /// Angle double Elevation mask angle in rad
  ///

  public class GetElevationMaskBelowResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetElevationMaskBelow."; }
    }

    internal const string CmdName = "GetElevationMaskBelowResult";

    public GetElevationMaskBelowResult()
      : base(CmdName)
    {}

    public GetElevationMaskBelowResult(CommandBase relatedCommand, double angle)
      : base(CmdName, relatedCommand)
    {
      Angle = angle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Angle")
      ;
      }
    }

    public double Angle
    {
      get { return GetValue("Angle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Angle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set elevation mask angle. See command EnableElevationMaskAbove
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------
  /// Angle double Elevation mask angle in rad
  ///

  public class SetElevationMaskAbove : CommandBase
  {
    public override string Documentation
    {
      get { return "Set elevation mask angle. See command EnableElevationMaskAbove"; }
    }

    internal const string CmdName = "SetElevationMaskAbove";

    public SetElevationMaskAbove()
      : base(CmdName)
    {}

    public SetElevationMaskAbove(double angle)
      : base(CmdName)
    {
      Angle = angle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Angle")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Angle
    {
      get { return GetValue("Angle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Angle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get elevation mask angle. See command EnableElevationMaskAbove
  ///
  /// 
  ///

  public class GetElevationMaskAbove : CommandBase
  {
    public override string Documentation
    {
      get { return "Get elevation mask angle. See command EnableElevationMaskAbove"; }
    }

    internal const string CmdName = "GetElevationMaskAbove";

    public GetElevationMaskAbove()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetElevationMaskAbove.
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------
  /// Angle double Elevation mask angle in rad
  ///

  public class GetElevationMaskAboveResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetElevationMaskAbove."; }
    }

    internal const string CmdName = "GetElevationMaskAboveResult";

    public GetElevationMaskAboveResult()
      : base(CmdName)
    {}

    public GetElevationMaskAboveResult(CommandBase relatedCommand, double angle)
      : base(CmdName, relatedCommand)
    {
      Angle = angle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Angle")
      ;
      }
    }

    public double Angle
    {
      get { return GetValue("Angle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Angle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Issue of data, clock
  /// Ephemeris     int           Issue of data, ephemeris
  /// OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
  ///

  public class SetIssueOfData : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "SetIssueOfData";

    public SetIssueOfData()
      : base(CmdName)
    {}

    public SetIssueOfData(int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// 
  ///

  public class GetIssueOfData : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "GetIssueOfData";

    public GetIssueOfData()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIssueOfData.
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Issue of data, clock
  /// Ephemeris     int           Issue of data, ephemeris
  /// OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
  ///

  public class GetIssueOfDataResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIssueOfData."; }
    }

    internal const string CmdName = "GetIssueOfDataResult";

    public GetIssueOfDataResult()
      : base(CmdName)
    {}

    public GetIssueOfDataResult(CommandBase relatedCommand, int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName, relatedCommand)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------------
  /// Navigation    int           Issue of data, navigation
  /// Almanac       int           Issue of data, almanac
  /// OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True
  ///

  public class SetIssueOfDataGalileo : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)"; }
    }

    internal const string CmdName = "SetIssueOfDataGalileo";

    public SetIssueOfDataGalileo()
      : base(CmdName)
    {}

    public SetIssueOfDataGalileo(int navigation, int almanac, bool? overrideRinex = null)
      : base(CmdName)
    {
      Navigation = navigation;
      Almanac = almanac;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Navigation")
        && Contains("Almanac")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Navigation
    {
      get { return GetValue("Navigation").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Navigation", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Almanac
    {
      get { return GetValue("Almanac").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Almanac", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)
  ///
  /// 
  ///

  public class GetIssueOfDataGalileo : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Galileo Issue of data, Navigation (IODNAV) and Issue of data, Almanac (IODA)"; }
    }

    internal const string CmdName = "GetIssueOfDataGalileo";

    public GetIssueOfDataGalileo()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIssueOfDataGalileo.
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------------
  /// Navigation    int           Issue of data, navigation
  /// Almanac       int           Issue of data, almanac
  /// OverrideRinex optional bool If the IODNAV overrides the RINEX IODNAV, default is True
  ///

  public class GetIssueOfDataGalileoResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIssueOfDataGalileo."; }
    }

    internal const string CmdName = "GetIssueOfDataGalileoResult";

    public GetIssueOfDataGalileoResult()
      : base(CmdName)
    {}

    public GetIssueOfDataGalileoResult(CommandBase relatedCommand, int navigation, int almanac, bool? overrideRinex = null)
      : base(CmdName, relatedCommand)
    {
      Navigation = navigation;
      Almanac = almanac;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Navigation")
        && Contains("Almanac")
      ;
      }
    }

    public int Navigation
    {
      get { return GetValue("Navigation").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Navigation", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Almanac
    {
      get { return GetValue("Almanac").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Almanac", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Age of data, clock
  /// Ephemeris     int           Age of data, ephemeris
  /// OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True
  ///

  public class SetAgeOfDataBeiDou : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)"; }
    }

    internal const string CmdName = "SetAgeOfDataBeiDou";

    public SetAgeOfDataBeiDou()
      : base(CmdName)
    {}

    public SetAgeOfDataBeiDou(int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)
  ///
  /// 
  ///

  public class GetAgeOfDataBeiDou : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou Age of data, Ephemeris (AODE) and Age of data, Clock (AODC)"; }
    }

    internal const string CmdName = "GetAgeOfDataBeiDou";

    public GetAgeOfDataBeiDou()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAgeOfDataBeiDou.
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Age of data, clock
  /// Ephemeris     int           Age of data, ephemeris
  /// OverrideRinex optional bool If the AOD overrides the RINEX AOD, default is True
  ///

  public class GetAgeOfDataBeiDouResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAgeOfDataBeiDou."; }
    }

    internal const string CmdName = "GetAgeOfDataBeiDouResult";

    public GetAgeOfDataBeiDouResult()
      : base(CmdName)
    {}

    public GetAgeOfDataBeiDouResult(CommandBase relatedCommand, int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName, relatedCommand)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// Name      Type Description
  /// --------- ---- ------------------------
  /// Clock     int  Issue of data, clock
  /// Ephemeris int  Issue of data, ephemeris
  ///

  public class SetIssueOfDataBeiDou : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "SetIssueOfDataBeiDou";

    public SetIssueOfDataBeiDou()
      : base(CmdName)
    {}

    public SetIssueOfDataBeiDou(int clock, int ephemeris)
      : base(CmdName)
    {
      Clock = clock;
      Ephemeris = ephemeris;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// 
  ///

  public class GetIssueOfDataBeiDou : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "GetIssueOfDataBeiDou";

    public GetIssueOfDataBeiDou()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIssueOfDataBeiDou.
  ///
  /// Name      Type Description
  /// --------- ---- ------------------------
  /// Clock     int  Issue of data, clock
  /// Ephemeris int  Issue of data, ephemeris
  ///

  public class GetIssueOfDataBeiDouResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIssueOfDataBeiDou."; }
    }

    internal const string CmdName = "GetIssueOfDataBeiDouResult";

    public GetIssueOfDataBeiDouResult()
      : base(CmdName)
    {}

    public GetIssueOfDataBeiDouResult(CommandBase relatedCommand, int clock, int ephemeris)
      : base(CmdName, relatedCommand)
    {
      Clock = clock;
      Ephemeris = ephemeris;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Issue of data, clock
  /// Ephemeris     int           Issue of data, ephemeris
  /// OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
  ///

  public class SetIssueOfDataQzss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "SetIssueOfDataQzss";

    public SetIssueOfDataQzss()
      : base(CmdName)
    {}

    public SetIssueOfDataQzss(int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)
  ///
  /// 
  ///

  public class GetIssueOfDataQzss : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS Issue of data, Ephemeris (IODE) and Issue of data, Clock (IODC)"; }
    }

    internal const string CmdName = "GetIssueOfDataQzss";

    public GetIssueOfDataQzss()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIssueOfDataQzss.
  ///
  /// Name          Type          Description
  /// ------------- ------------- ---------------------------------------------------
  /// Clock         int           Issue of data, clock
  /// Ephemeris     int           Issue of data, ephemeris
  /// OverrideRinex optional bool If the IOD overrides the RINEX IOD, default is True
  ///

  public class GetIssueOfDataQzssResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIssueOfDataQzss."; }
    }

    internal const string CmdName = "GetIssueOfDataQzssResult";

    public GetIssueOfDataQzssResult()
      : base(CmdName)
    {}

    public GetIssueOfDataQzssResult(CommandBase relatedCommand, int clock, int ephemeris, bool? overrideRinex = null)
      : base(CmdName, relatedCommand)
    {
      Clock = clock;
      Ephemeris = ephemeris;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Clock")
        && Contains("Ephemeris")
      ;
      }
    }

    public int Clock
    {
      get { return GetValue("Clock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Clock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Ephemeris
    {
      get { return GetValue("Ephemeris").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Ephemeris", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set NavIC Issue of data, Ephemeris and Clock (IODEC)
  ///
  /// Name              Type          Description
  /// ----------------- ------------- -------------------------------------------------------
  /// EphemerisAndClock int           Issue of data, ephemeris and clock
  /// OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True
  ///

  public class SetIssueOfDataNavIC : CommandBase
  {
    public override string Documentation
    {
      get { return "Set NavIC Issue of data, Ephemeris and Clock (IODEC)"; }
    }

    internal const string CmdName = "SetIssueOfDataNavIC";

    public SetIssueOfDataNavIC()
      : base(CmdName)
    {}

    public SetIssueOfDataNavIC(int ephemerisAndClock, bool? overrideRinex = null)
      : base(CmdName)
    {
      EphemerisAndClock = ephemerisAndClock;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("EphemerisAndClock")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int EphemerisAndClock
    {
      get { return GetValue("EphemerisAndClock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("EphemerisAndClock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get NavIC Issue of data, Ephemeris and Clock (IODEC)
  ///
  /// 
  ///

  public class GetIssueOfDataNavIC : CommandBase
  {
    public override string Documentation
    {
      get { return "Get NavIC Issue of data, Ephemeris and Clock (IODEC)"; }
    }

    internal const string CmdName = "GetIssueOfDataNavIC";

    public GetIssueOfDataNavIC()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIssueOfDataNavIC.
  ///
  /// Name              Type          Description
  /// ----------------- ------------- -------------------------------------------------------
  /// EphemerisAndClock int           Issue of data, ephemeris and clock
  /// OverrideRinex     optional bool If the IODEC overrides the RINEX IODEC, default is True
  ///

  public class GetIssueOfDataNavICResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIssueOfDataNavIC."; }
    }

    internal const string CmdName = "GetIssueOfDataNavICResult";

    public GetIssueOfDataNavICResult()
      : base(CmdName)
    {}

    public GetIssueOfDataNavICResult(CommandBase relatedCommand, int ephemerisAndClock, bool? overrideRinex = null)
      : base(CmdName, relatedCommand)
    {
      EphemerisAndClock = ephemerisAndClock;
      OverrideRinex = overrideRinex;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("EphemerisAndClock")
      ;
      }
    }

    public int EphemerisAndClock
    {
      get { return GetValue("EphemerisAndClock").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("EphemerisAndClock", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool? OverrideRinex
    {
      get { return GetValue("OverrideRinex").ToObject<bool?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OverrideRinex");
        else
          SetValue("OverrideRinex", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS SV configuration flag for one satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32
  /// SvConfig    int             SV Config 0..4
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsConfigurationCodeForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS SV configuration flag for one satellite"; }
    }

    internal const string CmdName = "SetGpsConfigurationCodeForSV";

    public SetGpsConfigurationCodeForSV()
      : base(CmdName)
    {}

    public SetGpsConfigurationCodeForSV(int svId, int svConfig, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      SvConfig = svConfig;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("SvConfig")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvConfig
    {
      get { return GetValue("SvConfig").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvConfig", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS SV configuration flag for one satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsConfigurationCodeForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS SV configuration flag for one satellite"; }
    }

    internal const string CmdName = "GetGpsConfigurationCodeForSV";

    public GetGpsConfigurationCodeForSV()
      : base(CmdName)
    {}

    public GetGpsConfigurationCodeForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsConfigurationCodeForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32
  /// SvConfig    int             SV Config 0..4
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsConfigurationCodeForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsConfigurationCodeForSV."; }
    }

    internal const string CmdName = "GetGpsConfigurationCodeForSVResult";

    public GetGpsConfigurationCodeForSVResult()
      : base(CmdName)
    {}

    public GetGpsConfigurationCodeForSVResult(CommandBase relatedCommand, int svId, int svConfig, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      SvConfig = svConfig;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("SvConfig")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvConfig
    {
      get { return GetValue("SvConfig").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvConfig", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use SetGpsConfigurationForEachSV.
  /// 
  /// Set GPS SV configuration flag for each SVs
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvConfigs   array int       SV Config of all satellite
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsSVConfigurationForAllSat : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use SetGpsConfigurationForEachSV.\n\nSet GPS SV configuration flag for each SVs"; }
    }

    internal const string CmdName = "SetGpsSVConfigurationForAllSat";

    public SetGpsSVConfigurationForAllSat()
      : base(CmdName)
    {}

    public SetGpsSVConfigurationForAllSat(List<int> svConfigs, string dataSetName = null)
      : base(CmdName)
    {
      SvConfigs = svConfigs;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvConfigs")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public List<int> SvConfigs
    {
      get { return GetValue("SvConfigs").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SvConfigs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS SV configuration flag for each SVs
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvConfigs   array int       SV Config of all satellite
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsConfigurationForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS SV configuration flag for each SVs"; }
    }

    internal const string CmdName = "SetGpsConfigurationForEachSV";

    public SetGpsConfigurationForEachSV()
      : base(CmdName)
    {}

    public SetGpsConfigurationForEachSV(List<int> svConfigs, string dataSetName = null)
      : base(CmdName)
    {
      SvConfigs = svConfigs;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvConfigs")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public List<int> SvConfigs
    {
      get { return GetValue("SvConfigs").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SvConfigs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use GetGpsConfigurationForEachSV.
  /// 
  /// Get GPS SV configuration flag for each SVs
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsSVConfigurationForAllSat : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetGpsSVConfigurationForAllSat is deprecated since 21.3. You may use GetGpsConfigurationForEachSV.\n\nGet GPS SV configuration flag for each SVs"; }
    }

    internal const string CmdName = "GetGpsSVConfigurationForAllSat";

    public GetGpsSVConfigurationForAllSat()
      : base(CmdName)
    {}

    public GetGpsSVConfigurationForAllSat(string dataSetName = null)
      : base(CmdName)
    {
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS SV configuration flag for each SVs
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsConfigurationForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS SV configuration flag for each SVs"; }
    }

    internal const string CmdName = "GetGpsConfigurationForEachSV";

    public GetGpsConfigurationForEachSV()
      : base(CmdName)
    {}

    public GetGpsConfigurationForEachSV(string dataSetName = null)
      : base(CmdName)
    {
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsConfigurationForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvConfigs   array int       SV Config of all satellite
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsSVConfigurationForAllSatResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsConfigurationForEachSV."; }
    }
  
    internal const string CmdName = "GetGpsSVConfigurationForAllSatResult";

    public GetGpsSVConfigurationForAllSatResult()
      : base(CmdName)
    {}

    public GetGpsSVConfigurationForAllSatResult(CommandBase relatedCommand, List<int> svConfigs, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvConfigs = svConfigs;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvConfigs")
      ;
      }
    }

    public List<int> SvConfigs
    {
      get { return GetValue("SvConfigs").ToObject<List<int>>(CommandBase.Serializer); }
      set { SetValue("SvConfigs", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvConfigs   array int       SV Config of all satellite
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsConfigurationForEachSVResult : GetGpsSVConfigurationForAllSatResult
  {
    internal new const string CmdName = "GetGpsConfigurationForEachSVResult";

    public GetGpsConfigurationForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGpsConfigurationForEachSVResult(CommandBase relatedCommand, List<int> svConfigs, string dataSetName = null)
      : base(relatedCommand, svConfigs, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set GPS nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsDataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS nav data health"; }
    }

    internal const string CmdName = "SetGpsDataHealthForSV";

    public SetGpsDataHealthForSV()
      : base(CmdName)
    {}

    public SetGpsDataHealthForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsDataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS nav data health"; }
    }

    internal const string CmdName = "GetGpsDataHealthForSV";

    public GetGpsDataHealthForSV()
      : base(CmdName)
    {}

    public GetGpsDataHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsDataHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsDataHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsDataHealthForSV."; }
    }

    internal const string CmdName = "GetGpsDataHealthForSVResult";

    public GetGpsDataHealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsDataHealthForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS signal health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      int             Signal health 0..31
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsSignalHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS signal health"; }
    }

    internal const string CmdName = "SetGpsSignalHealthForSV";

    public SetGpsSignalHealthForSV()
      : base(CmdName)
    {}

    public SetGpsSignalHealthForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS signal health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsSignalHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS signal health"; }
    }

    internal const string CmdName = "GetGpsSignalHealthForSV";

    public GetGpsSignalHealthForSV()
      : base(CmdName)
    {}

    public GetGpsSignalHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsSignalHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      int             Signal health 0..31
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsSignalHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsSignalHealthForSV."; }
    }

    internal const string CmdName = "GetGpsSignalHealthForSVResult";

    public GetGpsSignalHealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsSignalHealthForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Galileo data health for I/NAV and F/NAV message
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID number 1..36.
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// Health      bool            False means Navigation data valid; True means Working without guarantee
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoDataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Galileo data health for I/NAV and F/NAV message"; }
    }

    internal const string CmdName = "SetGalileoDataHealthForSV";

    public SetGalileoDataHealthForSV()
      : base(CmdName)
    {}

    public SetGalileoDataHealthForSV(int svId, string component, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Component = component;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Galileo data health for I/NAV and F/NAV message
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID number 1..36.
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoDataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Galileo data health for I/NAV and F/NAV message"; }
    }

    internal const string CmdName = "GetGalileoDataHealthForSV";

    public GetGalileoDataHealthForSV()
      : base(CmdName)
    {}

    public GetGalileoDataHealthForSV(int svId, string component, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Component = component;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGalileoDataHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID number 1..36.
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// Health      bool            False means Navigation data valid; True means Working without guarantee
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoDataHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGalileoDataHealthForSV."; }
    }

    internal const string CmdName = "GetGalileoDataHealthForSVResult";

    public GetGalileoDataHealthForSVResult()
      : base(CmdName)
    {}

    public GetGalileoDataHealthForSVResult(CommandBase relatedCommand, int svId, string component, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Component = component;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Galileo signal health for I/NAV and F/NAV message
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..36
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// Health      int             Signal health 0..3
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoSignalHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Galileo signal health for I/NAV and F/NAV message"; }
    }

    internal const string CmdName = "SetGalileoSignalHealthForSV";

    public SetGalileoSignalHealthForSV()
      : base(CmdName)
    {}

    public SetGalileoSignalHealthForSV(int svId, string component, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Component = component;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Galileo signal health for I/NAV and F/NAV message
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..36
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoSignalHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Galileo signal health for I/NAV and F/NAV message"; }
    }

    internal const string CmdName = "GetGalileoSignalHealthForSV";

    public GetGalileoSignalHealthForSV()
      : base(CmdName)
    {}

    public GetGalileoSignalHealthForSV(int svId, string component, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Component = component;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGalileoSignalHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..36
  /// Component   string          Component is either "E5a", "E5b", or "E1B"
  /// Health      int             Signal health 0..3
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoSignalHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGalileoSignalHealthForSV."; }
    }

    internal const string CmdName = "GetGalileoSignalHealthForSVResult";

    public GetGalileoSignalHealthForSVResult()
      : base(CmdName)
    {}

    public GetGalileoSignalHealthForSVResult(CommandBase relatedCommand, int svId, string component, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Component = component;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Component")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Component
    {
      get { return GetValue("Component").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Component", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS L1 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsL1HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS L1 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "SetGpsL1HealthForSV";

    public SetGpsL1HealthForSV()
      : base(CmdName)
    {}

    public SetGpsL1HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS L1 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL1HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS L1 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "GetGpsL1HealthForSV";

    public GetGpsL1HealthForSV()
      : base(CmdName)
    {}

    public GetGpsL1HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsL1HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32
  /// Health      bool            L1 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL1HealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsL1HealthForSV."; }
    }

    internal const string CmdName = "GetGpsL1HealthForSVResult";

    public GetGpsL1HealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsL1HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS L2 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsL2HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS L2 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "SetGpsL2HealthForSV";

    public SetGpsL2HealthForSV()
      : base(CmdName)
    {}

    public SetGpsL2HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS L2 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL2HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS L2 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "GetGpsL2HealthForSV";

    public GetGpsL2HealthForSV()
      : base(CmdName)
    {}

    public GetGpsL2HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsL2HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL2HealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsL2HealthForSV."; }
    }

    internal const string CmdName = "GetGpsL2HealthForSVResult";

    public GetGpsL2HealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsL2HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS L5 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS L5 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "SetGpsL5HealthForSV";

    public SetGpsL5HealthForSV()
      : base(CmdName)
    {}

    public SetGpsL5HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS L5 health (used with CNAV and CNAV2)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS L5 health (used with CNAV and CNAV2)"; }
    }

    internal const string CmdName = "GetGpsL5HealthForSV";

    public GetGpsL5HealthForSV()
      : base(CmdName)
    {}

    public GetGpsL5HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsL5HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL5HealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsL5HealthForSV."; }
    }

    internal const string CmdName = "GetGpsL5HealthForSVResult";

    public GetGpsL5HealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsL5HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS L1C health (used in CNAV2 only)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsL1cHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS L1C health (used in CNAV2 only)"; }
    }

    internal const string CmdName = "SetGpsL1cHealthForSV";

    public SetGpsL1cHealthForSV()
      : base(CmdName)
    {}

    public SetGpsL1cHealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS L1C health (used in CNAV2 only)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL1cHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS L1C health (used in CNAV2 only)"; }
    }

    internal const string CmdName = "GetGpsL1cHealthForSV";

    public GetGpsL1cHealthForSV()
      : base(CmdName)
    {}

    public GetGpsL1cHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsL1cHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad or unavailable
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsL1cHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsL1cHealthForSV."; }
    }

    internal const string CmdName = "GetGpsL1cHealthForSVResult";

    public GetGpsL1cHealthForSVResult()
      : base(CmdName)
    {}

    public GetGpsL1cHealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS Anti-Spoofing Flag
  ///
  /// Name         Type            Description
  /// ------------ --------------- -------------------------------------------------------------------------------------------
  /// SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
  /// DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsAntiSpoofingFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS Anti-Spoofing Flag"; }
    }

    internal const string CmdName = "SetGpsAntiSpoofingFlagForSV";

    public SetGpsAntiSpoofingFlagForSV()
      : base(CmdName)
    {}

    public SetGpsAntiSpoofingFlagForSV(int svId, GpsASFlag antiSpoofing, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      AntiSpoofing = antiSpoofing;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("AntiSpoofing")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GpsASFlag AntiSpoofing
    {
      get { return GetValue("AntiSpoofing").ToObject<GpsASFlag>(CommandBase.Serializer); }
      set
      {
          SetValue("AntiSpoofing", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS Anti-Spoofing Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsAntiSpoofingFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS Anti-Spoofing Flag"; }
    }

    internal const string CmdName = "GetGpsAntiSpoofingFlagForSV";

    public GetGpsAntiSpoofingFlagForSV()
      : base(CmdName)
    {}

    public GetGpsAntiSpoofingFlagForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsAntiSpoofingFlagForSV.
  ///
  /// Name         Type            Description
  /// ------------ --------------- -------------------------------------------------------------------------------------------
  /// SvId         int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// AntiSpoofing GpsASFlag       GPS Anti-Spoofing Flag.
  /// DataSetName  optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsAntiSpoofingFlagForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsAntiSpoofingFlagForSV."; }
    }

    internal const string CmdName = "GetGpsAntiSpoofingFlagForSVResult";

    public GetGpsAntiSpoofingFlagForSVResult()
      : base(CmdName)
    {}

    public GetGpsAntiSpoofingFlagForSVResult(CommandBase relatedCommand, int svId, GpsASFlag antiSpoofing, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      AntiSpoofing = antiSpoofing;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("AntiSpoofing")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GpsASFlag AntiSpoofing
    {
      get { return GetValue("AntiSpoofing").ToObject<GpsASFlag>(CommandBase.Serializer); }
      set
      {
          SetValue("AntiSpoofing", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS NAV Alert Flag"; }
    }

    internal const string CmdName = "SetGpsNavAlertFlagForSV";

    public SetGpsNavAlertFlagForSV()
      : base(CmdName)
    {}

    public SetGpsNavAlertFlagForSV(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS NAV Alert Flag"; }
    }

    internal const string CmdName = "GetGpsNavAlertFlagForSV";

    public GetGpsNavAlertFlagForSV()
      : base(CmdName)
    {}

    public GetGpsNavAlertFlagForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsNavAlertFlagForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Alert       bool            GPS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsNavAlertFlagForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsNavAlertFlagForSV."; }
    }

    internal const string CmdName = "GetGpsNavAlertFlagForSVResult";

    public GetGpsNavAlertFlagForSVResult()
      : base(CmdName)
    {}

    public GetGpsNavAlertFlagForSVResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS CNAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsCNavAlertFlagToSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS CNAV Alert Flag"; }
    }

    internal const string CmdName = "SetGpsCNavAlertFlagToSV";

    public SetGpsCNavAlertFlagToSV()
      : base(CmdName)
    {}

    public SetGpsCNavAlertFlagToSV(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS CNAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsCNavAlertFlagToSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS CNAV Alert Flag"; }
    }

    internal const string CmdName = "GetGpsCNavAlertFlagToSV";

    public GetGpsCNavAlertFlagToSV()
      : base(CmdName)
    {}

    public GetGpsCNavAlertFlagToSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsCNavAlertFlagToSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite's SV ID 1..32, or use 0 to apply new value to all satellites.
  /// Alert       bool            GPS CNAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsCNavAlertFlagToSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsCNavAlertFlagToSV."; }
    }

    internal const string CmdName = "GetGpsCNavAlertFlagToSVResult";

    public GetGpsCNavAlertFlagToSVResult()
      : base(CmdName)
    {}

    public GetGpsCNavAlertFlagToSVResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou satellite health info
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouHealthInfoForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou satellite health info"; }
    }

    internal const string CmdName = "SetBeiDouHealthInfoForSV";

    public SetBeiDouHealthInfoForSV()
      : base(CmdName)
    {}

    public SetBeiDouHealthInfoForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou satellite health info
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouHealthInfoForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou satellite health info"; }
    }

    internal const string CmdName = "GetBeiDouHealthInfoForSV";

    public GetBeiDouHealthInfoForSV()
      : base(CmdName)
    {}

    public GetBeiDouHealthInfoForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouHealthInfoForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 9-bit integer : 0, 2, 64, 66, 128, 130, 192, 194, 256 or 511
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouHealthInfoForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouHealthInfoForSV."; }
    }

    internal const string CmdName = "GetBeiDouHealthInfoForSVResult";

    public GetBeiDouHealthInfoForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouHealthInfoForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou satellite autonomous health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      bool            Status, false = Good, true = Not Good
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouAutonomousHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou satellite autonomous health"; }
    }

    internal const string CmdName = "SetBeiDouAutonomousHealthForSV";

    public SetBeiDouAutonomousHealthForSV()
      : base(CmdName)
    {}

    public SetBeiDouAutonomousHealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou satellite autonomous health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouAutonomousHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou satellite autonomous health"; }
    }

    internal const string CmdName = "GetBeiDouAutonomousHealthForSV";

    public GetBeiDouAutonomousHealthForSV()
      : base(CmdName)
    {}

    public GetBeiDouAutonomousHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouAutonomousHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      bool            Status, false = Good, true = Not Good
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouAutonomousHealthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouAutonomousHealthForSV."; }
    }

    internal const string CmdName = "GetBeiDouAutonomousHealthForSVResult";

    public GetBeiDouAutonomousHealthForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouAutonomousHealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou CNav satellite health info
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouCNavHealthInfoForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou CNav satellite health info"; }
    }

    internal const string CmdName = "SetBeiDouCNavHealthInfoForSV";

    public SetBeiDouCNavHealthInfoForSV()
      : base(CmdName)
    {}

    public SetBeiDouCNavHealthInfoForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou CNav satellite health info
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouCNavHealthInfoForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou CNav satellite health info"; }
    }

    internal const string CmdName = "GetBeiDouCNavHealthInfoForSV";

    public GetBeiDouCNavHealthInfoForSV()
      : base(CmdName)
    {}

    public GetBeiDouCNavHealthInfoForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouCNavHealthInfoForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 8-bit integer : 0, 32, 64, 96, 128 or 255
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouCNavHealthInfoForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouCNavHealthInfoForSV."; }
    }

    internal const string CmdName = "GetBeiDouCNavHealthInfoForSVResult";

    public GetBeiDouCNavHealthInfoForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouCNavHealthInfoForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou satellite health status
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouHealthStatusForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou satellite health status"; }
    }

    internal const string CmdName = "SetBeiDouHealthStatusForSV";

    public SetBeiDouHealthStatusForSV()
      : base(CmdName)
    {}

    public SetBeiDouHealthStatusForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou satellite health status
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouHealthStatusForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou satellite health status"; }
    }

    internal const string CmdName = "GetBeiDouHealthStatusForSV";

    public GetBeiDouHealthStatusForSV()
      : base(CmdName)
    {}

    public GetBeiDouHealthStatusForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouHealthStatusForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites.
  /// Health      int             Health Info, 2-bit integer : 0, 1, 2 or 3
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouHealthStatusForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouHealthStatusForSV."; }
    }

    internal const string CmdName = "GetBeiDouHealthStatusForSVResult";

    public GetBeiDouHealthStatusForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouHealthStatusForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GLONASS satellite Ephemeris Health Flag Bn(ln)
  ///
  /// Name   Type Description
  /// ------ ---- --------------------------------------
  /// SvId   int  The satellite's SV ID 1..24
  /// Health bool Status, false = OK, true = Malfunction
  ///

  public class SetGlonassEphemerisHealthFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GLONASS satellite Ephemeris Health Flag Bn(ln)"; }
    }

    internal const string CmdName = "SetGlonassEphemerisHealthFlagForSV";

    public SetGlonassEphemerisHealthFlagForSV()
      : base(CmdName)
    {}

    public SetGlonassEphemerisHealthFlagForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GLONASS satellite Ephemeris Health Flag Bn(ln)
  ///
  /// Name Type Description
  /// ---- ---- ---------------------------
  /// SvId int  The satellite's SV ID 1..24
  ///

  public class GetGlonassEphemerisHealthFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GLONASS satellite Ephemeris Health Flag Bn(ln)"; }
    }

    internal const string CmdName = "GetGlonassEphemerisHealthFlagForSV";

    public GetGlonassEphemerisHealthFlagForSV()
      : base(CmdName)
    {}

    public GetGlonassEphemerisHealthFlagForSV(int svId)
      : base(CmdName)
    {
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGlonassEphemerisHealthFlagForSV.
  ///
  /// Name   Type Description
  /// ------ ---- --------------------------------------
  /// SvId   int  The satellite's SV ID 1..24
  /// Health bool Status, false = OK, true = Malfunction
  ///

  public class GetGlonassEphemerisHealthFlagForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlonassEphemerisHealthFlagForSV."; }
    }

    internal const string CmdName = "GetGlonassEphemerisHealthFlagForSVResult";

    public GetGlonassEphemerisHealthFlagForSVResult()
      : base(CmdName)
    {}

    public GetGlonassEphemerisHealthFlagForSVResult(CommandBase relatedCommand, int svId, bool health)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GLONASS satellite Almanac Unhealthy Flag Cn
  ///
  /// Name   Type Description
  /// ------ ---- ----------------------------------------------------------
  /// SvId   int  The satellite's SV ID 1..24
  /// Health bool Status, false = Non-operability, true = Operability (Good)
  ///

  public class SetGlonassAlmanacUnhealthyFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GLONASS satellite Almanac Unhealthy Flag Cn"; }
    }

    internal const string CmdName = "SetGlonassAlmanacUnhealthyFlagForSV";

    public SetGlonassAlmanacUnhealthyFlagForSV()
      : base(CmdName)
    {}

    public SetGlonassAlmanacUnhealthyFlagForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GLONASS satellite Almanac Unhealthy Flag Cn
  ///
  /// Name Type Description
  /// ---- ---- ---------------------------
  /// SvId int  The satellite's SV ID 1..24
  ///

  public class GetGlonassAlmanacUnhealthyFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GLONASS satellite Almanac Unhealthy Flag Cn"; }
    }

    internal const string CmdName = "GetGlonassAlmanacUnhealthyFlagForSV";

    public GetGlonassAlmanacUnhealthyFlagForSV()
      : base(CmdName)
    {}

    public GetGlonassAlmanacUnhealthyFlagForSV(int svId)
      : base(CmdName)
    {
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGlonassAlmanacUnhealthyFlagForSV.
  ///
  /// Name   Type Description
  /// ------ ---- ----------------------------------------------------------
  /// SvId   int  The satellite's SV ID 1..24
  /// Health bool Status, false = Non-operability, true = Operability (Good)
  ///

  public class GetGlonassAlmanacUnhealthyFlagForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlonassAlmanacUnhealthyFlagForSV."; }
    }

    internal const string CmdName = "GetGlonassAlmanacUnhealthyFlagForSVResult";

    public GetGlonassAlmanacUnhealthyFlagForSVResult()
      : base(CmdName)
    {}

    public GetGlonassAlmanacUnhealthyFlagForSVResult(CommandBase relatedCommand, int svId, bool health)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use SetQzssL1DataHealthForSV.
  /// 
  /// Set QZSS L1 C/A nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteL1DataHealth : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use SetQzssL1DataHealthForSV.\n\nSet QZSS L1 C/A nav data health"; }
    }

    internal const string CmdName = "SetQzssSatelliteL1DataHealth";

    public SetQzssSatelliteL1DataHealth()
      : base(CmdName)
    {}

    public SetQzssSatelliteL1DataHealth(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS L1 C/A nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssL1DataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS L1 C/A nav data health"; }
    }

    internal const string CmdName = "SetQzssL1DataHealthForSV";

    public SetQzssL1DataHealthForSV()
      : base(CmdName)
    {}

    public SetQzssL1DataHealthForSV(int svId, int health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use GetQzssL1DataHealthForSV.
  /// 
  /// Get QZSS L1 C/A nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1DataHealth : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteL1DataHealth is deprecated since 21.3. You may use GetQzssL1DataHealthForSV.\n\nGet QZSS L1 C/A nav data health"; }
    }

    internal const string CmdName = "GetQzssSatelliteL1DataHealth";

    public GetQzssSatelliteL1DataHealth()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1DataHealth(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS L1 C/A nav data health
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1DataHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS L1 C/A nav data health"; }
    }

    internal const string CmdName = "GetQzssL1DataHealthForSV";

    public GetQzssL1DataHealthForSV()
      : base(CmdName)
    {}

    public GetQzssL1DataHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL1DataHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1DataHealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL1DataHealthForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteL1DataHealthResult";

    public GetQzssSatelliteL1DataHealthResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1DataHealthResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      int             Data health 0..7
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1DataHealthForSVResult : GetQzssSatelliteL1DataHealthResult
  {
    internal new const string CmdName = "GetQzssL1DataHealthForSVResult";

    public GetQzssL1DataHealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssL1DataHealthForSVResult(CommandBase relatedCommand, int svId, int health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssSatelliteL1Health is deprecated since 21.3. You may use SetQzssL1HealthForSV.
  /// 
  /// Set QZSS L1 health (Health of L1C/A signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteL1Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteL1Health is deprecated since 21.3. You may use SetQzssL1HealthForSV.\n\nSet QZSS L1 health (Health of L1C/A signal)"; }
    }

    internal const string CmdName = "SetQzssSatelliteL1Health";

    public SetQzssSatelliteL1Health()
      : base(CmdName)
    {}

    public SetQzssSatelliteL1Health(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS L1 health (Health of L1C/A signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssL1HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS L1 health (Health of L1C/A signal)"; }
    }

    internal const string CmdName = "SetQzssL1HealthForSV";

    public SetQzssL1HealthForSV()
      : base(CmdName)
    {}

    public SetQzssL1HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteL1Health is deprecated since 21.3. You may use GetQzssL1HealthForSV.
  /// 
  /// Get QZSS L1 health (Health of L1C/A signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteL1Health is deprecated since 21.3. You may use GetQzssL1HealthForSV.\n\nGet QZSS L1 health (Health of L1C/A signal)"; }
    }

    internal const string CmdName = "GetQzssSatelliteL1Health";

    public GetQzssSatelliteL1Health()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1Health(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS L1 health (Health of L1C/A signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS L1 health (Health of L1C/A signal)"; }
    }

    internal const string CmdName = "GetQzssL1HealthForSV";

    public GetQzssL1HealthForSV()
      : base(CmdName)
    {}

    public GetQzssL1HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL1HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1HealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL1HealthForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteL1HealthResult";

    public GetQzssSatelliteL1HealthResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1HealthResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1HealthForSVResult : GetQzssSatelliteL1HealthResult
  {
    internal new const string CmdName = "GetQzssL1HealthForSVResult";

    public GetQzssL1HealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssL1HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssSatelliteL2Health is deprecated since 21.3. You may use SetQzssL2HealthForSV.
  /// 
  /// Set QZSS L2 health (Health of L2C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteL2Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteL2Health is deprecated since 21.3. You may use SetQzssL2HealthForSV.\n\nSet QZSS L2 health (Health of L2C signal)"; }
    }

    internal const string CmdName = "SetQzssSatelliteL2Health";

    public SetQzssSatelliteL2Health()
      : base(CmdName)
    {}

    public SetQzssSatelliteL2Health(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS L2 health (Health of L2C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssL2HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS L2 health (Health of L2C signal)"; }
    }

    internal const string CmdName = "SetQzssL2HealthForSV";

    public SetQzssL2HealthForSV()
      : base(CmdName)
    {}

    public SetQzssL2HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteL2Health is deprecated since 21.3. You may use GetQzssL2HealthForSV.
  /// 
  /// Get QZSS L2 health (Health of L2C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL2Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteL2Health is deprecated since 21.3. You may use GetQzssL2HealthForSV.\n\nGet QZSS L2 health (Health of L2C signal)"; }
    }

    internal const string CmdName = "GetQzssSatelliteL2Health";

    public GetQzssSatelliteL2Health()
      : base(CmdName)
    {}

    public GetQzssSatelliteL2Health(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS L2 health (Health of L2C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL2HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS L2 health (Health of L2C signal)"; }
    }

    internal const string CmdName = "GetQzssL2HealthForSV";

    public GetQzssL2HealthForSV()
      : base(CmdName)
    {}

    public GetQzssL2HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL2HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL2HealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL2HealthForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteL2HealthResult";

    public GetQzssSatelliteL2HealthResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteL2HealthResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L2 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL2HealthForSVResult : GetQzssSatelliteL2HealthResult
  {
    internal new const string CmdName = "GetQzssL2HealthForSVResult";

    public GetQzssL2HealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssL2HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssSatelliteL5Health is deprecated since 21.3. You may use SetQzssL5HealthForSV.
  /// 
  /// Set QZSS L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteL5Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteL5Health is deprecated since 21.3. You may use SetQzssL5HealthForSV.\n\nSet QZSS L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "SetQzssSatelliteL5Health";

    public SetQzssSatelliteL5Health()
      : base(CmdName)
    {}

    public SetQzssSatelliteL5Health(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "SetQzssL5HealthForSV";

    public SetQzssL5HealthForSV()
      : base(CmdName)
    {}

    public SetQzssL5HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteL5Health is deprecated since 21.3. You may use GetQzssL5HealthForSV.
  /// 
  /// Get QZSS L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL5Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteL5Health is deprecated since 21.3. You may use GetQzssL5HealthForSV.\n\nGet QZSS L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "GetQzssSatelliteL5Health";

    public GetQzssSatelliteL5Health()
      : base(CmdName)
    {}

    public GetQzssSatelliteL5Health(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "GetQzssL5HealthForSV";

    public GetQzssL5HealthForSV()
      : base(CmdName)
    {}

    public GetQzssL5HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL5HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL5HealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL5HealthForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteL5HealthResult";

    public GetQzssSatelliteL5HealthResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteL5HealthResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL5HealthForSVResult : GetQzssSatelliteL5HealthResult
  {
    internal new const string CmdName = "GetQzssL5HealthForSVResult";

    public GetQzssL5HealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssL5HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssSatelliteL1cHealth is deprecated since 21.3. You may use SetQzssL1cHealthForSV.
  /// 
  /// Set QZSS L1C health (Health of L1C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteL1cHealth : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteL1cHealth is deprecated since 21.3. You may use SetQzssL1cHealthForSV.\n\nSet QZSS L1C health (Health of L1C signal)"; }
    }

    internal const string CmdName = "SetQzssSatelliteL1cHealth";

    public SetQzssSatelliteL1cHealth()
      : base(CmdName)
    {}

    public SetQzssSatelliteL1cHealth(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS L1C health (Health of L1C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssL1cHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS L1C health (Health of L1C signal)"; }
    }

    internal const string CmdName = "SetQzssL1cHealthForSV";

    public SetQzssL1cHealthForSV()
      : base(CmdName)
    {}

    public SetQzssL1cHealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteL1cHealth is deprecated since 21.3. You may use GetQzssL1cHealthForSV.
  /// 
  /// Get QZSS L1C health (Health of L1C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1cHealth : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteL1cHealth is deprecated since 21.3. You may use GetQzssL1cHealthForSV.\n\nGet QZSS L1C health (Health of L1C signal)"; }
    }

    internal const string CmdName = "GetQzssSatelliteL1cHealth";

    public GetQzssSatelliteL1cHealth()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1cHealth(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS L1C health (Health of L1C signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1cHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS L1C health (Health of L1C signal)"; }
    }

    internal const string CmdName = "GetQzssL1cHealthForSV";

    public GetQzssL1cHealthForSV()
      : base(CmdName)
    {}

    public GetQzssL1cHealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL1cHealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteL1cHealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL1cHealthForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteL1cHealthResult";

    public GetQzssSatelliteL1cHealthResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteL1cHealthResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Health      bool            L1C health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssL1cHealthForSVResult : GetQzssSatelliteL1cHealthResult
  {
    internal new const string CmdName = "GetQzssL1cHealthForSVResult";

    public GetQzssL1cHealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssL1cHealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use SetQzssNavAlertFlagForSV.
  /// 
  /// Set QZSS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssSatelliteNavAlertFlag : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use SetQzssNavAlertFlagForSV.\n\nSet QZSS NAV Alert Flag"; }
    }

    internal const string CmdName = "SetQzssSatelliteNavAlertFlag";

    public SetQzssSatelliteNavAlertFlag()
      : base(CmdName)
    {}

    public SetQzssSatelliteNavAlertFlag(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS NAV Alert Flag"; }
    }

    internal const string CmdName = "SetQzssNavAlertFlagForSV";

    public SetQzssNavAlertFlagForSV()
      : base(CmdName)
    {}

    public SetQzssNavAlertFlagForSV(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use GetQzssNavAlertFlagForSV.
  /// 
  /// Get QZSS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteNavAlertFlag : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssSatelliteNavAlertFlag is deprecated since 21.3. You may use GetQzssNavAlertFlagForSV.\n\nGet QZSS NAV Alert Flag"; }
    }

    internal const string CmdName = "GetQzssSatelliteNavAlertFlag";

    public GetQzssSatelliteNavAlertFlag()
      : base(CmdName)
    {}

    public GetQzssSatelliteNavAlertFlag(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS NAV Alert Flag"; }
    }

    internal const string CmdName = "GetQzssNavAlertFlagForSV";

    public GetQzssNavAlertFlagForSV()
      : base(CmdName)
    {}

    public GetQzssNavAlertFlagForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssNavAlertFlagForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssSatelliteNavAlertFlagResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssNavAlertFlagForSV."; }
    }
  
    internal const string CmdName = "GetQzssSatelliteNavAlertFlagResult";

    public GetQzssSatelliteNavAlertFlagResult()
      : base(CmdName)
    {}

    public GetQzssSatelliteNavAlertFlagResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites.
  /// Alert       bool            QZSS NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssNavAlertFlagForSVResult : GetQzssSatelliteNavAlertFlagResult
  {
    internal new const string CmdName = "GetQzssNavAlertFlagForSVResult";

    public GetQzssNavAlertFlagForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssNavAlertFlagForSVResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(relatedCommand, svId, alert, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetNavICSatelliteL5Health is deprecated since 21.3. You may use SetNavICL5HealthForSV.
  /// 
  /// Set NavIC L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICSatelliteL5Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetNavICSatelliteL5Health is deprecated since 21.3. You may use SetNavICL5HealthForSV.\n\nSet NavIC L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "SetNavICSatelliteL5Health";

    public SetNavICSatelliteL5Health()
      : base(CmdName)
    {}

    public SetNavICSatelliteL5Health(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set NavIC L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set NavIC L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "SetNavICL5HealthForSV";

    public SetNavICL5HealthForSV()
      : base(CmdName)
    {}

    public SetNavICL5HealthForSV(int svId, bool health, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetNavICSatelliteL5Health is deprecated since 21.3. You may use GetNavICL5HealthForSV.
  /// 
  /// Get NavIC L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICSatelliteL5Health : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetNavICSatelliteL5Health is deprecated since 21.3. You may use GetNavICL5HealthForSV.\n\nGet NavIC L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "GetNavICSatelliteL5Health";

    public GetNavICSatelliteL5Health()
      : base(CmdName)
    {}

    public GetNavICSatelliteL5Health(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get NavIC L5 health (Health of L5 signal)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICL5HealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get NavIC L5 health (Health of L5 signal)"; }
    }

    internal const string CmdName = "GetNavICL5HealthForSV";

    public GetNavICL5HealthForSV()
      : base(CmdName)
    {}

    public GetNavICL5HealthForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetNavICL5HealthForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICSatelliteL5HealthResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetNavICL5HealthForSV."; }
    }
  
    internal const string CmdName = "GetNavICSatelliteL5HealthResult";

    public GetNavICSatelliteL5HealthResult()
      : base(CmdName)
    {}

    public GetNavICSatelliteL5HealthResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Health = health;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Health", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Health      bool            L5 health, false = signal OK, true = signal bad
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICL5HealthForSVResult : GetNavICSatelliteL5HealthResult
  {
    internal new const string CmdName = "GetNavICL5HealthForSVResult";

    public GetNavICL5HealthForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetNavICL5HealthForSVResult(CommandBase relatedCommand, int svId, bool health, string dataSetName = null)
      : base(relatedCommand, svId, health, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use SetNavICNavAlertFlagForSV.
  /// 
  /// Set NavIC NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICSatelliteNavAlertFlag : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use SetNavICNavAlertFlagForSV.\n\nSet NavIC NAV Alert Flag"; }
    }

    internal const string CmdName = "SetNavICSatelliteNavAlertFlag";

    public SetNavICSatelliteNavAlertFlag()
      : base(CmdName)
    {}

    public SetNavICSatelliteNavAlertFlag(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set NavIC NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set NavIC NAV Alert Flag"; }
    }

    internal const string CmdName = "SetNavICNavAlertFlagForSV";

    public SetNavICNavAlertFlagForSV()
      : base(CmdName)
    {}

    public SetNavICNavAlertFlagForSV(int svId, bool alert, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use GetNavICNavAlertFlagForSV.
  /// 
  /// Get NavIC NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICSatelliteNavAlertFlag : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetNavICSatelliteNavAlertFlag is deprecated since 21.3. You may use GetNavICNavAlertFlagForSV.\n\nGet NavIC NAV Alert Flag"; }
    }

    internal const string CmdName = "GetNavICSatelliteNavAlertFlag";

    public GetNavICSatelliteNavAlertFlag()
      : base(CmdName)
    {}

    public GetNavICSatelliteNavAlertFlag(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get NavIC NAV Alert Flag
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICNavAlertFlagForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get NavIC NAV Alert Flag"; }
    }

    internal const string CmdName = "GetNavICNavAlertFlagForSV";

    public GetNavICNavAlertFlagForSV()
      : base(CmdName)
    {}

    public GetNavICNavAlertFlagForSV(int svId, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetNavICNavAlertFlagForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICSatelliteNavAlertFlagResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetNavICNavAlertFlagForSV."; }
    }
  
    internal const string CmdName = "GetNavICSatelliteNavAlertFlagResult";

    public GetNavICSatelliteNavAlertFlagResult()
      : base(CmdName)
    {}

    public GetNavICSatelliteNavAlertFlagResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      Alert = alert;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Alert")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Alert
    {
      get { return GetValue("Alert").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Alert", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites.
  /// Alert       bool            NavIC NAV Alert Flag, false = No Alert, true = Alert
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICNavAlertFlagForSVResult : GetNavICSatelliteNavAlertFlagResult
  {
    internal new const string CmdName = "GetNavICNavAlertFlagForSVResult";

    public GetNavICNavAlertFlagForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetNavICNavAlertFlagForSVResult(CommandBase relatedCommand, int svId, bool alert, string dataSetName = null)
      : base(relatedCommand, svId, alert, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetPowerGlobalOffset is deprecated since 21.7. You may use SetGlobalPowerOffset.
  /// 
  /// Set global power offset default value for all signals and all systems
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class SetPowerGlobalOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetPowerGlobalOffset is deprecated since 21.7. You may use SetGlobalPowerOffset.\n\nSet global power offset default value for all signals and all systems"; }
    }

    internal const string CmdName = "SetPowerGlobalOffset";

    public SetPowerGlobalOffset()
      : base(CmdName)
    {}

    public SetPowerGlobalOffset(double offset)
      : base(CmdName)
    {
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set global power offset default value for all signals and all systems
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class SetGlobalPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set global power offset default value for all signals and all systems"; }
    }

    internal const string CmdName = "SetGlobalPowerOffset";

    public SetGlobalPowerOffset()
      : base(CmdName)
    {}

    public SetGlobalPowerOffset(double offset)
      : base(CmdName)
    {
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetPowerGlobalOffset is deprecated since 21.7. You may use GetGlobalPowerOffset.
  /// 
  /// Get global power offset default value for all signals and all systems
  ///
  /// 
  ///

  public class GetPowerGlobalOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetPowerGlobalOffset is deprecated since 21.7. You may use GetGlobalPowerOffset.\n\nGet global power offset default value for all signals and all systems"; }
    }

    internal const string CmdName = "GetPowerGlobalOffset";

    public GetPowerGlobalOffset()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Get global power offset default value for all signals and all systems
  ///
  /// 
  ///

  public class GetGlobalPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get global power offset default value for all signals and all systems"; }
    }

    internal const string CmdName = "GetGlobalPowerOffset";

    public GetGlobalPowerOffset()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetGlobalPowerOffset.
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class GetPowerGlobalOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlobalPowerOffset."; }
    }
  
    internal const string CmdName = "GetPowerGlobalOffsetResult";

    public GetPowerGlobalOffsetResult()
      : base(CmdName)
    {}

    public GetPowerGlobalOffsetResult(CommandBase relatedCommand, double offset)
      : base(CmdName, relatedCommand)
    {
      Offset = offset;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Offset")
      ;
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set { SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class GetGlobalPowerOffsetResult : GetPowerGlobalOffsetResult
  {
    internal new const string CmdName = "GetGlobalPowerOffsetResult";

    public GetGlobalPowerOffsetResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGlobalPowerOffsetResult(CommandBase relatedCommand, double offset)
      : base(relatedCommand, offset)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetPowerOffset is deprecated since 21.7. You may use SetSignalPowerOffset.
  /// 
  /// Set power offset default value for the signal given in argument
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class SetPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetPowerOffset is deprecated since 21.7. You may use SetSignalPowerOffset.\n\nSet power offset default value for the signal given in argument"; }
    }

    internal const string CmdName = "SetPowerOffset";

    public SetPowerOffset()
      : base(CmdName)
    {}

    public SetPowerOffset(string signal, double offset)
      : base(CmdName)
    {
      Signal = signal;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set power offset default value for the signal given in argument
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class SetSignalPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set power offset default value for the signal given in argument"; }
    }

    internal const string CmdName = "SetSignalPowerOffset";

    public SetSignalPowerOffset()
      : base(CmdName)
    {}

    public SetSignalPowerOffset(string signal, double offset)
      : base(CmdName)
    {
      Signal = signal;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetPowerOffset is deprecated since 21.7. You may use GetSignalPowerOffset.
  /// 
  /// Get power offset default value for the signal given in argument
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class GetPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetPowerOffset is deprecated since 21.7. You may use GetSignalPowerOffset.\n\nGet power offset default value for the signal given in argument"; }
    }

    internal const string CmdName = "GetPowerOffset";

    public GetPowerOffset()
      : base(CmdName)
    {}

    public GetPowerOffset(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get power offset default value for the signal given in argument
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class GetSignalPowerOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get power offset default value for the signal given in argument"; }
    }

    internal const string CmdName = "GetSignalPowerOffset";

    public GetSignalPowerOffset()
      : base(CmdName)
    {}

    public GetSignalPowerOffset(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSignalPowerOffset.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class GetPowerOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSignalPowerOffset."; }
    }
  
    internal const string CmdName = "GetPowerOffsetResult";

    public GetPowerOffsetResult()
      : base(CmdName)
    {}

    public GetPowerOffsetResult(CommandBase relatedCommand, string signal, double offset)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Offset = offset;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Offset")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set { SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5",
  ///                                     "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS",
  ///                                     "B1", "B2", "B1C", "B2a", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                     "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Offset double Offset in dB (negative value will attenuate signal)
  ///

  public class GetSignalPowerOffsetResult : GetPowerOffsetResult
  {
    internal new const string CmdName = "GetSignalPowerOffsetResult";

    public GetSignalPowerOffsetResult()
      : base()
    {
       Name = CmdName;
    }

    public GetSignalPowerOffsetResult(CommandBase relatedCommand, string signal, double offset)
      : base(relatedCommand, signal, offset)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set power offset default value for the SBAS Service Provider given in argument
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------------------------------------------------
  /// ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
  /// Offset          double Offset in dB (negative value will attenuate signal)
  ///

  public class SetPowerSbasOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set power offset default value for the SBAS Service Provider given in argument"; }
    }

    internal const string CmdName = "SetPowerSbasOffset";

    public SetPowerSbasOffset()
      : base(CmdName)
    {}

    public SetPowerSbasOffset(string serviceProvider, double offset)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get power offset default value for the SBAS Service Provider given in argument
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------------------------------------------------
  /// ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
  ///

  public class GetPowerSbasOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get power offset default value for the SBAS Service Provider given in argument"; }
    }

    internal const string CmdName = "GetPowerSbasOffset";

    public GetPowerSbasOffset()
      : base(CmdName)
    {}

    public GetPowerSbasOffset(string serviceProvider)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPowerSbasOffset.
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------------------------------------------------
  /// ServiceProvider string Service Provider key, allowed values: "WAAS", "EGNOS", "MSAS", "GAGAN", "SDCM"
  /// Offset          double Offset in dB (negative value will attenuate signal)
  ///

  public class GetPowerSbasOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPowerSbasOffset."; }
    }

    internal const string CmdName = "GetPowerSbasOffsetResult";

    public GetPowerSbasOffsetResult()
      : base(CmdName)
    {}

    public GetPowerSbasOffsetResult(CommandBase relatedCommand, string serviceProvider, double offset)
      : base(CmdName, relatedCommand)
    {
      ServiceProvider = serviceProvider;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Offset")
      ;
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set a modulation target.
  /// If Id is not set, or if new, a new target is added.
  /// For setter : If the Id is already used, the corresponding target is updated.
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
  /// Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N310", "None", "NoneRT", "X300" or "Wavefront Controller".
  /// Path            string File path. Optional, use only if type is "File".
  /// Address         string Optional. IP Address if type is "N310" or "X300".
  /// ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N310" or "X300".
  /// Id              string Unique identifier automatically set by simulator
  ///

  public class SetModulationTarget : CommandBase
  {
    public override string Documentation
    {
      get { return "Set a modulation target.\nIf Id is not set, or if new, a new target is added.\nFor setter : If the Id is already used, the corresponding target is updated."; }
    }

    internal const string CmdName = "SetModulationTarget";

    public SetModulationTarget()
      : base(CmdName)
    {}

    public SetModulationTarget(string type, string path, string address, bool clockIsExternal, string id)
      : base(CmdName)
    {
      Type = type;
      Path = path;
      Address = address;
      ClockIsExternal = clockIsExternal;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Path")
        && Contains("Address")
        && Contains("ClockIsExternal")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool ClockIsExternal
    {
      get { return GetValue("ClockIsExternal").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("ClockIsExternal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a modulation target.
  /// If Id is not set, or if new, a new target is added.
  /// For setter : If the Id is already used, the corresponding target is updated.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------------------------
  /// Id   string Unique identifier automatically set by simulator
  ///

  public class GetModulationTarget : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a modulation target.\nIf Id is not set, or if new, a new target is added.\nFor setter : If the Id is already used, the corresponding target is updated."; }
    }

    internal const string CmdName = "GetModulationTarget";

    public GetModulationTarget()
      : base(CmdName)
    {}

    public GetModulationTarget(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetModulationTarget.
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------------------------------------------------------------------------------------------------------
  /// Type            string Target type can be "Anechoic Chamber", "DTA-2115B", "File", "N310", "None", "NoneRT", "X300" or "Wavefront Controller".
  /// Path            string File path. Optional, use only if type is "File".
  /// Address         string Optional. IP Address if type is "N310" or "X300".
  /// ClockIsExternal bool   Indicate 10 MHz reference clock is external (true) or internal (false). Optional, use only if type is "DTA-2115B", "N310" or "X300".
  /// Id              string Unique identifier automatically set by simulator
  ///

  public class GetModulationTargetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetModulationTarget."; }
    }

    internal const string CmdName = "GetModulationTargetResult";

    public GetModulationTargetResult()
      : base(CmdName)
    {}

    public GetModulationTargetResult(CommandBase relatedCommand, string type, string path, string address, bool clockIsExternal, string id)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      Path = path;
      Address = address;
      ClockIsExternal = clockIsExternal;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Path")
        && Contains("Address")
        && Contains("ClockIsExternal")
        && Contains("Id")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool ClockIsExternal
    {
      get { return GetValue("ClockIsExternal").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("ClockIsExternal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the GPU associated with a RF output of a modulation target.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------
  /// GpuIdx int    The gpu associated with the RF output.
  /// Output int    Output index (zero based)
  /// Id     string Target identifier
  ///

  public class SetGpu : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the GPU associated with a RF output of a modulation target."; }
    }

    internal const string CmdName = "SetGpu";

    public SetGpu()
      : base(CmdName)
    {}

    public SetGpu(int gpuIdx, int output, string id)
      : base(CmdName)
    {
      GpuIdx = gpuIdx;
      Output = output;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("GpuIdx")
        && Contains("Output")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int GpuIdx
    {
      get { return GetValue("GpuIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("GpuIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the GPU associated with a RF output of a modulation target.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------
  /// Output int    Output index (zero based)
  /// Id     string Target identifier
  ///

  public class GetGpu : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the GPU associated with a RF output of a modulation target."; }
    }

    internal const string CmdName = "GetGpu";

    public GetGpu()
      : base(CmdName)
    {}

    public GetGpu(int output, string id)
      : base(CmdName)
    {
      Output = output;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpu.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------
  /// GpuIdx int    The gpu associated with the RF output.
  /// Output int    Output index (zero based)
  /// Id     string Target identifier
  ///

  public class GetGpuResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpu."; }
    }

    internal const string CmdName = "GetGpuResult";

    public GetGpuResult()
      : base(CmdName)
    {}

    public GetGpuResult(CommandBase relatedCommand, int gpuIdx, int output, string id)
      : base(CmdName, relatedCommand)
    {
      GpuIdx = gpuIdx;
      Output = output;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("GpuIdx")
        && Contains("Output")
        && Contains("Id")
      ;
      }
    }

    public int GpuIdx
    {
      get { return GetValue("GpuIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("GpuIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all the modulation targets IDs
  ///
  /// 
  ///

  public class GetAllModulationTargets : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all the modulation targets IDs"; }
    }

    internal const string CmdName = "GetAllModulationTargets";

    public GetAllModulationTargets()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAllModulationTargets.
  ///
  /// Name Type         Description
  /// ---- ------------ ---------------
  /// Ids  array string list of all IDs
  ///

  public class GetAllModulationTargetsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllModulationTargets."; }
    }

    internal const string CmdName = "GetAllModulationTargetsResult";

    public GetAllModulationTargetsResult()
      : base(CmdName)
    {}

    public GetAllModulationTargetsResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove a modulation target.
  ///
  /// Name Type   Description
  /// ---- ------ -----------------
  /// Id   string Target identifier
  ///

  public class RemoveModulationTarget : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove a modulation target."; }
    }

    internal const string CmdName = "RemoveModulationTarget";

    public RemoveModulationTarget()
      : base(CmdName)
    {}

    public RemoveModulationTarget(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove all modulation targets.
  ///
  /// 
  ///

  public class RemoveAllModulationTargets : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove all modulation targets."; }
    }

    internal const string CmdName = "RemoveAllModulationTargets";

    public RemoveAllModulationTargets()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Change the modulation target name. The name is only used for display purpose.
  ///
  /// Name       Type   Description
  /// ---------- ------ -----------------
  /// TargetName string New target name
  /// Id         string Target identifier
  ///

  public class ChangeModulationTargetName : CommandBase
  {
    public override string Documentation
    {
      get { return "Change the modulation target name. The name is only used for display purpose."; }
    }

    internal const string CmdName = "ChangeModulationTargetName";

    public ChangeModulationTargetName()
      : base(CmdName)
    {}

    public ChangeModulationTargetName(string targetName, string id)
      : base(CmdName)
    {
      TargetName = targetName;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TargetName")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TargetName
    {
      get { return GetValue("TargetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TargetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the signals for the specified target and output index.
  /// Skydel tries to keep the sampling rate as low as possible,
  /// but it is possible to set constaints with MinRate and MaxRate.
  ///
  /// Name             Type            Description
  /// ---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Output           int             Output index (zero based)
  /// MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// Band             string          Frequency band is "LowerL" or "UpperL"
  /// Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
  /// GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
  /// Id               string          Target identifier
  /// CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.
  ///

  public class ChangeModulationTargetSignals : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the signals for the specified target and output index.\nSkydel tries to keep the sampling rate as low as possible,\nbut it is possible to set constaints with MinRate and MaxRate."; }
    }

    internal const string CmdName = "ChangeModulationTargetSignals";

    public ChangeModulationTargetSignals()
      : base(CmdName)
    {}

    public ChangeModulationTargetSignals(int output, int minRate, int maxRate, string band, string signal, int gain, bool gaussianNoise, string id, double? centralFrequency = null)
      : base(CmdName)
    {
      Output = output;
      MinRate = minRate;
      MaxRate = maxRate;
      Band = band;
      Signal = signal;
      Gain = gain;
      GaussianNoise = gaussianNoise;
      Id = id;
      CentralFrequency = centralFrequency;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("MinRate")
        && Contains("MaxRate")
        && Contains("Band")
        && Contains("Signal")
        && Contains("Gain")
        && Contains("GaussianNoise")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MinRate
    {
      get { return GetValue("MinRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MinRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MaxRate
    {
      get { return GetValue("MaxRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MaxRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Band
    {
      get { return GetValue("Band").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool GaussianNoise
    {
      get { return GetValue("GaussianNoise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("GaussianNoise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? CentralFrequency
    {
      get { return GetValue("CentralFrequency").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("CentralFrequency");
        else
          SetValue("CentralFrequency", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the signals for the specified target and output index.
  /// Skydel tries to keep the sampling rate as low as possible,
  /// but it is possible to set constaints with MinRate and MaxRate.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------
  /// Output int    Output index (zero based)
  /// Id     string Target identifier
  ///

  public class GetModulationTargetSignals : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the signals for the specified target and output index.\nSkydel tries to keep the sampling rate as low as possible,\nbut it is possible to set constaints with MinRate and MaxRate."; }
    }

    internal const string CmdName = "GetModulationTargetSignals";

    public GetModulationTargetSignals()
      : base(CmdName)
    {}

    public GetModulationTargetSignals(int output, string id)
      : base(CmdName)
    {
      Output = output;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetModulationTargetSignals.
  ///
  /// Name             Type            Description
  /// ---------------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Output           int             Output index (zero based)
  /// MinRate          int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// MaxRate          int             Maximum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// Band             string          Frequency band is "LowerL" or "UpperL"
  /// Signal           string          Comma separated signal keys, accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Gain             int             The gain associated to this output (dB). This value has to be between the radio minimum value and 115. A negative value means to use the radio default value.
  /// GaussianNoise    bool            If true, add Gaussian noise to ensure realistic signal to noise ratio. When combining multiple outputs, only one should have Gaussian noise enabled.
  /// Id               string          Target identifier
  /// CentralFrequency optional double Forced central frequency to this value. Central frequency can only be one of this values: 1176450000, 1191795000, 1202000000, 1207140000, 1217370000, 1222000000, 1227000000, 1227600000, 1230000000, 1235000000, 1246000000, 1561098000, 1575420000, 1582000000, 1584000000, 1586000000, 1602000000.
  ///

  public class GetModulationTargetSignalsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetModulationTargetSignals."; }
    }

    internal const string CmdName = "GetModulationTargetSignalsResult";

    public GetModulationTargetSignalsResult()
      : base(CmdName)
    {}

    public GetModulationTargetSignalsResult(CommandBase relatedCommand, int output, int minRate, int maxRate, string band, string signal, int gain, bool gaussianNoise, string id, double? centralFrequency = null)
      : base(CmdName, relatedCommand)
    {
      Output = output;
      MinRate = minRate;
      MaxRate = maxRate;
      Band = band;
      Signal = signal;
      Gain = gain;
      GaussianNoise = gaussianNoise;
      Id = id;
      CentralFrequency = centralFrequency;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("MinRate")
        && Contains("MaxRate")
        && Contains("Band")
        && Contains("Signal")
        && Contains("Gain")
        && Contains("GaussianNoise")
        && Contains("Id")
      ;
      }
    }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MinRate
    {
      get { return GetValue("MinRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MinRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MaxRate
    {
      get { return GetValue("MaxRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MaxRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Band
    {
      get { return GetValue("Band").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool GaussianNoise
    {
      get { return GetValue("GaussianNoise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("GaussianNoise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? CentralFrequency
    {
      get { return GetValue("CentralFrequency").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("CentralFrequency");
        else
          SetValue("CentralFrequency", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the specified target and output index to a group of interferences.
  /// An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
  /// Skydel tries to keep the sampling rate as low as possible,
  /// but it is possible to set constaints with MinRate and MaxRate.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Output      int             Output index (zero based)
  /// MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
  /// Group       int             Interference group number [1..16] or 0 for no group
  /// CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
  /// Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
  /// Id          string          Target identifier
  /// Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class ChangeModulationTargetInterference : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the specified target and output index to a group of interferences.\nAn interference transmitter is mapped to a specific RF output by using the same Interference Group Number.\nSkydel tries to keep the sampling rate as low as possible,\nbut it is possible to set constaints with MinRate and MaxRate."; }
    }

    internal const string CmdName = "ChangeModulationTargetInterference";

    public ChangeModulationTargetInterference()
      : base(CmdName)
    {}

    public ChangeModulationTargetInterference(int output, int minRate, int maxRate, int group, double centralFreq, int gain, string id, string signal = null)
      : base(CmdName)
    {
      Output = output;
      MinRate = minRate;
      MaxRate = maxRate;
      Group = group;
      CentralFreq = centralFreq;
      Gain = gain;
      Id = id;
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("MinRate")
        && Contains("MaxRate")
        && Contains("Group")
        && Contains("CentralFreq")
        && Contains("Gain")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MinRate
    {
      get { return GetValue("MinRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MinRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MaxRate
    {
      get { return GetValue("MaxRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MaxRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Signal");
        else
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the specified target and output index to a group of interferences.
  /// An interference transmitter is mapped to a specific RF output by using the same Interference Group Number.
  /// Skydel tries to keep the sampling rate as low as possible,
  /// but it is possible to set constaints with MinRate and MaxRate.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------
  /// Output int    Output index (zero based)
  /// Id     string Target identifier
  ///

  public class GetModulationTargetInterferences : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the specified target and output index to a group of interferences.\nAn interference transmitter is mapped to a specific RF output by using the same Interference Group Number.\nSkydel tries to keep the sampling rate as low as possible,\nbut it is possible to set constaints with MinRate and MaxRate."; }
    }

    internal const string CmdName = "GetModulationTargetInterferences";

    public GetModulationTargetInterferences()
      : base(CmdName)
    {}

    public GetModulationTargetInterferences(int output, string id)
      : base(CmdName)
    {
      Output = output;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetModulationTargetInterferences.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Output      int             Output index (zero based)
  /// MinRate     int             Minimum sampling rate (12500000, 25000000, 50000000, 60000000, 100000000)
  /// MaxRate     int             Maximum sampling rate (12500000, 25000000, 50000000. 60000000, 100000000)
  /// Group       int             Interference group number [1..16] or 0 for no group
  /// CentralFreq double          Central frequency (Hz). Put 0.0 and complete signal list to let Skydel choose automaticly the central frequency.
  /// Gain        int             The gain associated to this output (dB). As of today, accepted values are 0, 20, 40, 60 and 80. Values at 40 and under are not recommended. Use a negative value to use the default value (60).
  /// Id          string          Target identifier
  /// Signal      optional string Comma separated signal keys if you want to match central frequency and sampling rate with a particular list of signals. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class GetModulationTargetInterferencesResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetModulationTargetInterferences."; }
    }

    internal const string CmdName = "GetModulationTargetInterferencesResult";

    public GetModulationTargetInterferencesResult()
      : base(CmdName)
    {}

    public GetModulationTargetInterferencesResult(CommandBase relatedCommand, int output, int minRate, int maxRate, int group, double centralFreq, int gain, string id, string signal = null)
      : base(CmdName, relatedCommand)
    {
      Output = output;
      MinRate = minRate;
      MaxRate = maxRate;
      Group = group;
      CentralFreq = centralFreq;
      Gain = gain;
      Id = id;
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("MinRate")
        && Contains("MaxRate")
        && Contains("Group")
        && Contains("CentralFreq")
        && Contains("Gain")
        && Contains("Id")
      ;
      }
    }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MinRate
    {
      get { return GetValue("MinRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MinRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MaxRate
    {
      get { return GetValue("MaxRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MaxRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Signal");
        else
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Assign an output to a specific interference group. This command works only
  /// for Anechoic Chamber target.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------------------------------------------------
  /// Group       int    Interference group number [1..16]
  /// Output      string Output is radio name and RF output. For example, RF output B on radio 3 is referred as "3B"
  /// CentralFreq double Central frequency (Hz)
  ///

  public class ChangeModulationAnechoicTargetInterference : CommandBase
  {
    public override string Documentation
    {
      get { return "Assign an output to a specific interference group. This command works only\nfor Anechoic Chamber target."; }
    }

    internal const string CmdName = "ChangeModulationAnechoicTargetInterference";

    public ChangeModulationAnechoicTargetInterference()
      : base(CmdName)
    {}

    public ChangeModulationAnechoicTargetInterference(int group, string output, double centralFreq)
      : base(CmdName)
    {
      Group = group;
      Output = output;
      CentralFreq = centralFreq;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Group")
        && Contains("Output")
        && Contains("CentralFreq")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Output
    {
      get { return GetValue("Output").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove output assignation. This command works only for Anechoic Chamber
  /// target.
  ///
  /// Name  Type Description
  /// ----- ---- ---------------------------------
  /// Group int  Interference group number [1..16]
  ///

  public class RemoveModulationAnechoicTargetInterference : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove output assignation. This command works only for Anechoic Chamber\ntarget."; }
    }

    internal const string CmdName = "RemoveModulationAnechoicTargetInterference";

    public RemoveModulationAnechoicTargetInterference()
      : base(CmdName)
    {}

    public RemoveModulationAnechoicTargetInterference(int group)
      : base(CmdName)
    {
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Group")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// USE AT YOUR OWN RISKS. Set the RF Gain of the SDR
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------
  /// Output int    Output index (zero based)
  /// Gain   double RF Gain of the SDR, in dB. Default value is 0. Only supported for USRP.
  ///

  public class SetRfGain : CommandBase
  {
    public override string Documentation
    {
      get { return "USE AT YOUR OWN RISKS. Set the RF Gain of the SDR"; }
    }

    internal const string CmdName = "SetRfGain";

    public SetRfGain()
      : base(CmdName)
    {}

    public SetRfGain(int output, double gain)
      : base(CmdName)
    {
      Output = output;
      Gain = gain;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Output")
        && Contains("Gain")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int Output
    {
      get { return GetValue("Output").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Output", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Gain
    {
      get { return GetValue("Gain").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import navigation message file for the specified constellation. This could be Rinex, SEM or YUMA file for GPS. Only Rinex for the others.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// System      string          "GPS", "GLONASS", "Galileo", "SBAS", "BeiDou", "QZSS" or "NavIC"
  /// Path        string          File path
  /// Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
  /// DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file. Constellations that support this parameter are  "GPS", "Galileo", "BeiDou", "QZSS" and "NavIC"
  ///

  public class ImportConstellationParameters : CommandBase
  {
    public override string Documentation
    {
      get { return "Import navigation message file for the specified constellation. This could be Rinex, SEM or YUMA file for GPS. Only Rinex for the others."; }
    }

    internal const string CmdName = "ImportConstellationParameters";

    public ImportConstellationParameters()
      : base(CmdName)
    {}

    public ImportConstellationParameters(string system, string path, int? rollover = null, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      Path = path;
      Rollover = rollover;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Rollover
    {
      get { return GetValue("Rollover").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Rollover");
        else
          SetValue("Rollover", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import ionospheric parameters from a Rinex file.
  ///
  /// Name Type            Description
  /// ---- --------------- ------------------------------------------------------------------------------
  /// Path string          File path
  /// Type optional string Ionospheric parameters type: "Klobuchar" or "BDGIM". The default is Klobuchar.
  ///

  public class ImportIonoParameters : CommandBase
  {
    public override string Documentation
    {
      get { return "Import ionospheric parameters from a Rinex file."; }
    }

    internal const string CmdName = "ImportIonoParameters";

    public ImportIonoParameters()
      : base(CmdName)
    {}

    public ImportIonoParameters(string path, string type = null)
      : base(CmdName)
    {
      Path = path;
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Type");
        else
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import MODIP data file.
  ///
  /// Name Type   Description
  /// ---- ------ -----------
  /// Path string File path.
  ///

  public class ImportMODIPFile : CommandBase
  {
    public override string Documentation
    {
      get { return "Import MODIP data file."; }
    }

    internal const string CmdName = "ImportMODIPFile";

    public ImportMODIPFile()
      : base(CmdName)
    {}

    public ImportMODIPFile(string path)
      : base(CmdName)
    {
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import all the CCIR data files from the specified directory.
  ///
  /// Name Type   Description
  /// ---- ------ ---------------
  /// Path string Directory path.
  ///

  public class ImportCCIRFilesFromDirectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Import all the CCIR data files from the specified directory."; }
    }

    internal const string CmdName = "ImportCCIRFilesFromDirectory";

    public ImportCCIRFilesFromDirectory()
      : base(CmdName)
    {}

    public ImportCCIRFilesFromDirectory(string path)
      : base(CmdName)
    {
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import GLONASS almanac file
  ///
  /// Name Type   Description
  /// ---- ------ -----------------
  /// Path string Almanac file path
  ///

  public class ImportGlonassAlmanac : CommandBase
  {
    public override string Documentation
    {
      get { return "Import GLONASS almanac file"; }
    }

    internal const string CmdName = "ImportGlonassAlmanac";

    public ImportGlonassAlmanac()
      : base(CmdName)
    {}

    public ImportGlonassAlmanac(string path)
      : base(CmdName)
    {
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import NMEA track file
  ///
  /// Name Type   Description
  /// ---- ------ --------------
  /// Path string NMEA file path
  ///

  public class ImportNmeaTrack : CommandBase
  {
    public override string Documentation
    {
      get { return "Import NMEA track file"; }
    }

    internal const string CmdName = "ImportNmeaTrack";

    public ImportNmeaTrack()
      : base(CmdName)
    {}

    public ImportNmeaTrack(string path)
      : base(CmdName)
    {
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clear NMEA trajectory file
  ///
  /// 
  ///

  public class ClearVehiculeTrajectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear NMEA trajectory file"; }
    }

    internal const string CmdName = "ClearVehiculeTrajectory";

    public ClearVehiculeTrajectory()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Set the default vehicle antenna model.
  ///
  /// Name Type   Description
  /// ---- ------ ---------------------------
  /// Name string Default antenna model name.
  ///

  public class SetDefaultVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the default vehicle antenna model."; }
    }

    internal const string CmdName = "SetDefaultVehicleAntennaModel";

    public SetDefaultVehicleAntennaModel()
      : base(CmdName)
    {}

    public SetDefaultVehicleAntennaModel(string name)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the default vehicle antenna model.
  ///
  /// 
  ///

  public class GetDefaultVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the default vehicle antenna model."; }
    }

    internal const string CmdName = "GetDefaultVehicleAntennaModel";

    public GetDefaultVehicleAntennaModel()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetDefaultVehicleAntennaModel.
  ///
  /// Name Type   Description
  /// ---- ------ ---------------------------
  /// Name string Default antenna model name.
  ///

  public class GetDefaultVehicleAntennaModelResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetDefaultVehicleAntennaModel."; }
    }

    internal const string CmdName = "GetDefaultVehicleAntennaModelResult";

    public GetDefaultVehicleAntennaModelResult()
      : base(CmdName)
    {}

    public GetDefaultVehicleAntennaModelResult(CommandBase relatedCommand, string name)
      : base(CmdName, relatedCommand)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a list of all vehicle antenna names
  ///
  /// 
  ///

  public class GetAllVehicleAntennaNames : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a list of all vehicle antenna names"; }
    }

    internal const string CmdName = "GetAllVehicleAntennaNames";

    public GetAllVehicleAntennaNames()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAllVehicleAntennaNames.
  ///
  /// Name         Type         Description
  /// ------------ ------------ -----------------------------
  /// AntennaNames array string A list of antenna model names
  ///

  public class GetAllVehicleAntennaNamesResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllVehicleAntennaNames."; }
    }

    internal const string CmdName = "GetAllVehicleAntennaNamesResult";

    public GetAllVehicleAntennaNamesResult()
      : base(CmdName)
    {}

    public GetAllVehicleAntennaNamesResult(CommandBase relatedCommand, List<string> antennaNames)
      : base(CmdName, relatedCommand)
    {
      AntennaNames = antennaNames;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("AntennaNames")
      ;
      }
    }

    public List<string> AntennaNames
    {
      get { return GetValue("AntennaNames").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaNames", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Band GNSSBand           Frequency band
  /// Name optional string    Vehicle antenna name
  ///

  public class SetVehicleAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna."; }
    }

    internal const string CmdName = "SetVehicleAntennaGain";

    public SetVehicleAntennaGain()
      : base(CmdName)
    {}

    public SetVehicleAntennaGain(List<List<double>> gain, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName)
    {
      Gain = gain;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna.
  ///
  /// Name Type            Description
  /// ---- --------------- --------------------
  /// Band GNSSBand        Frequency band
  /// Name optional string Vehicle antenna name
  ///

  public class GetVehicleAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic vehicle Antenna."; }
    }

    internal const string CmdName = "GetVehicleAntennaGain";

    public GetVehicleAntennaGain()
      : base(CmdName)
    {}

    public GetVehicleAntennaGain(GNSSBand band, string name = null)
      : base(CmdName)
    {
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehicleAntennaGain.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Band GNSSBand           Frequency band
  /// Name optional string    Vehicle antenna name
  ///

  public class GetVehicleAntennaGainResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleAntennaGain."; }
    }

    internal const string CmdName = "GetVehicleAntennaGainResult";

    public GetVehicleAntennaGainResult()
      : base(CmdName)
    {}

    public GetVehicleAntennaGainResult(CommandBase relatedCommand, List<List<double>> gain, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName, relatedCommand)
    {
      Gain = gain;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
  ///
  /// Name        Type               Description
  /// ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
  /// PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type        AntennaPatternType Pattern type
  /// Band        GNSSBand           Frequency band
  /// Name        optional string    Vehicle antenna name
  ///

  public class SetVehicleAntennaPhaseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna."; }
    }

    internal const string CmdName = "SetVehicleAntennaPhaseOffset";

    public SetVehicleAntennaPhaseOffset()
      : base(CmdName)
    {}

    public SetVehicleAntennaPhaseOffset(List<List<double>> phaseOffset, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName)
    {
      PhaseOffset = phaseOffset;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
  ///
  /// Name Type            Description
  /// ---- --------------- --------------------
  /// Band GNSSBand        Frequency band
  /// Name optional string Vehicle antenna name
  ///

  public class GetVehicleAntennaPhaseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna."; }
    }

    internal const string CmdName = "GetVehicleAntennaPhaseOffset";

    public GetVehicleAntennaPhaseOffset()
      : base(CmdName)
    {}

    public GetVehicleAntennaPhaseOffset(GNSSBand band, string name = null)
      : base(CmdName)
    {
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehicleAntennaPhaseOffset.
  ///
  /// Name        Type               Description
  /// ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
  /// PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type        AntennaPatternType Pattern type
  /// Band        GNSSBand           Frequency band
  /// Name        optional string    Vehicle antenna name
  ///

  public class GetVehicleAntennaPhaseOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleAntennaPhaseOffset."; }
    }

    internal const string CmdName = "GetVehicleAntennaPhaseOffsetResult";

    public GetVehicleAntennaPhaseOffsetResult()
      : base(CmdName)
    {}

    public GetVehicleAntennaPhaseOffsetResult(CommandBase relatedCommand, List<List<double>> phaseOffset, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName, relatedCommand)
    {
      PhaseOffset = phaseOffset;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public List<List<double>> PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.
  ///
  /// Name     Type               Description
  /// -------- ------------------ ----------------------------------------------------------------------------------------------------------------------
  /// FilePath string             File path of the CSV (see user manual for CSV file format details). For Default and None types, leave this field empty
  /// Type     AntennaPatternType Pattern type
  /// Band     GNSSBand           Frequency band
  /// Name     optional string    Vehicle antenna name
  ///

  public class SetVehicleAntennaGainCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna."; }
    }

    internal const string CmdName = "SetVehicleAntennaGainCSV";

    public SetVehicleAntennaGainCSV()
      : base(CmdName)
    {}

    public SetVehicleAntennaGainCSV(string filePath, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName)
    {
      FilePath = filePath;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna.
  ///
  /// Name       Type                   Description
  /// ---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
  /// FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
  /// FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
  /// Type       AntennaPatternType     Pattern type
  /// Band       GNSSBand               Frequency band
  /// Name       optional string        Vehicle antenna name
  ///

  public class SetVehicleAntennaPhaseOffsetCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic vehicle Antenna."; }
    }

    internal const string CmdName = "SetVehicleAntennaPhaseOffsetCSV";

    public SetVehicleAntennaPhaseOffsetCSV()
      : base(CmdName)
    {}

    public SetVehicleAntennaPhaseOffsetCSV(string filePath, AntennaPatternFileType fileFormat, AntennaPatternType type, GNSSBand band, string name = null)
      : base(CmdName)
    {
      FilePath = filePath;
      FileFormat = fileFormat;
      Type = type;
      Band = band;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
        && Contains("FileFormat")
        && Contains("Type")
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternFileType FileFormat
    {
      get { return GetValue("FileFormat").ToObject<AntennaPatternFileType>(CommandBase.Serializer); }
      set
      {
          SetValue("FileFormat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add an offset (in db) for all values of the pattern.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band.
  /// Offset      double          Power offset
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class AddVehicleGainPatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Add an offset (in db) for all values of the pattern."; }
    }

    internal const string CmdName = "AddVehicleGainPatternOffset";

    public AddVehicleGainPatternOffset()
      : base(CmdName)
    {}

    public AddVehicleGainPatternOffset(GNSSBand band, double offset, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the offset (in dB) for the antenna gain pattern of the band.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band.
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetVehicleGainPatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the offset (in dB) for the antenna gain pattern of the band."; }
    }

    internal const string CmdName = "GetVehicleGainPatternOffset";

    public GetVehicleGainPatternOffset()
      : base(CmdName)
    {}

    public GetVehicleGainPatternOffset(GNSSBand band, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehicleGainPatternOffset.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band.
  /// Offset      double          Power offset
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetVehicleGainPatternOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleGainPatternOffset."; }
    }

    internal const string CmdName = "GetVehicleGainPatternOffsetResult";

    public GetVehicleGainPatternOffsetResult()
      : base(CmdName)
    {}

    public GetVehicleGainPatternOffsetResult(CommandBase relatedCommand, GNSSBand band, double offset, string antennaName = null)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Offset")
      ;
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add an offset (in rad) for all values of the phase pattern.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// Offset      double          Phase offset (in rad)
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class AddVehiclePhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Add an offset (in rad) for all values of the phase pattern."; }
    }

    internal const string CmdName = "AddVehiclePhasePatternOffset";

    public AddVehiclePhasePatternOffset()
      : base(CmdName)
    {}

    public AddVehiclePhasePatternOffset(GNSSBand band, double offset, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the offset (in rad) for the antenna phase pattern of the band.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetVehiclePhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the offset (in rad) for the antenna phase pattern of the band."; }
    }

    internal const string CmdName = "GetVehiclePhasePatternOffset";

    public GetVehiclePhasePatternOffset()
      : base(CmdName)
    {}

    public GetVehiclePhasePatternOffset(GNSSBand band, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehiclePhasePatternOffset.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// Offset      double          Phase offset (in rad)
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetVehiclePhasePatternOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehiclePhasePatternOffset."; }
    }

    internal const string CmdName = "GetVehiclePhasePatternOffsetResult";

    public GetVehiclePhasePatternOffsetResult()
      : base(CmdName)
    {}

    public GetVehiclePhasePatternOffsetResult(CommandBase relatedCommand, GNSSBand band, double offset, string antennaName = null)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Offset")
      ;
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// CSV file format of antenna pattern
  ///
  
  public enum AntennaPatternFileType { NotAngle, Degrees, Radians, NoneFile }


  ///
  /// Set antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the vehicle trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name  Type            Description
  /// ----- --------------- --------------------------------------------
  /// X     double          Antenna X offset in the body frame (meter)
  /// Y     double          Antenna Y offset in the body frame (meter)
  /// Z     double          Antenna Z offset in the body frame (meter)
  /// Yaw   double          Antenna Yaw offset in the body frame (rad)
  /// Pitch double          Antenna Pitch offset in the body frame (rad)
  /// Roll  double          Antenna Roll offset in the body frame (rad)
  /// Name  optional string Unique vehicle antenna name
  ///

  public class SetVehicleAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the vehicle trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "SetVehicleAntennaOffset";

    public SetVehicleAntennaOffset()
      : base(CmdName)
    {}

    public SetVehicleAntennaOffset(double x, double y, double z, double yaw, double pitch, double roll, string name = null)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the vehicle antenna offset infos. If no name is specified, the default vehicle antenna is get.
  ///
  /// Name Type            Description
  /// ---- --------------- ---------------------------
  /// Name optional string Unique vehicle antenna name
  ///

  public class GetVehicleAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the vehicle antenna offset infos. If no name is specified, the default vehicle antenna is get."; }
    }

    internal const string CmdName = "GetVehicleAntennaOffset";

    public GetVehicleAntennaOffset()
      : base(CmdName)
    {}

    public GetVehicleAntennaOffset(string name = null)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehicleAntennaOffset.
  ///
  /// Name  Type            Description
  /// ----- --------------- --------------------------------------------
  /// X     double          Antenna X offset in the body frame (meter)
  /// Y     double          Antenna Y offset in the body frame (meter)
  /// Z     double          Antenna Z offset in the body frame (meter)
  /// Yaw   double          Antenna Yaw offset in the body frame (rad)
  /// Pitch double          Antenna Pitch offset in the body frame (rad)
  /// Roll  double          Antenna Roll offset in the body frame (rad)
  /// Name  optional string Unique vehicle antenna name
  ///

  public class GetVehicleAntennaOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleAntennaOffset."; }
    }

    internal const string CmdName = "GetVehicleAntennaOffsetResult";

    public GetVehicleAntennaOffsetResult()
      : base(CmdName)
    {}

    public GetVehicleAntennaOffsetResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, string name = null)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Create an empty vehicle antenna model.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------
  /// Name string Vehicle antenna model name
  ///

  public class AddEmptyVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Create an empty vehicle antenna model."; }
    }

    internal const string CmdName = "AddEmptyVehicleAntennaModel";

    public AddEmptyVehicleAntennaModel()
      : base(CmdName)
    {}

    public AddEmptyVehicleAntennaModel(string name)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Delete a vehicle antenna model. The default vehicle antenna model can't be deleted.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------
  /// Name string Vehicle antenna model name
  ///

  public class DeleteVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Delete a vehicle antenna model. The default vehicle antenna model can't be deleted."; }
    }

    internal const string CmdName = "DeleteVehicleAntennaModel";

    public DeleteVehicleAntennaModel()
      : base(CmdName)
    {}

    public DeleteVehicleAntennaModel(string name)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Rename a vehicle antenna model.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------
  /// Name    string Reference vehicle antenna model name
  /// NewName string New vehicle antenna model name
  ///

  public class RenameVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Rename a vehicle antenna model."; }
    }

    internal const string CmdName = "RenameVehicleAntennaModel";

    public RenameVehicleAntennaModel()
      : base(CmdName)
    {}

    public RenameVehicleAntennaModel(string name, string newName)
      : base(CmdName)
    {
      Name = name;
      NewName = newName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("NewName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string NewName
    {
      get { return GetValue("NewName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NewName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Copy a vehicle antenna model.
  ///
  /// Name     Type   Description
  /// -------- ------ ------------------------------------
  /// Name     string Reference vehicle antenna model name
  /// CopyName string Copy vehicle antenna model name
  ///

  public class CopyVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Copy a vehicle antenna model."; }
    }

    internal const string CmdName = "CopyVehicleAntennaModel";

    public CopyVehicleAntennaModel()
      : base(CmdName)
    {}

    public CopyVehicleAntennaModel(string name, string copyName)
      : base(CmdName)
    {
      Name = name;
      CopyName = copyName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("CopyName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string CopyName
    {
      get { return GetValue("CopyName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("CopyName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get  all infos about this antenna model.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------
  /// Name string Vehicle antenna model name
  ///

  public class GetVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Get  all infos about this antenna model."; }
    }

    internal const string CmdName = "GetVehicleAntennaModel";

    public GetVehicleAntennaModel()
      : base(CmdName)
    {}

    public GetVehicleAntennaModel(string name)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVehicleAntennaModel.
  ///
  /// Name                 Type               Description
  /// -------------------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
  /// GainL1               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// GainTypeL1           AntennaPatternType Pattern type
  /// GainOffsetL1         double             Pattern offset
  /// GainL2               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// GainTypeL2           AntennaPatternType Pattern type
  /// GainOffsetL2         double             Pattern offset
  /// GainL5               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// GainTypeL5           AntennaPatternType Pattern type
  /// GainOffsetL5         double             Pattern offset
  /// GainE6               array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// GainTypeE6           AntennaPatternType Pattern type
  /// GainOffsetE6         double             Pattern offset
  /// PhaseOffsetL1        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// PhaseOffsetTypeL1    AntennaPatternType Pattern type
  /// PhasePatternOffsetL1 double             Pattern offset
  /// PhaseOffsetL2        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// PhaseOffsetTypeL2    AntennaPatternType Pattern type
  /// PhasePatternOffsetL2 double             Pattern offset
  /// PhaseOffsetL5        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// PhaseOffsetTypeL5    AntennaPatternType Pattern type
  /// PhasePatternOffsetL5 double             Pattern offset
  /// PhaseOffsetE6        array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// PhaseOffsetTypeE6    AntennaPatternType Pattern type
  /// PhasePatternOffsetE6 double             Pattern offset
  /// X                    double             Antenna X offset in the body frame (meter)
  /// Y                    double             Antenna Y offset in the body frame (meter)
  /// Z                    double             Antenna Z offset in the body frame (meter)
  /// Yaw                  double             Antenna Yaw offset in the body frame (rad)
  /// Pitch                double             Antenna Pitch offset in the body frame (rad)
  /// Roll                 double             Antenna Roll offset in the body frame (rad)
  /// Name                 string             Vehicle antenna model name
  ///

  public class GetVehicleAntennaModelResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleAntennaModel."; }
    }

    internal const string CmdName = "GetVehicleAntennaModelResult";

    public GetVehicleAntennaModelResult()
      : base(CmdName)
    {}

    public GetVehicleAntennaModelResult(CommandBase relatedCommand, List<List<double>> gainL1, AntennaPatternType gainTypeL1, double gainOffsetL1, List<List<double>> gainL2, AntennaPatternType gainTypeL2, double gainOffsetL2, List<List<double>> gainL5, AntennaPatternType gainTypeL5, double gainOffsetL5, List<List<double>> gainE6, AntennaPatternType gainTypeE6, double gainOffsetE6, List<List<double>> phaseOffsetL1, AntennaPatternType phaseOffsetTypeL1, double phasePatternOffsetL1, List<List<double>> phaseOffsetL2, AntennaPatternType phaseOffsetTypeL2, double phasePatternOffsetL2, List<List<double>> phaseOffsetL5, AntennaPatternType phaseOffsetTypeL5, double phasePatternOffsetL5, List<List<double>> phaseOffsetE6, AntennaPatternType phaseOffsetTypeE6, double phasePatternOffsetE6, double x, double y, double z, double yaw, double pitch, double roll, string name)
      : base(CmdName, relatedCommand)
    {
      GainL1 = gainL1;
      GainTypeL1 = gainTypeL1;
      GainOffsetL1 = gainOffsetL1;
      GainL2 = gainL2;
      GainTypeL2 = gainTypeL2;
      GainOffsetL2 = gainOffsetL2;
      GainL5 = gainL5;
      GainTypeL5 = gainTypeL5;
      GainOffsetL5 = gainOffsetL5;
      GainE6 = gainE6;
      GainTypeE6 = gainTypeE6;
      GainOffsetE6 = gainOffsetE6;
      PhaseOffsetL1 = phaseOffsetL1;
      PhaseOffsetTypeL1 = phaseOffsetTypeL1;
      PhasePatternOffsetL1 = phasePatternOffsetL1;
      PhaseOffsetL2 = phaseOffsetL2;
      PhaseOffsetTypeL2 = phaseOffsetTypeL2;
      PhasePatternOffsetL2 = phasePatternOffsetL2;
      PhaseOffsetL5 = phaseOffsetL5;
      PhaseOffsetTypeL5 = phaseOffsetTypeL5;
      PhasePatternOffsetL5 = phasePatternOffsetL5;
      PhaseOffsetE6 = phaseOffsetE6;
      PhaseOffsetTypeE6 = phaseOffsetTypeE6;
      PhasePatternOffsetE6 = phasePatternOffsetE6;
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("GainL1")
        && Contains("GainTypeL1")
        && Contains("GainOffsetL1")
        && Contains("GainL2")
        && Contains("GainTypeL2")
        && Contains("GainOffsetL2")
        && Contains("GainL5")
        && Contains("GainTypeL5")
        && Contains("GainOffsetL5")
        && Contains("GainE6")
        && Contains("GainTypeE6")
        && Contains("GainOffsetE6")
        && Contains("PhaseOffsetL1")
        && Contains("PhaseOffsetTypeL1")
        && Contains("PhasePatternOffsetL1")
        && Contains("PhaseOffsetL2")
        && Contains("PhaseOffsetTypeL2")
        && Contains("PhasePatternOffsetL2")
        && Contains("PhaseOffsetL5")
        && Contains("PhaseOffsetTypeL5")
        && Contains("PhasePatternOffsetL5")
        && Contains("PhaseOffsetE6")
        && Contains("PhaseOffsetTypeE6")
        && Contains("PhasePatternOffsetE6")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Name")
      ;
      }
    }

    public List<List<double>> GainL1
    {
      get { return GetValue("GainL1").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("GainL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType GainTypeL1
    {
      get { return GetValue("GainTypeL1").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("GainTypeL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double GainOffsetL1
    {
      get { return GetValue("GainOffsetL1").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("GainOffsetL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> GainL2
    {
      get { return GetValue("GainL2").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("GainL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType GainTypeL2
    {
      get { return GetValue("GainTypeL2").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("GainTypeL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double GainOffsetL2
    {
      get { return GetValue("GainOffsetL2").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("GainOffsetL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> GainL5
    {
      get { return GetValue("GainL5").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("GainL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType GainTypeL5
    {
      get { return GetValue("GainTypeL5").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("GainTypeL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double GainOffsetL5
    {
      get { return GetValue("GainOffsetL5").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("GainOffsetL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> GainE6
    {
      get { return GetValue("GainE6").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("GainE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType GainTypeE6
    {
      get { return GetValue("GainTypeE6").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("GainTypeE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double GainOffsetE6
    {
      get { return GetValue("GainOffsetE6").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("GainOffsetE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> PhaseOffsetL1
    {
      get { return GetValue("PhaseOffsetL1").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType PhaseOffsetTypeL1
    {
      get { return GetValue("PhaseOffsetTypeL1").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetTypeL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhasePatternOffsetL1
    {
      get { return GetValue("PhasePatternOffsetL1").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhasePatternOffsetL1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> PhaseOffsetL2
    {
      get { return GetValue("PhaseOffsetL2").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType PhaseOffsetTypeL2
    {
      get { return GetValue("PhaseOffsetTypeL2").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetTypeL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhasePatternOffsetL2
    {
      get { return GetValue("PhasePatternOffsetL2").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhasePatternOffsetL2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> PhaseOffsetL5
    {
      get { return GetValue("PhaseOffsetL5").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType PhaseOffsetTypeL5
    {
      get { return GetValue("PhaseOffsetTypeL5").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetTypeL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhasePatternOffsetL5
    {
      get { return GetValue("PhasePatternOffsetL5").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhasePatternOffsetL5", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<double>> PhaseOffsetE6
    {
      get { return GetValue("PhaseOffsetE6").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType PhaseOffsetTypeE6
    {
      get { return GetValue("PhaseOffsetTypeE6").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffsetTypeE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhasePatternOffsetE6
    {
      get { return GetValue("PhasePatternOffsetE6").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhasePatternOffsetE6", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import a vehicle antenna model from a XML file.
  ///
  /// Name     Type   Description
  /// -------- ------ ------------------------------
  /// FilePath string File path of the antenna model
  ///

  public class ImportVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Import a vehicle antenna model from a XML file."; }
    }

    internal const string CmdName = "ImportVehicleAntennaModel";

    public ImportVehicleAntennaModel()
      : base(CmdName)
    {}

    public ImportVehicleAntennaModel(string filePath)
      : base(CmdName)
    {
      FilePath = filePath;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export a vehicle antenna model in a XML file.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------------
  /// AntennaName string Vehicle antenna model name
  /// FilePath    string The antenna model will be exported in this file path.
  /// Overwriting bool   Overwrite the old file if true.
  ///

  public class ExportVehicleAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Export a vehicle antenna model in a XML file."; }
    }

    internal const string CmdName = "ExportVehicleAntennaModel";

    public ExportVehicleAntennaModel()
      : base(CmdName)
    {}

    public ExportVehicleAntennaModel(string antennaName, string filePath, bool overwriting)
      : base(CmdName)
    {
      AntennaName = antennaName;
      FilePath = filePath;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("AntennaName")
        && Contains("FilePath")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add/edit an antenna change.
  ///
  /// Name      Type   Description
  /// --------- ------ --------------------------------------------------
  /// StartTime double Elapsed time in seconds since start of simulation.
  /// Antenna   string Antenna model name
  /// Id        string Unique identifier of the event
  ///

  public class SetAntennaChange : CommandBase
  {
    public override string Documentation
    {
      get { return "Add/edit an antenna change."; }
    }

    internal const string CmdName = "SetAntennaChange";

    public SetAntennaChange()
      : base(CmdName)
    {}

    public SetAntennaChange(double startTime, string antenna, string id)
      : base(CmdName)
    {
      StartTime = startTime;
      Antenna = antenna;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("StartTime")
        && Contains("Antenna")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double StartTime
    {
      get { return GetValue("StartTime").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Antenna
    {
      get { return GetValue("Antenna").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Antenna", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get an antenna change.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetAntennaChange : CommandBase
  {
    public override string Documentation
    {
      get { return "Get an antenna change."; }
    }

    internal const string CmdName = "GetAntennaChange";

    public GetAntennaChange()
      : base(CmdName)
    {}

    public GetAntennaChange(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAntennaChange.
  ///
  /// Name      Type   Description
  /// --------- ------ --------------------------------------------------
  /// StartTime double Elapsed time in seconds since start of simulation.
  /// Antenna   string Antenna model name
  /// Id        string Unique identifier of the event
  ///

  public class GetAntennaChangeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAntennaChange."; }
    }

    internal const string CmdName = "GetAntennaChangeResult";

    public GetAntennaChangeResult()
      : base(CmdName)
    {}

    public GetAntennaChangeResult(CommandBase relatedCommand, double startTime, string antenna, string id)
      : base(CmdName, relatedCommand)
    {
      StartTime = startTime;
      Antenna = antenna;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("StartTime")
        && Contains("Antenna")
        && Contains("Id")
      ;
      }
    }

    public double StartTime
    {
      get { return GetValue("StartTime").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Antenna
    {
      get { return GetValue("Antenna").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Antenna", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes an antenna change.
  ///
  /// Name Type   Description
  /// ---- ------ -------------------------------------
  /// Id   string Unique identifier (see AntennaChange)
  ///

  public class RemoveAntennaChange : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes an antenna change."; }
    }

    internal const string CmdName = "RemoveAntennaChange";

    public RemoveAntennaChange()
      : base(CmdName)
    {}

    public RemoveAntennaChange(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clear all antenna changes.
  ///
  /// 
  ///

  public class ClearAllAntennaChanges : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear all antenna changes."; }
    }

    internal const string CmdName = "ClearAllAntennaChanges";

    public ClearAllAntennaChanges()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Set WF antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the vehicle trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------------------------------
  /// X     double WF Antenna X offset in the body frame (meter)
  /// Y     double WF Antenna Y offset in the body frame (meter)
  /// Z     double WF Antenna Z offset in the body frame (meter)
  /// Yaw   double WF Antenna Yaw offset in the body frame (rad)
  /// Pitch double WF Antenna Pitch offset in the body frame (rad)
  /// Roll  double WF Antenna Roll offset in the body frame (rad)
  ///

  public class SetWFAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set WF antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the vehicle trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "SetWFAntennaOffset";

    public SetWFAntennaOffset()
      : base(CmdName)
    {}

    public SetWFAntennaOffset(double x, double y, double z, double yaw, double pitch, double roll)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the WF antenna offset infos.
  ///
  /// 
  ///

  public class GetWFAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the WF antenna offset infos."; }
    }

    internal const string CmdName = "GetWFAntennaOffset";

    public GetWFAntennaOffset()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetWFAntennaOffset.
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------------------------------
  /// X     double WF Antenna X offset in the body frame (meter)
  /// Y     double WF Antenna Y offset in the body frame (meter)
  /// Z     double WF Antenna Z offset in the body frame (meter)
  /// Yaw   double WF Antenna Yaw offset in the body frame (rad)
  /// Pitch double WF Antenna Pitch offset in the body frame (rad)
  /// Roll  double WF Antenna Roll offset in the body frame (rad)
  ///

  public class GetWFAntennaOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetWFAntennaOffset."; }
    }

    internal const string CmdName = "GetWFAntennaOffsetResult";

    public GetWFAntennaOffsetResult()
      : base(CmdName)
    {}

    public GetWFAntennaOffsetResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set WF antenna offset and orientation relative to CRPA Antenna frame for the specified element index.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------
  /// X       double WF Element X offset in the CRPA antenna frame (meter)
  /// Y       double WF Element Y offset in the CRPA antenna frame (meter)
  /// Z       double WF Element Z offset in the CRPA antenna frame (meter)
  /// Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
  /// Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
  /// Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
  /// Element int    One-based index for element in antenna.
  ///

  public class SetWFAntennaElementOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set WF antenna offset and orientation relative to CRPA Antenna frame for the specified element index."; }
    }

    internal const string CmdName = "SetWFAntennaElementOffset";

    public SetWFAntennaElementOffset()
      : base(CmdName)
    {}

    public SetWFAntennaElementOffset(double x, double y, double z, double yaw, double pitch, double roll, int element)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the WF antenna offset infos for this element.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Element int  One-based index for element in antenna.
  ///

  public class GetWFAntennaElementOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the WF antenna offset infos for this element."; }
    }

    internal const string CmdName = "GetWFAntennaElementOffset";

    public GetWFAntennaElementOffset()
      : base(CmdName)
    {}

    public GetWFAntennaElementOffset(int element)
      : base(CmdName)
    {
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetWFAntennaElementOffset.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------
  /// X       double WF Element X offset in the CRPA antenna frame (meter)
  /// Y       double WF Element Y offset in the CRPA antenna frame (meter)
  /// Z       double WF Element Z offset in the CRPA antenna frame (meter)
  /// Yaw     double WF Element Yaw offset in the CRPA antenna frame (rad)
  /// Pitch   double WF Element Pitch offset in the CRPA antenna frame (rad)
  /// Roll    double WF Element Roll offset in the CRPA antenna frame (rad)
  /// Element int    One-based index for element in antenna.
  ///

  public class GetWFAntennaElementOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetWFAntennaElementOffset."; }
    }

    internal const string CmdName = "GetWFAntennaElementOffsetResult";

    public GetWFAntennaElementOffsetResult()
      : base(CmdName)
    {}

    public GetWFAntennaElementOffsetResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, int element)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Element")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set WF Antenna model for this element
  ///
  /// Name             Type   Description
  /// ---------------- ------ ----------------------------------------------------------------------------------------------------
  /// AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
  /// Element          int    One-based index for element in antenna.
  ///

  public class SetWFAntennaElementModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Set WF Antenna model for this element"; }
    }

    internal const string CmdName = "SetWFAntennaElementModel";

    public SetWFAntennaElementModel()
      : base(CmdName)
    {}

    public SetWFAntennaElementModel(string antennaModelName, int element)
      : base(CmdName)
    {
      AntennaModelName = antennaModelName;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("AntennaModelName")
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string AntennaModelName
    {
      get { return GetValue("AntennaModelName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get WF Antenna model for this element
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Element int  One-based index for element in antenna.
  ///

  public class GetWFAntennaElementModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Get WF Antenna model for this element"; }
    }

    internal const string CmdName = "GetWFAntennaElementModel";

    public GetWFAntennaElementModel()
      : base(CmdName)
    {}

    public GetWFAntennaElementModel(int element)
      : base(CmdName)
    {
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetWFAntennaElementModel.
  ///
  /// Name             Type   Description
  /// ---------------- ------ ----------------------------------------------------------------------------------------------------
  /// AntennaModelName string Antenna Model name to set for this element. Antenna models must be defined in vehicle antenna model.
  /// Element          int    One-based index for element in antenna.
  ///

  public class GetWFAntennaElementModelResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetWFAntennaElementModel."; }
    }

    internal const string CmdName = "GetWFAntennaElementModelResult";

    public GetWFAntennaElementModelResult()
      : base(CmdName)
    {}

    public GetWFAntennaElementModelResult(CommandBase relatedCommand, string antennaModelName, int element)
      : base(CmdName, relatedCommand)
    {
      AntennaModelName = antennaModelName;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("AntennaModelName")
        && Contains("Element")
      ;
      }
    }

    public string AntennaModelName
    {
      get { return GetValue("AntennaModelName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set WF Antenna phase pattern offset (in rad) for this element
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------------------------------
  /// PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
  /// Element     int    One-based index for element in antenna.
  ///

  public class SetWFAntennaElementPhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set WF Antenna phase pattern offset (in rad) for this element"; }
    }

    internal const string CmdName = "SetWFAntennaElementPhasePatternOffset";

    public SetWFAntennaElementPhasePatternOffset()
      : base(CmdName)
    {}

    public SetWFAntennaElementPhasePatternOffset(double phaseOffset, int element)
      : base(CmdName)
    {
      PhaseOffset = phaseOffset;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get WF Antenna phase pattern offset (in rad) for this element
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Element int  One-based index for element in antenna.
  ///

  public class GetWFAntennaElementPhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get WF Antenna phase pattern offset (in rad) for this element"; }
    }

    internal const string CmdName = "GetWFAntennaElementPhasePatternOffset";

    public GetWFAntennaElementPhasePatternOffset()
      : base(CmdName)
    {}

    public GetWFAntennaElementPhasePatternOffset(int element)
      : base(CmdName)
    {
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetWFAntennaElementPhasePatternOffset.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------------------------------
  /// PhaseOffset double Antenna phase pattern offset (in rad) to set for this element. [-Pi ; Pi]
  /// Element     int    One-based index for element in antenna.
  ///

  public class GetWFAntennaElementPhasePatternOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetWFAntennaElementPhasePatternOffset."; }
    }

    internal const string CmdName = "GetWFAntennaElementPhasePatternOffsetResult";

    public GetWFAntennaElementPhasePatternOffsetResult()
      : base(CmdName)
    {}

    public GetWFAntennaElementPhasePatternOffsetResult(CommandBase relatedCommand, double phaseOffset, int element)
      : base(CmdName, relatedCommand)
    {
      PhaseOffset = phaseOffset;
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Element")
      ;
      }
    }

    public double PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set WF antenna element enabled or disabled. A disabled antenna element is not simulated at all.
  ///
  /// Name    Type Description
  /// ------- ---- -------------------------------------------------
  /// Element int  One-based index for element in antenna.
  /// Enabled bool If True, this antenna element will bil simulated.
  ///

  public class SetWFAntennaElementEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Set WF antenna element enabled or disabled. A disabled antenna element is not simulated at all."; }
    }

    internal const string CmdName = "SetWFAntennaElementEnabled";

    public SetWFAntennaElementEnabled()
      : base(CmdName)
    {}

    public SetWFAntennaElementEnabled(int element, bool enabled)
      : base(CmdName)
    {
      Element = element;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether an antenna element is enabled or disabled.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Element int  One-based index for element in antenna.
  ///

  public class IsWFAntennaElementEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether an antenna element is enabled or disabled."; }
    }

    internal const string CmdName = "IsWFAntennaElementEnabled";

    public IsWFAntennaElementEnabled()
      : base(CmdName)
    {}

    public IsWFAntennaElementEnabled(int element)
      : base(CmdName)
    {
      Element = element;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsWFAntennaElementEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- -------------------------------------------------
  /// Element int  One-based index for element in antenna.
  /// Enabled bool If True, this antenna element will bil simulated.
  ///

  public class IsWFAntennaElementEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsWFAntennaElementEnabled."; }
    }

    internal const string CmdName = "IsWFAntennaElementEnabledResult";

    public IsWFAntennaElementEnabledResult()
      : base(CmdName)
    {}

    public IsWFAntennaElementEnabledResult(CommandBase relatedCommand, int element, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Element = element;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Element")
        && Contains("Enabled")
      ;
      }
    }

    public int Element
    {
      get { return GetValue("Element").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Element", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a list of all space vehicle antenna names.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetAllSVAntennaNames : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a list of all space vehicle antenna names."; }
    }

    internal const string CmdName = "GetAllSVAntennaNames";

    public GetAllSVAntennaNames()
      : base(CmdName)
    {}

    public GetAllSVAntennaNames(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllSVAntennaNames.
  ///
  /// Name         Type         Description
  /// ------------ ------------ ----------------------------------------------------------------
  /// System       string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// AntennaNames array string A list of antenna model names.
  ///

  public class GetAllSVAntennaNamesResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllSVAntennaNames."; }
    }

    internal const string CmdName = "GetAllSVAntennaNamesResult";

    public GetAllSVAntennaNamesResult()
      : base(CmdName)
    {}

    public GetAllSVAntennaNamesResult(CommandBase relatedCommand, string system, List<string> antennaNames)
      : base(CmdName, relatedCommand)
    {
      System = system;
      AntennaNames = antennaNames;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("AntennaNames")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> AntennaNames
    {
      get { return GetValue("AntennaNames").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaNames", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add an offset (in dB) for all values of the pattern.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Offset      double          Power offset
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class AddSVGainPatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Add an offset (in dB) for all values of the pattern."; }
    }

    internal const string CmdName = "AddSVGainPatternOffset";

    public AddSVGainPatternOffset()
      : base(CmdName)
    {}

    public AddSVGainPatternOffset(GNSSBand band, string system, double offset, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the offset (in dB) for the antenna gain pattern of the band.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetSVGainPatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the offset (in dB) for the antenna gain pattern of the band."; }
    }

    internal const string CmdName = "GetSVGainPatternOffset";

    public GetSVGainPatternOffset()
      : base(CmdName)
    {}

    public GetSVGainPatternOffset(GNSSBand band, string system, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVGainPatternOffset.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Offset      double          Power offset
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetSVGainPatternOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVGainPatternOffset."; }
    }

    internal const string CmdName = "GetSVGainPatternOffsetResult";

    public GetSVGainPatternOffsetResult()
      : base(CmdName)
    {}

    public GetSVGainPatternOffsetResult(CommandBase relatedCommand, GNSSBand band, string system, double offset, string antennaName = null)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      System = system;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add an offset (in rad) for all values of the phase pattern.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Offset      double          Phase offset (in rad)
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class AddSVPhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Add an offset (in rad) for all values of the phase pattern."; }
    }

    internal const string CmdName = "AddSVPhasePatternOffset";

    public AddSVPhasePatternOffset()
      : base(CmdName)
    {}

    public AddSVPhasePatternOffset(GNSSBand band, string system, double offset, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the offset (in rad) for the antenna phase pattern of the band.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetSVPhasePatternOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the offset (in rad) for the antenna phase pattern of the band."; }
    }

    internal const string CmdName = "GetSVPhasePatternOffset";

    public GetSVPhasePatternOffset()
      : base(CmdName)
    {}

    public GetSVPhasePatternOffset(GNSSBand band, string system, string antennaName = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVPhasePatternOffset.
  ///
  /// Name        Type            Description
  /// ----------- --------------- ------------------------------------------------------------------------------------
  /// Band        GNSSBand        Offset will be apply to this band. ("L1", "L2" or "L5")
  /// System      string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Offset      double          Phase offset (in rad)
  /// AntennaName optional string Vehicle antenna name. If no name is specified, apply the offset to the Basic Antenna
  ///

  public class GetSVPhasePatternOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVPhasePatternOffset."; }
    }

    internal const string CmdName = "GetSVPhasePatternOffsetResult";

    public GetSVPhasePatternOffsetResult()
      : base(CmdName)
    {}

    public GetSVPhasePatternOffsetResult(CommandBase relatedCommand, GNSSBand band, string system, double offset, string antennaName = null)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      System = system;
      Offset = offset;
      AntennaName = antennaName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("AntennaName");
        else
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.
  ///
  /// Name   Type               Description
  /// ------ ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type   AntennaPatternType Pattern type
  /// Band   GNSSBand           Frequency band
  /// System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name   optional string    SV antenna name
  ///

  public class SetSVAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Set space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna."; }
    }

    internal const string CmdName = "SetSVAntennaGain";

    public SetSVAntennaGain()
      : base(CmdName)
    {}

    public SetSVAntennaGain(List<List<double>> gain, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      Gain = gain;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna.
  ///
  /// Name   Type            Description
  /// ------ --------------- ----------------------------------------------------------------
  /// Band   GNSSBand        Frequency band
  /// System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name   optional string SV antenna name
  ///

  public class GetSVAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Get space vehicle gain antenna pattern. If no name is specified, the command is aplied to Basic SV Antenna."; }
    }

    internal const string CmdName = "GetSVAntennaGain";

    public GetSVAntennaGain()
      : base(CmdName)
    {}

    public GetSVAntennaGain(GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVAntennaGain.
  ///
  /// Name   Type               Description
  /// ------ ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain   array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type   AntennaPatternType Pattern type
  /// Band   GNSSBand           Frequency band
  /// System string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name   optional string    SV antenna name
  ///

  public class GetSVAntennaGainResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVAntennaGain."; }
    }

    internal const string CmdName = "GetSVAntennaGainResult";

    public GetSVAntennaGainResult()
      : base(CmdName)
    {}

    public GetSVAntennaGainResult(CommandBase relatedCommand, List<List<double>> gain, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName, relatedCommand)
    {
      Gain = gain;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
  ///
  /// Name        Type               Description
  /// ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
  /// PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type        AntennaPatternType Pattern type
  /// Band        GNSSBand           Frequency band
  /// System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name        optional string    SV antenna name
  ///

  public class SetSVAntennaPhaseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna."; }
    }

    internal const string CmdName = "SetSVAntennaPhaseOffset";

    public SetSVAntennaPhaseOffset()
      : base(CmdName)
    {}

    public SetSVAntennaPhaseOffset(List<List<double>> phaseOffset, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      PhaseOffset = phaseOffset;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna.
  ///
  /// Name   Type            Description
  /// ------ --------------- ----------------------------------------------------------------
  /// Band   GNSSBand        Frequency band
  /// System string          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name   optional string SV antenna name
  ///

  public class GetSVAntennaPhaseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get space vehicle phase offset antenna pattern. If no name is specified, the command is aplied to Basic Vehicle Antenna."; }
    }

    internal const string CmdName = "GetSVAntennaPhaseOffset";

    public GetSVAntennaPhaseOffset()
      : base(CmdName)
    {}

    public GetSVAntennaPhaseOffset(GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVAntennaPhaseOffset.
  ///
  /// Name        Type               Description
  /// ----------- ------------------ ----------------------------------------------------------------------------------------------------------------------------------
  /// PhaseOffset array array double Phase offset matrix (rad). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type        AntennaPatternType Pattern type
  /// Band        GNSSBand           Frequency band
  /// System      string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name        optional string    SV antenna name
  ///

  public class GetSVAntennaPhaseOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVAntennaPhaseOffset."; }
    }

    internal const string CmdName = "GetSVAntennaPhaseOffsetResult";

    public GetSVAntennaPhaseOffsetResult()
      : base(CmdName)
    {}

    public GetSVAntennaPhaseOffsetResult(CommandBase relatedCommand, List<List<double>> phaseOffset, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName, relatedCommand)
    {
      PhaseOffset = phaseOffset;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PhaseOffset")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public List<List<double>> PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set space vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.
  ///
  /// Name     Type               Description
  /// -------- ------------------ ------------------------------------------------------------------------------------------------------------------
  /// FilePath string             File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
  /// Type     AntennaPatternType Pattern type
  /// Band     GNSSBand           Frequency band
  /// System   string             "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name     optional string    Vehicle antenna name
  ///

  public class SetSVAntennaGainCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set space vehicle gain antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna."; }
    }

    internal const string CmdName = "SetSVAntennaGainCSV";

    public SetSVAntennaGainCSV()
      : base(CmdName)
    {}

    public SetSVAntennaGainCSV(string filePath, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      FilePath = filePath;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set space vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna.
  ///
  /// Name       Type                   Description
  /// ---------- ---------------------- ------------------------------------------------------------------------------------------------------------------
  /// FilePath   string                 File path of the CSV. For Default and None type, lets it empty. See formats in user manual part 8.7.9.2.1. Models.
  /// FileFormat AntennaPatternFileType Values' unit of the CSV File: "Degrees", "Radians" or "NoneFile" in case of None-pattern type.
  /// Type       AntennaPatternType     Pattern type
  /// Band       GNSSBand               Frequency band
  /// System     string                 "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Name       optional string        SV antenna name
  ///

  public class SetSVAntennaPhaseOffsetCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set space vehicle phase offset antenna pattern from a CSV file. If no name is specified, the command is aplied to Basic SV Antenna."; }
    }

    internal const string CmdName = "SetSVAntennaPhaseOffsetCSV";

    public SetSVAntennaPhaseOffsetCSV()
      : base(CmdName)
    {}

    public SetSVAntennaPhaseOffsetCSV(string filePath, AntennaPatternFileType fileFormat, AntennaPatternType type, GNSSBand band, string system, string name = null)
      : base(CmdName)
    {
      FilePath = filePath;
      FileFormat = fileFormat;
      Type = type;
      Band = band;
      System = system;
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
        && Contains("FileFormat")
        && Contains("Type")
        && Contains("Band")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternFileType FileFormat
    {
      get { return GetValue("FileFormat").ToObject<AntennaPatternFileType>(CommandBase.Serializer); }
      set
      {
          SetValue("FileFormat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public GNSSBand Band
    {
      get { return GetValue("Band").ToObject<GNSSBand>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Name");
        else
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Create an empty space vehicle antenna model.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// Name   string SV antenna model name
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class AddEmptySVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Create an empty space vehicle antenna model."; }
    }

    internal const string CmdName = "AddEmptySVAntennaModel";

    public AddEmptySVAntennaModel()
      : base(CmdName)
    {}

    public AddEmptySVAntennaModel(string name, string system)
      : base(CmdName)
    {
      Name = name;
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Delete a space vehicle antenna model. The default SV antenna model can't be deleted.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// Name   string SV antenna model name
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class DeleteSVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Delete a space vehicle antenna model. The default SV antenna model can't be deleted."; }
    }

    internal const string CmdName = "DeleteSVAntennaModel";

    public DeleteSVAntennaModel()
      : base(CmdName)
    {}

    public DeleteSVAntennaModel(string name, string system)
      : base(CmdName)
    {
      Name = name;
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Rename a space vehicle antenna model.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// Name    string Reference space vehicle antenna model name
  /// NewName string New space vehicle antenna model name
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class RenameSVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Rename a space vehicle antenna model."; }
    }

    internal const string CmdName = "RenameSVAntennaModel";

    public RenameSVAntennaModel()
      : base(CmdName)
    {}

    public RenameSVAntennaModel(string name, string newName, string system)
      : base(CmdName)
    {
      Name = name;
      NewName = newName;
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("NewName")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string NewName
    {
      get { return GetValue("NewName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NewName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Copy a space vehicle antenna model.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------------
  /// Name     string Reference space vehicle antenna model name
  /// CopyName string Copy space vehicle antenna model name
  /// System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class CopySVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Copy a space vehicle antenna model."; }
    }

    internal const string CmdName = "CopySVAntennaModel";

    public CopySVAntennaModel()
      : base(CmdName)
    {}

    public CopySVAntennaModel(string name, string copyName, string system)
      : base(CmdName)
    {
      Name = name;
      CopyName = copyName;
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("CopyName")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string CopyName
    {
      get { return GetValue("CopyName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("CopyName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import a space vehicle antenna model from a XML file.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------------
  /// FilePath string File path of the antenna model
  /// System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class ImportSVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Import a space vehicle antenna model from a XML file."; }
    }

    internal const string CmdName = "ImportSVAntennaModel";

    public ImportSVAntennaModel()
      : base(CmdName)
    {}

    public ImportSVAntennaModel(string filePath, string system)
      : base(CmdName)
    {
      FilePath = filePath;
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FilePath")
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export a space vehicle antenna model in a XML file.
  ///
  /// Name        Type   Description
  /// ----------- ------ ----------------------------------------------------------------
  /// AntennaName string SV antenna model name
  /// System      string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// FilePath    string The antenna model will be exported in this file path.
  /// Overwriting bool   Overwrite the old file if true.
  ///

  public class ExportSVAntennaModel : CommandBase
  {
    public override string Documentation
    {
      get { return "Export a space vehicle antenna model in a XML file."; }
    }

    internal const string CmdName = "ExportSVAntennaModel";

    public ExportSVAntennaModel()
      : base(CmdName)
    {}

    public ExportSVAntennaModel(string antennaName, string system, string filePath, bool overwriting)
      : base(CmdName)
    {
      AntennaName = antennaName;
      System = system;
      FilePath = filePath;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("AntennaName")
        && Contains("System")
        && Contains("FilePath")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string AntennaName
    {
      get { return GetValue("AntennaName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string FilePath
    {
      get { return GetValue("FilePath").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FilePath", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the antenna model used by the SV.
  ///
  /// Name             Type   Description
  /// ---------------- ------ -----------------------------------------------------------------
  /// System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId             int    The satellite's SV ID.
  /// AntennaModelName string SV antenna model name.
  ///

  public class SetSVAntennaModelForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the antenna model used by the SV."; }
    }

    internal const string CmdName = "SetSVAntennaModelForSV";

    public SetSVAntennaModelForSV()
      : base(CmdName)
    {}

    public SetSVAntennaModelForSV(string system, int svId, string antennaModelName)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      AntennaModelName = antennaModelName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("AntennaModelName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaModelName
    {
      get { return GetValue("AntennaModelName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the antenna model used by the SV.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId   int    The satellite's SV ID.
  ///

  public class GetSVAntennaModelForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the antenna model used by the SV."; }
    }

    internal const string CmdName = "GetSVAntennaModelForSV";

    public GetSVAntennaModelForSV()
      : base(CmdName)
    {}

    public GetSVAntennaModelForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVAntennaModelForSV.
  ///
  /// Name             Type   Description
  /// ---------------- ------ -----------------------------------------------------------------
  /// System           string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId             int    The satellite's SV ID.
  /// AntennaModelName string SV antenna model name.
  ///

  public class GetSVAntennaModelForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVAntennaModelForSV."; }
    }

    internal const string CmdName = "GetSVAntennaModelForSVResult";

    public GetSVAntennaModelForSVResult()
      : base(CmdName)
    {}

    public GetSVAntennaModelForSVResult(CommandBase relatedCommand, string system, int svId, string antennaModelName)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      AntennaModelName = antennaModelName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("AntennaModelName")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string AntennaModelName
    {
      get { return GetValue("AntennaModelName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the antenna model for all satellites.
  ///
  /// Name              Type         Description
  /// ----------------- ------------ -----------------------------------------------------------------------------------------------------
  /// System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class SetSVAntennaModelForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the antenna model for all satellites."; }
    }

    internal const string CmdName = "SetSVAntennaModelForEachSV";

    public SetSVAntennaModelForEachSV()
      : base(CmdName)
    {}

    public SetSVAntennaModelForEachSV(string system, List<string> antennaModelNames)
      : base(CmdName)
    {
      System = system;
      AntennaModelNames = antennaModelNames;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("AntennaModelNames")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> AntennaModelNames
    {
      get { return GetValue("AntennaModelNames").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelNames", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the antenna model for all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetSVAntennaModelForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the antenna model for all satellites."; }
    }

    internal const string CmdName = "GetSVAntennaModelForEachSV";

    public GetSVAntennaModelForEachSV()
      : base(CmdName)
    {}

    public GetSVAntennaModelForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVAntennaModelForEachSV.
  ///
  /// Name              Type         Description
  /// ----------------- ------------ -----------------------------------------------------------------------------------------------------
  /// System            string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// AntennaModelNames array string Antenna model name for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class GetSVAntennaModelForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVAntennaModelForEachSV."; }
    }

    internal const string CmdName = "GetSVAntennaModelForEachSVResult";

    public GetSVAntennaModelForEachSVResult()
      : base(CmdName)
    {}

    public GetSVAntennaModelForEachSVResult(CommandBase relatedCommand, string system, List<string> antennaModelNames)
      : base(CmdName, relatedCommand)
    {
      System = system;
      AntennaModelNames = antennaModelNames;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("AntennaModelNames")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> AntennaModelNames
    {
      get { return GetValue("AntennaModelNames").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("AntennaModelNames", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the type of a SV.
  /// Satellite SV ID accepted values (0 for all SVs):
  /// QZSS 1..10
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// System string Only "QZSS" supported.
  /// SvId   int    Satellite SV ID, see command description for accepted values.
  /// SvType string Type of the SV. QZSS: "BlockI", "BlockII".
  ///

  public class SetSVType : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the type of a SV.\nSatellite SV ID accepted values (0 for all SVs):\nQZSS 1..10"; }
    }

    internal const string CmdName = "SetSVType";

    public SetSVType()
      : base(CmdName)
    {}

    public SetSVType(string system, int svId, string svType)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SvType = svType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SvType")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SvType
    {
      get { return GetValue("SvType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SvType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the type of a SV.
  /// Satellite SV ID accepted values:
  /// QZSS 1..10
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// System string Only "QZSS" supported.
  /// SvId   int    Satellite SV ID, see command description for accepted values.
  ///

  public class GetSVType : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the type of a SV.\nSatellite SV ID accepted values:\nQZSS 1..10"; }
    }

    internal const string CmdName = "GetSVType";

    public GetSVType()
      : base(CmdName)
    {}

    public GetSVType(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVType.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// System string Only "QZSS" supported.
  /// SvId   int    Satellite SV ID, see command description for accepted values.
  /// SvType string Type of the SV. QZSS: "BlockI", "BlockII".
  ///

  public class GetSVTypeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVType."; }
    }

    internal const string CmdName = "GetSVTypeResult";

    public GetSVTypeResult()
      : base(CmdName)
    {}

    public GetSVTypeResult(CommandBase relatedCommand, string system, int svId, string svType)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      SvType = svType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SvType")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SvType
    {
      get { return GetValue("SvType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SvType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the PRNs transmitted by the SV ID for these signals.
  ///
  /// Name          Type            Description
  /// ------------- --------------- --------------------------------------------------------------------------------
  /// SvId          int             Satellite SV ID.
  /// SignalPrnDict dict string:int A dictionary of signal prn pairs.
  ///                               Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
  ///                                                  "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                                  "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class SetTransmittedPrnForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the PRNs transmitted by the SV ID for these signals."; }
    }

    internal const string CmdName = "SetTransmittedPrnForSV";

    public SetTransmittedPrnForSV()
      : base(CmdName)
    {}

    public SetTransmittedPrnForSV(int svId, Dictionary<string, int> signalPrnDict)
      : base(CmdName)
    {
      SvId = svId;
      SignalPrnDict = signalPrnDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("SignalPrnDict")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, int> SignalPrnDict
    {
      get { return GetValue("SignalPrnDict").ToObject<Dictionary<string, int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalPrnDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the PRNs transmitted by the SV ID for these signals.
  ///
  /// Name        Type         Description
  /// ----------- ------------ ------------------------------------------------------------------------------
  /// SvId        int          Satellite SV ID.
  /// SignalArray array string An array of signals.
  ///                          Accepted values are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2",
  ///                                               "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB",
  ///                                               "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and
  ///                                               "NAVICL5"
  ///

  public class GetTransmittedPrnForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the PRNs transmitted by the SV ID for these signals."; }
    }

    internal const string CmdName = "GetTransmittedPrnForSV";

    public GetTransmittedPrnForSV()
      : base(CmdName)
    {}

    public GetTransmittedPrnForSV(int svId, List<string> signalArray)
      : base(CmdName)
    {
      SvId = svId;
      SignalArray = signalArray;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("SignalArray")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetTransmittedPrnForSV.
  ///
  /// Name          Type            Description
  /// ------------- --------------- --------------------------------------------------------------------------------
  /// SvId          int             Satellite SV ID.
  /// SignalPrnDict dict string:int A dictionary of signal prn pairs.
  ///                               Accepted keys are: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C",
  ///                                                  "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C",
  ///                                                  "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///

  public class GetTransmittedPrnForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetTransmittedPrnForSV."; }
    }

    internal const string CmdName = "GetTransmittedPrnForSVResult";

    public GetTransmittedPrnForSVResult()
      : base(CmdName)
    {}

    public GetTransmittedPrnForSVResult(CommandBase relatedCommand, int svId, Dictionary<string, int> signalPrnDict)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      SignalPrnDict = signalPrnDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("SignalPrnDict")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, int> SignalPrnDict
    {
      get { return GetValue("SignalPrnDict").ToObject<Dictionary<string, int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalPrnDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the PRN transmitted by the SV ID for this signal.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId   int    Satellite SV ID.
  /// Prn    int    PRN number.
  ///

  public class SetPrnOfSVID : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the PRN transmitted by the SV ID for this signal."; }
    }

    internal const string CmdName = "SetPrnOfSVID";

    public SetPrnOfSVID()
      : base(CmdName)
    {}

    public SetPrnOfSVID(string signal, int svId, int prn)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Prn")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the PRN transmitted by the SV ID for this signal.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId   int    Satellite SV ID.
  ///

  public class GetPrnOfSVID : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the PRN transmitted by the SV ID for this signal."; }
    }

    internal const string CmdName = "GetPrnOfSVID";

    public GetPrnOfSVID()
      : base(CmdName)
    {}

    public GetPrnOfSVID(string signal, int svId)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPrnOfSVID.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId   int    Satellite SV ID.
  /// Prn    int    PRN number.
  ///

  public class GetPrnOfSVIDResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPrnOfSVID."; }
    }

    internal const string CmdName = "GetPrnOfSVIDResult";

    public GetPrnOfSVIDResult()
      : base(CmdName)
    {}

    public GetPrnOfSVIDResult(CommandBase relatedCommand, string signal, int svId, int prn)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      SvId = svId;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("Prn")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the PRN for each satellite for specified signals.
  ///
  /// Name   Type      Description
  /// ------ --------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)
  ///

  public class SetPrnForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the PRN for each satellite for specified signals."; }
    }

    internal const string CmdName = "SetPrnForEachSV";

    public SetPrnForEachSV()
      : base(CmdName)
    {}

    public SetPrnForEachSV(string signal, List<int> prn)
      : base(CmdName)
    {
      Signal = signal;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Prn")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Prn
    {
      get { return GetValue("Prn").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the PRN for each satellite for specified signals.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class GetPrnForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the PRN for each satellite for specified signals."; }
    }

    internal const string CmdName = "GetPrnForEachSV";

    public GetPrnForEachSV()
      : base(CmdName)
    {}

    public GetPrnForEachSV(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPrnForEachSV.
  ///
  /// Name   Type      Description
  /// ------ --------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string    Accepted signal keys: "L1CA", "L1C", "L2C", "L5", "E1", "E6BC", "B1", "B2", "B1C", "B2a", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Prn    array int PRN value to set for each satellite. Zero based index (index 0 => PRN for SV ID 1, index 1 => PRN for SV ID 2, etc)
  ///

  public class GetPrnForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPrnForEachSV."; }
    }

    internal const string CmdName = "GetPrnForEachSVResult";

    public GetPrnForEachSVResult()
      : base(CmdName)
    {}

    public GetPrnForEachSVResult(CommandBase relatedCommand, string signal, List<int> prn)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Prn")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Prn
    {
      get { return GetValue("Prn").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Reset the PRNs of all satellites in specified system, for all signals.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class ResetToDefaultPrn : CommandBase
  {
    public override string Documentation
    {
      get { return "Reset the PRNs of all satellites in specified system, for all signals."; }
    }

    internal const string CmdName = "ResetToDefaultPrn";

    public ResetToDefaultPrn()
      : base(CmdName)
    {}

    public ResetToDefaultPrn(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set trajectory smoothing for Track or Route enabled or disabled
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------
  /// Enabled bool If true, trajectory will be smoothed during simulation
  ///

  public class EnableTrajectorySmoothing : CommandBase
  {
    public override string Documentation
    {
      get { return "Set trajectory smoothing for Track or Route enabled or disabled"; }
    }

    internal const string CmdName = "EnableTrajectorySmoothing";

    public EnableTrajectorySmoothing()
      : base(CmdName)
    {}

    public EnableTrajectorySmoothing(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get trajectory smoothing for Track or Route enabled or disabled
  ///
  /// 
  ///

  public class IsTrajectorySmoothingEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get trajectory smoothing for Track or Route enabled or disabled"; }
    }

    internal const string CmdName = "IsTrajectorySmoothingEnabled";

    public IsTrajectorySmoothingEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsTrajectorySmoothingEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------
  /// Enabled bool If true, trajectory will be smoothed during simulation
  ///

  public class IsTrajectorySmoothingEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsTrajectorySmoothingEnabled."; }
    }

    internal const string CmdName = "IsTrajectorySmoothingEnabledResult";

    public IsTrajectorySmoothingEnabledResult()
      : base(CmdName)
    {}

    public IsTrajectorySmoothingEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------------
  /// Enabled bool If true, simulation will stop when the vehicle will reach trajectory end
  ///

  public class EnableSimulationStopAtTrajectoryEnd : CommandBase
  {
    public override string Documentation
    {
      get { return "Set simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes"; }
    }

    internal const string CmdName = "EnableSimulationStopAtTrajectoryEnd";

    public EnableSimulationStopAtTrajectoryEnd()
      : base(CmdName)
    {}

    public EnableSimulationStopAtTrajectoryEnd(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes
  ///
  /// 
  ///

  public class IsSimulationStopAtTrajectoryEndEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get simulation automatic stop when the vehicle reaches trajectory end enabled or disabled. Only effective with Tracks and Routes"; }
    }

    internal const string CmdName = "IsSimulationStopAtTrajectoryEndEnabled";

    public IsSimulationStopAtTrajectoryEndEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsSimulationStopAtTrajectoryEndEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------------------------------------------------------------
  /// Enabled bool If true, simulation will stop when the vehicle will reach trajectory end
  ///

  public class IsSimulationStopAtTrajectoryEndEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSimulationStopAtTrajectoryEndEnabled."; }
    }

    internal const string CmdName = "IsSimulationStopAtTrajectoryEndEnabledResult";

    public IsSimulationStopAtTrajectoryEndEnabledResult()
      : base(CmdName)
    {}

    public IsSimulationStopAtTrajectoryEndEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set force vehicle yaw, pitch and roll to zero enabled or disabled
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------
  /// Enabled bool If true, vehicle won't rotate during simulation
  ///

  public class ForceAttitudeToZero : CommandBase
  {
    public override string Documentation
    {
      get { return "Set force vehicle yaw, pitch and roll to zero enabled or disabled"; }
    }

    internal const string CmdName = "ForceAttitudeToZero";

    public ForceAttitudeToZero()
      : base(CmdName)
    {}

    public ForceAttitudeToZero(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get force vehicle yaw, pitch and roll to zero enabled or disabled
  ///
  /// 
  ///

  public class IsAttitudeToZeroForced : CommandBase
  {
    public override string Documentation
    {
      get { return "Get force vehicle yaw, pitch and roll to zero enabled or disabled"; }
    }

    internal const string CmdName = "IsAttitudeToZeroForced";

    public IsAttitudeToZeroForced()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsAttitudeToZeroForced.
  ///
  /// Name    Type Description
  /// ------- ---- -----------------------------------------------
  /// Enabled bool If true, vehicle won't rotate during simulation
  ///

  public class IsAttitudeToZeroForcedResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsAttitudeToZeroForced."; }
    }

    internal const string CmdName = "IsAttitudeToZeroForcedResult";

    public IsAttitudeToZeroForcedResult()
      : base(CmdName)
    {}

    public IsAttitudeToZeroForcedResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle trajectory type
  ///
  /// Name Type   Description
  /// ---- ------ -----------------------------------------------------------------------
  /// Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")
  ///

  public class SetVehicleTrajectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle trajectory type"; }
    }

    internal const string CmdName = "SetVehicleTrajectory";

    public SetVehicleTrajectory()
      : base(CmdName)
    {}

    public SetVehicleTrajectory(string type)
      : base(CmdName)
    {
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get vehicle trajectory type
  ///
  /// 
  ///

  public class GetVehicleTrajectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Get vehicle trajectory type"; }
    }

    internal const string CmdName = "GetVehicleTrajectory";

    public GetVehicleTrajectory()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleTrajectory.
  ///
  /// Name Type   Description
  /// ---- ------ -----------------------------------------------------------------------
  /// Type string Trajectory type ("Fix", "Circular", "HIL", "Track", "Route" or "Orbit")
  ///

  public class GetVehicleTrajectoryResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleTrajectory."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryResult";

    public GetVehicleTrajectoryResult()
      : base(CmdName)
    {}

    public GetVehicleTrajectoryResult(CommandBase relatedCommand, string type)
      : base(CmdName, relatedCommand)
    {
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle type for Route Trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------------------
  /// Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
  ///

  public class SetVehicleType : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle type for Route Trajectory"; }
    }

    internal const string CmdName = "SetVehicleType";

    public SetVehicleType()
      : base(CmdName)
    {}

    public SetVehicleType(string type)
      : base(CmdName)
    {
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get vehicle type for Route Trajectory
  ///
  /// 
  ///

  public class GetVehicleType : CommandBase
  {
    public override string Documentation
    {
      get { return "Get vehicle type for Route Trajectory"; }
    }

    internal const string CmdName = "GetVehicleType";

    public GetVehicleType()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleType.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------------------
  /// Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
  ///

  public class GetVehicleTypeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleType."; }
    }

    internal const string CmdName = "GetVehicleTypeResult";

    public GetVehicleTypeResult()
      : base(CmdName)
    {}

    public GetVehicleTypeResult(CommandBase relatedCommand, string type)
      : base(CmdName, relatedCommand)
    {
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Begins a new track definition. Actual track remains unchanged until
  /// EndTrackDefinition command is sent and successful. After this command, the
  /// client must push time and position pairs to form a complete track. Once all the
  /// positions are sent, the client must send the command EndTrackDefinition.
  ///
  /// 
  ///

  public class BeginTrackDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "Begins a new track definition. Actual track remains unchanged until\nEndTrackDefinition command is sent and successful. After this command, the\nclient must push time and position pairs to form a complete track. Once all the\npositions are sent, the client must send the command EndTrackDefinition."; }
    }

    internal const string CmdName = "BeginTrackDefinition";

    public BeginTrackDefinition()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Push a track ecef node. Must be called after BeginTrackDefinition and before EndTrackDefinition.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------------------
  /// Time int    Node Timestamp in miliseconds
  /// X    double X distance from earth-center in meters
  /// Y    double Y distance from earth-center in meters
  /// Z    double Z distance from earth-center in meters
  ///

  public class PushTrackEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Push a track ecef node. Must be called after BeginTrackDefinition and before EndTrackDefinition."; }
    }

    internal const string CmdName = "PushTrackEcef";

    public PushTrackEcef()
      : base(CmdName)
    {}

    public PushTrackEcef(int time, double x, double y, double z)
      : base(CmdName)
    {
      Time = time;
      X = x;
      Y = y;
      Z = z;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Time
    {
      get { return GetValue("Time").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Push a track ecef and ned attitude node. Must be called after BeginTrackDefinition and before EndTrackDefinition.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// Time  int    Node Timestamp in miliseconds
  /// X     double X distance from earth-center in meters
  /// Y     double Y distance from earth-center in meters
  /// Z     double Z distance from earth-center in meters
  /// Yaw   double Yaw in radians
  /// Pitch double Pitch in radians
  /// Roll  double Roll in radians
  ///

  public class PushTrackEcefNed : CommandBase
  {
    public override string Documentation
    {
      get { return "Push a track ecef and ned attitude node. Must be called after BeginTrackDefinition and before EndTrackDefinition."; }
    }

    internal const string CmdName = "PushTrackEcefNed";

    public PushTrackEcefNed()
      : base(CmdName)
    {}

    public PushTrackEcefNed(int time, double x, double y, double z, double yaw, double pitch, double roll)
      : base(CmdName)
    {
      Time = time;
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Time
    {
      get { return GetValue("Time").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// This command completes the track started with BeginTrackDefinition command. If
  /// the track is accepted, the current track in the configuration is replaced with
  /// this new track. If the track is not accepted, the current track in the config
  /// remains unchanged.
  ///
  /// 
  ///

  public class EndTrackDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "This command completes the track started with BeginTrackDefinition command. If\nthe track is accepted, the current track in the configuration is replaced with\nthis new track. If the track is not accepted, the current track in the config\nremains unchanged."; }
    }

    internal const string CmdName = "EndTrackDefinition";

    public EndTrackDefinition()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// EndTrackDefinition Result with created track informations.
  ///
  /// Name  Type Description
  /// ----- ---- ----------------------------------------------------------------------------------------------------
  /// Count int  Number of nodes in the track. The client can compare this value with the number of positions pushed.
  ///

  public class EndTrackDefinitionResult : CommandResult
  {
    public override string Documentation
    {
      get { return "EndTrackDefinition Result with created track informations."; }
    }

    internal const string CmdName = "EndTrackDefinitionResult";

    public EndTrackDefinitionResult()
      : base(CmdName)
    {}

    public EndTrackDefinitionResult(CommandBase relatedCommand, int count)
      : base(CmdName, relatedCommand)
    {
      Count = count;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Count")
      ;
      }
    }

    public int Count
    {
      get { return GetValue("Count").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Count", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Begins a new route definition. Actual route remains unchanged until
  /// EndRouteDefinition command is sent and successful. After this command, the
  /// client must push time and position pairs to form a complete route. Once all the
  /// positions are sent, the client must send the command EndRouteDefinition.
  ///
  /// 
  ///

  public class BeginRouteDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "Begins a new route definition. Actual route remains unchanged until\nEndRouteDefinition command is sent and successful. After this command, the\nclient must push time and position pairs to form a complete route. Once all the\npositions are sent, the client must send the command EndRouteDefinition."; }
    }

    internal const string CmdName = "BeginRouteDefinition";

    public BeginRouteDefinition()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Push a route ecef node with speed. Must be called after BeginRouteDefinition and before EndRouteDefinition.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// Speed double Node speed in meters per second
  /// X     double X distance from earth-center in meters
  /// Y     double Y distance from earth-center in meters
  /// Z     double Z distance from earth-center in meters
  ///

  public class PushRouteEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Push a route ecef node with speed. Must be called after BeginRouteDefinition and before EndRouteDefinition."; }
    }

    internal const string CmdName = "PushRouteEcef";

    public PushRouteEcef()
      : base(CmdName)
    {}

    public PushRouteEcef(double speed, double x, double y, double z)
      : base(CmdName)
    {
      Speed = speed;
      X = x;
      Y = y;
      Z = z;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Speed")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// This command completes the route started with BeginRouteDefinition command. If
  /// the route is accepted, the current route in the configuration is replaced with
  /// this new route. If the route is not accepted, the current route in the config
  /// remains unchanged.
  ///
  /// 
  ///

  public class EndRouteDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "This command completes the route started with BeginRouteDefinition command. If\nthe route is accepted, the current route in the configuration is replaced with\nthis new route. If the route is not accepted, the current route in the config\nremains unchanged."; }
    }

    internal const string CmdName = "EndRouteDefinition";

    public EndRouteDefinition()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// EndRouteDefinition Result with created route informations.
  ///
  /// Name  Type Description
  /// ----- ---- ----------------------------------------------------------------------------------------------------
  /// Count int  Number of nodes in the route. The client can compare this value with the number of positions pushed.
  ///

  public class EndRouteDefinitionResult : CommandResult
  {
    public override string Documentation
    {
      get { return "EndRouteDefinition Result with created route informations."; }
    }

    internal const string CmdName = "EndRouteDefinitionResult";

    public EndRouteDefinitionResult()
      : base(CmdName)
    {}

    public EndRouteDefinitionResult(CommandBase relatedCommand, int count)
      : base(CmdName, relatedCommand)
    {
      Count = count;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Count")
      ;
      }
    }

    public int Count
    {
      get { return GetValue("Count").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Count", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------
  /// Type  string Trajectory type ("Fix")
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  ///

  public class SetVehicleTrajectoryFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle static position and orientation"; }
    }

    internal const string CmdName = "SetVehicleTrajectoryFix";

    public SetVehicleTrajectoryFix()
      : base(CmdName)
    {}

    public SetVehicleTrajectoryFix(string type, double lat, double lon, double alt, double yaw, double pitch, double roll)
      : base(CmdName)
    {
      Type = type;
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get vehicle static position and orientation
  ///
  /// 
  ///

  public class GetVehicleTrajectoryFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Get vehicle static position and orientation"; }
    }

    internal const string CmdName = "GetVehicleTrajectoryFix";

    public GetVehicleTrajectoryFix()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleTrajectoryFix.
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------
  /// Type  string Trajectory type ("Fix")
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  ///

  public class GetVehicleTrajectoryFixResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleTrajectoryFix."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryFixResult";

    public GetVehicleTrajectoryFixResult()
      : base(CmdName)
    {}

    public GetVehicleTrajectoryFixResult(CommandBase relatedCommand, string type, double lat, double lon, double alt, double yaw, double pitch, double roll)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------
  /// Type  string Trajectory type ("Fix")
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  ///

  public class SetVehicleTrajectoryFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle static position and orientation"; }
    }

    internal const string CmdName = "SetVehicleTrajectoryFixEcef";

    public SetVehicleTrajectoryFixEcef()
      : base(CmdName)
    {}

    public SetVehicleTrajectoryFixEcef(string type, double x, double y, double z, double yaw, double pitch, double roll)
      : base(CmdName)
    {
      Type = type;
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get vehicle static position and orientation
  ///
  /// 
  ///

  public class GetVehicleTrajectoryFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Get vehicle static position and orientation"; }
    }

    internal const string CmdName = "GetVehicleTrajectoryFixEcef";

    public GetVehicleTrajectoryFixEcef()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleTrajectoryFixEcef.
  ///
  /// Name  Type   Description
  /// ----- ------ -----------------------
  /// Type  string Trajectory type ("Fix")
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  ///

  public class GetVehicleTrajectoryFixEcefResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleTrajectoryFixEcef."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryFixEcefResult";

    public GetVehicleTrajectoryFixEcefResult()
      : base(CmdName)
    {}

    public GetVehicleTrajectoryFixEcefResult(CommandBase relatedCommand, string type, double x, double y, double z, double yaw, double pitch, double roll)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set vehicle circular trajectory
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Type        string          Trajectory type ("Circular")
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class SetVehicleTrajectoryCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Set vehicle circular trajectory"; }
    }

    internal const string CmdName = "SetVehicleTrajectoryCircular";

    public SetVehicleTrajectoryCircular()
      : base(CmdName)
    {}

    public SetVehicleTrajectoryCircular(string type, double lat, double lon, double alt, double radius, double speed, bool clockwise, double? originAngle = null)
      : base(CmdName)
    {
      Type = type;
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get vehicle circular trajectory
  ///
  /// 
  ///

  public class GetVehicleTrajectoryCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Get vehicle circular trajectory"; }
    }

    internal const string CmdName = "GetVehicleTrajectoryCircular";

    public GetVehicleTrajectoryCircular()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleTrajectoryCircular.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Type        string          Trajectory type ("Circular")
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class GetVehicleTrajectoryCircularResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleTrajectoryCircular."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryCircularResult";

    public GetVehicleTrajectoryCircularResult()
      : base(CmdName)
    {}

    public GetVehicleTrajectoryCircularResult(CommandBase relatedCommand, string type, double lat, double lon, double alt, double radius, double speed, bool clockwise, double? originAngle = null)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set earth-orbiting spacecraft trajectory.
  ///
  /// Name              Type     Description
  /// ----------------- -------- ---------------------------------------------------------------------
  /// Type              string   Trajectory type ("Orbit")
  /// Reference         datetime Orbital parameters reference time (UTC)
  /// SemiMajorAxis     double   Semi-major axis (meter)
  /// Inclination       double   Inclination angle (rad)
  /// RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
  /// Eccentricity      double   Eccentricity
  /// MeanAnomaly       double   Mean anomaly (rad)
  /// ArgumentOfPerigee double   Argument of perigee (rad)
  ///

  public class SetVehicleTrajectoryOrbit : CommandBase
  {
    public override string Documentation
    {
      get { return "Set earth-orbiting spacecraft trajectory."; }
    }

    internal const string CmdName = "SetVehicleTrajectoryOrbit";

    public SetVehicleTrajectoryOrbit()
      : base(CmdName)
    {}

    public SetVehicleTrajectoryOrbit(string type, DateTime reference, double semiMajorAxis, double inclination, double rightAscension, double eccentricity, double meanAnomaly, double argumentOfPerigee)
      : base(CmdName)
    {
      Type = type;
      Reference = reference;
      SemiMajorAxis = semiMajorAxis;
      Inclination = inclination;
      RightAscension = rightAscension;
      Eccentricity = eccentricity;
      MeanAnomaly = meanAnomaly;
      ArgumentOfPerigee = argumentOfPerigee;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Reference")
        && Contains("SemiMajorAxis")
        && Contains("Inclination")
        && Contains("RightAscension")
        && Contains("Eccentricity")
        && Contains("MeanAnomaly")
        && Contains("ArgumentOfPerigee")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Reference
    {
      get { return GetValue("Reference").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Reference", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SemiMajorAxis
    {
      get { return GetValue("SemiMajorAxis").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SemiMajorAxis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Inclination
    {
      get { return GetValue("Inclination").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Inclination", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double RightAscension
    {
      get { return GetValue("RightAscension").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("RightAscension", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Eccentricity
    {
      get { return GetValue("Eccentricity").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Eccentricity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double MeanAnomaly
    {
      get { return GetValue("MeanAnomaly").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("MeanAnomaly", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double ArgumentOfPerigee
    {
      get { return GetValue("ArgumentOfPerigee").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("ArgumentOfPerigee", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get earth-orbiting spacecraft trajectory.
  ///
  /// 
  ///

  public class GetVehicleTrajectoryOrbit : CommandBase
  {
    public override string Documentation
    {
      get { return "Get earth-orbiting spacecraft trajectory."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryOrbit";

    public GetVehicleTrajectoryOrbit()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetVehicleTrajectoryOrbit.
  ///
  /// Name              Type     Description
  /// ----------------- -------- ---------------------------------------------------------------------
  /// Type              string   Trajectory type ("Orbit")
  /// Reference         datetime Orbital parameters reference time (UTC)
  /// SemiMajorAxis     double   Semi-major axis (meter)
  /// Inclination       double   Inclination angle (rad)
  /// RightAscension    double   Geographic longitude of the ascending node of the orbital plane (rad)
  /// Eccentricity      double   Eccentricity
  /// MeanAnomaly       double   Mean anomaly (rad)
  /// ArgumentOfPerigee double   Argument of perigee (rad)
  ///

  public class GetVehicleTrajectoryOrbitResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVehicleTrajectoryOrbit."; }
    }

    internal const string CmdName = "GetVehicleTrajectoryOrbitResult";

    public GetVehicleTrajectoryOrbitResult()
      : base(CmdName)
    {}

    public GetVehicleTrajectoryOrbitResult(CommandBase relatedCommand, string type, DateTime reference, double semiMajorAxis, double inclination, double rightAscension, double eccentricity, double meanAnomaly, double argumentOfPerigee)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      Reference = reference;
      SemiMajorAxis = semiMajorAxis;
      Inclination = inclination;
      RightAscension = rightAscension;
      Eccentricity = eccentricity;
      MeanAnomaly = meanAnomaly;
      ArgumentOfPerigee = argumentOfPerigee;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Reference")
        && Contains("SemiMajorAxis")
        && Contains("Inclination")
        && Contains("RightAscension")
        && Contains("Eccentricity")
        && Contains("MeanAnomaly")
        && Contains("ArgumentOfPerigee")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Reference
    {
      get { return GetValue("Reference").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Reference", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SemiMajorAxis
    {
      get { return GetValue("SemiMajorAxis").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SemiMajorAxis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Inclination
    {
      get { return GetValue("Inclination").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Inclination", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double RightAscension
    {
      get { return GetValue("RightAscension").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("RightAscension", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Eccentricity
    {
      get { return GetValue("Eccentricity").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Eccentricity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double MeanAnomaly
    {
      get { return GetValue("MeanAnomaly").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("MeanAnomaly", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double ArgumentOfPerigee
    {
      get { return GetValue("ArgumentOfPerigee").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("ArgumentOfPerigee", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Hardware in the loop trajectory server port.
  ///
  /// 
  ///

  public class GetHilPort : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Hardware in the loop trajectory server port."; }
    }

    internal const string CmdName = "GetHilPort";

    public GetHilPort()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetHilPort.
  ///
  /// Name Type Description
  /// ---- ---- ---------------
  /// Port int  Hil Server Port
  ///

  public class HilPortResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetHilPort."; }
    }

    internal const string CmdName = "HilPortResult";

    public HilPortResult()
      : base(CmdName)
    {}

    public HilPortResult(CommandBase relatedCommand, int port)
      : base(CmdName, relatedCommand)
    {
      Port = port;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Port")
      ;
      }
    }

    public int Port
    {
      get { return GetValue("Port").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// HIL extrapolation state.
  ///
  
  public enum HilExtrapolationState { Deterministic, NonDeterministic, Snap }


  ///
  /// Get last Hardware in the loop extrapolation state. The states are defined as
  /// the following increasing priority levels: Deterministic, NonDeterministic and Snap.
  /// The state will stay on the highest level until polled. Polling the extrapolation state will reset it.
  /// Returns GetHilExtrapolationStateResult.
  ///
  /// 
  ///

  public class GetHilExtrapolationState : CommandBase
  {
    public override string Documentation
    {
      get { return "Get last Hardware in the loop extrapolation state. The states are defined as\nthe following increasing priority levels: Deterministic, NonDeterministic and Snap.\nThe state will stay on the highest level until polled. Polling the extrapolation state will reset it.\nReturns GetHilExtrapolationStateResult."; }
    }

    internal const string CmdName = "GetHilExtrapolationState";

    public GetHilExtrapolationState()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetHilExtrapolationState.
  ///
  /// Name        Type                  Description
  /// ----------- --------------------- ---------------------------------------------------------
  /// State       HilExtrapolationState HIL Extrapolation State.
  /// ElapsedTime int                   Time in milliseconds of the returned extrapolation state.
  ///

  public class GetHilExtrapolationStateResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetHilExtrapolationState."; }
    }

    internal const string CmdName = "GetHilExtrapolationStateResult";

    public GetHilExtrapolationStateResult()
      : base(CmdName)
    {}

    public GetHilExtrapolationStateResult(CommandBase relatedCommand, HilExtrapolationState state, int elapsedTime)
      : base(CmdName, relatedCommand)
    {
      State = state;
      ElapsedTime = elapsedTime;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("State")
        && Contains("ElapsedTime")
      ;
      }
    }

    public HilExtrapolationState State
    {
      get { return GetValue("State").ToObject<HilExtrapolationState>(CommandBase.Serializer); }
      set
      {
          SetValue("State", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int ElapsedTime
    {
      get { return GetValue("ElapsedTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("ElapsedTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetEphemerisReferenceTime is deprecated since 21.3. You may use SetEphemerisReferenceTimeForSV.
  /// 
  /// Set the ephemeris reference time for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetEphemerisReferenceTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetEphemerisReferenceTime is deprecated since 21.3. You may use SetEphemerisReferenceTimeForSV.\n\nSet the ephemeris reference time for the specified constellation."; }
    }

    internal const string CmdName = "SetEphemerisReferenceTime";

    public SetEphemerisReferenceTime()
      : base(CmdName)
    {}

    public SetEphemerisReferenceTime(string system, int svId, DateTime time, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Time = time;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Time")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Time
    {
      get { return GetValue("Time").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the ephemeris reference time for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetEphemerisReferenceTimeForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the ephemeris reference time for the specified constellation."; }
    }

    internal const string CmdName = "SetEphemerisReferenceTimeForSV";

    public SetEphemerisReferenceTimeForSV()
      : base(CmdName)
    {}

    public SetEphemerisReferenceTimeForSV(string system, int svId, DateTime time, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Time = time;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Time")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public DateTime Time
    {
      get { return GetValue("Time").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetEphemerisReferenceTime is deprecated since 21.3. You may use GetEphemerisReferenceTimeForSV.
  /// 
  /// Get the ephemeris reference time for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetEphemerisReferenceTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetEphemerisReferenceTime is deprecated since 21.3. You may use GetEphemerisReferenceTimeForSV.\n\nGet the ephemeris reference time for the specified constellation."; }
    }

    internal const string CmdName = "GetEphemerisReferenceTime";

    public GetEphemerisReferenceTime()
      : base(CmdName)
    {}

    public GetEphemerisReferenceTime(string system, int svId, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the ephemeris reference time for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetEphemerisReferenceTimeForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the ephemeris reference time for the specified constellation."; }
    }

    internal const string CmdName = "GetEphemerisReferenceTimeForSV";

    public GetEphemerisReferenceTimeForSV()
      : base(CmdName)
    {}

    public GetEphemerisReferenceTimeForSV(string system, int svId, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetEphemerisReferenceTimeForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetEphemerisReferenceTimeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetEphemerisReferenceTimeForSV."; }
    }
  
    internal const string CmdName = "GetEphemerisReferenceTimeResult";

    public GetEphemerisReferenceTimeResult()
      : base(CmdName)
    {}

    public GetEphemerisReferenceTimeResult(CommandBase relatedCommand, string system, int svId, DateTime time, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Time = time;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Time")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("System", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public DateTime Time
    {
      get { return GetValue("Time").ToObject<DateTime>(CommandBase.Serializer); }
      set { SetValue("Time", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Time        datetime        GPS date and time (it is the GPS time expressed in UTC format)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetEphemerisReferenceTimeForSVResult : GetEphemerisReferenceTimeResult
  {
    internal new const string CmdName = "GetEphemerisReferenceTimeForSVResult";

    public GetEphemerisReferenceTimeForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetEphemerisReferenceTimeForSVResult(CommandBase relatedCommand, string system, int svId, DateTime time, string dataSetName = null)
      : base(relatedCommand, system, svId, time, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set various parameters in the GPS ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///   "IscL1Ca"         sec
  ///   "IscL2C"          sec
  ///   "IscL5I5"         sec
  ///   "IscL5Q5"         sec
  ///   "IscL1CP"         sec
  ///   "IscL1CD"         sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters in the GPS ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec\n  \"IscL1Ca\"         sec\n  \"IscL2C\"          sec\n  \"IscL5I5\"         sec\n  \"IscL5Q5\"         sec\n  \"IscL1CP\"         sec\n  \"IscL1CD\"         sec"; }
    }

    internal const string CmdName = "SetGpsEphDoubleParamForSV";

    public SetGpsEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetGpsEphDoubleParamForSV(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters in the GPS ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///   "IscL1Ca"         sec
  ///   "IscL2C"          sec
  ///   "IscL5I5"         sec
  ///   "IscL5Q5"         sec
  ///   "IscL1CP"         sec
  ///   "IscL1CD"         sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters in the GPS ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec\n  \"IscL1Ca\"         sec\n  \"IscL2C\"          sec\n  \"IscL5I5\"         sec\n  \"IscL5Q5\"         sec\n  \"IscL1CP\"         sec\n  \"IscL1CD\"         sec"; }
    }

    internal const string CmdName = "GetGpsEphDoubleParamForSV";

    public GetGpsEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetGpsEphDoubleParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsEphDoubleParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites.
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphDoubleParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsEphDoubleParamForSV."; }
    }

    internal const string CmdName = "GetGpsEphDoubleParamForSVResult";

    public GetGpsEphDoubleParamForSVResult()
      : base(CmdName)
    {}

    public GetGpsEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various parameters in the Galileo ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///   "BgdE1E5a"        ns
  ///   "BgdE1E5b"        ns
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters in the Galileo ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec\n  \"BgdE1E5a\"        ns\n  \"BgdE1E5b\"        ns"; }
    }

    internal const string CmdName = "SetGalileoEphDoubleParamForSV";

    public SetGalileoEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetGalileoEphDoubleParamForSV(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters in the Galileo ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///   "BgdE1E5a"        ns
  ///   "BgdE1E5b"        ns
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters in the Galileo ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec\n  \"BgdE1E5a\"        ns\n  \"BgdE1E5b\"        ns"; }
    }

    internal const string CmdName = "GetGalileoEphDoubleParamForSV";

    public GetGalileoEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetGalileoEphDoubleParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGalileoEphDoubleParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..36, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphDoubleParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGalileoEphDoubleParamForSV."; }
    }

    internal const string CmdName = "GetGalileoEphDoubleParamForSVResult";

    public GetGalileoEphDoubleParamForSVResult()
      : base(CmdName)
    {}

    public GetGalileoEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various parameters in the BeiDou ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd1"            sec
  ///   "Tgd2"            sec
  ///   "TgdB1Cp"         sec
  ///   "TgdB2Ap"         sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters in the BeiDou ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd1\"            sec\n  \"Tgd2\"            sec\n  \"TgdB1Cp\"         sec\n  \"TgdB2Ap\"         sec"; }
    }

    internal const string CmdName = "SetBeiDouEphDoubleParamForSV";

    public SetBeiDouEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetBeiDouEphDoubleParamForSV(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters in the BeiDou ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd1"            sec
  ///   "Tgd2"            sec
  ///   "TgdB1Cp"         sec
  ///   "TgdB2Ap"         sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters in the BeiDou ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd1\"            sec\n  \"Tgd2\"            sec\n  \"TgdB1Cp\"         sec\n  \"TgdB2Ap\"         sec"; }
    }

    internal const string CmdName = "GetBeiDouEphDoubleParamForSV";

    public GetBeiDouEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetBeiDouEphDoubleParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouEphDoubleParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphDoubleParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouEphDoubleParamForSV."; }
    }

    internal const string CmdName = "GetBeiDouEphDoubleParamForSVResult";

    public GetBeiDouEphDoubleParamForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various parameters for GLONASS
  /// 
  ///   ParamName       Unit               Range          Description
  ///   "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
  ///   "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
  ///   "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
  ///   "TLambda"       sec                0..44100       Time of the first ascending node passage
  ///   "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
  ///   "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
  ///   "Omega"         semicircle         +/- 1          Argument of perigee
  ///   "Eccentricity"  -                  0..0.03        Eccentricity
  ///   "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
  ///   "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period
  ///
  /// Name      Type   Description
  /// --------- ------ --------------------------------------------------------------------
  /// SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
  /// ParamName string Parameter name (see table above for accepted names)
  /// Val       double Parameter value (see table above for unit)
  ///

  public class SetGlonassEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters for GLONASS\n\n  ParamName       Unit               Range          Description\n  \"TauC\"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time\n  \"TauGps\"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time\n  \"TauN\"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time\n  \"TLambda\"       sec                0..44100       Time of the first ascending node passage\n  \"Lambda\"        semicircle         +/- 1          Longitude of the first ascending node\n  \"DeltaI\"        semicircle         +/- 0.067      Correction to the mean value of inclination\n  \"Omega\"         semicircle         +/- 1          Argument of perigee\n  \"Eccentricity\"  -                  0..0.03        Eccentricity\n  \"DeltaT\"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period\n  \"DeltaTRate\"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period"; }
    }

    internal const string CmdName = "SetGlonassEphDoubleParamForSV";

    public SetGlonassEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetGlonassEphDoubleParamForSV(int svId, string paramName, double val)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters for GLONASS
  /// 
  ///   ParamName       Unit               Range          Description
  ///   "TauC"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time
  ///   "TauGps"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time
  ///   "TauN"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time
  ///   "TLambda"       sec                0..44100       Time of the first ascending node passage
  ///   "Lambda"        semicircle         +/- 1          Longitude of the first ascending node
  ///   "DeltaI"        semicircle         +/- 0.067      Correction to the mean value of inclination
  ///   "Omega"         semicircle         +/- 1          Argument of perigee
  ///   "Eccentricity"  -                  0..0.03        Eccentricity
  ///   "DeltaT"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period
  ///   "DeltaTRate"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period
  ///
  /// Name      Type   Description
  /// --------- ------ --------------------------------------------------------------------
  /// SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
  /// ParamName string Parameter name (see table above for accepted names)
  ///

  public class GetGlonassEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters for GLONASS\n\n  ParamName       Unit               Range          Description\n  \"TauC\"          sec                +/- 1          GLONASS time scale correction to UTC(SU) time\n  \"TauGps\"        day                +/- 1.9x10^-3  Correction to GPS time relative to GLONASS time\n  \"TauN\"          sec                +/- 1.9x10^-3  Coarse value of satellite time correction to GLONASS time\n  \"TLambda\"       sec                0..44100       Time of the first ascending node passage\n  \"Lambda\"        semicircle         +/- 1          Longitude of the first ascending node\n  \"DeltaI\"        semicircle         +/- 0.067      Correction to the mean value of inclination\n  \"Omega\"         semicircle         +/- 1          Argument of perigee\n  \"Eccentricity\"  -                  0..0.03        Eccentricity\n  \"DeltaT\"        sec/orb. period    +/- 3.6x10^3   Correction to the mean value of Draconian period\n  \"DeltaTRate\"    sec/orb. period^2  +/- 2^-8       Rate of change of Draconian period"; }
    }

    internal const string CmdName = "GetGlonassEphDoubleParamForSV";

    public GetGlonassEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetGlonassEphDoubleParamForSV(int svId, string paramName)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGlonassEphDoubleParamForSV.
  ///
  /// Name      Type   Description
  /// --------- ------ --------------------------------------------------------------------
  /// SvId      int    Satellite SV ID 1..24, or use 0 to apply new value to all satellites
  /// ParamName string Parameter name (see table above for accepted names)
  /// Val       double Parameter value (see table above for unit)
  ///

  public class GetGlonassEphDoubleParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlonassEphDoubleParamForSV."; }
    }

    internal const string CmdName = "GetGlonassEphDoubleParamForSVResult";

    public GetGlonassEphDoubleParamForSVResult()
      : base(CmdName)
    {}

    public GetGlonassEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetQzssEphemerisDoubleParam is deprecated since 21.3. You may use SetQzssEphDoubleParamForSV.
  /// 
  /// Set various parameters in the QZSS ephemeris.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// Val         double          Parameter value (see ParamName above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphemerisDoubleParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssEphemerisDoubleParam is deprecated since 21.3. You may use SetQzssEphDoubleParamForSV.\n\nSet various parameters in the QZSS ephemeris."; }
    }

    internal const string CmdName = "SetQzssEphemerisDoubleParam";

    public SetQzssEphemerisDoubleParam()
      : base(CmdName)
    {}

    public SetQzssEphemerisDoubleParam(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various parameters in the QZSS ephemeris.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// Val         double          Parameter value (see ParamName above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters in the QZSS ephemeris."; }
    }

    internal const string CmdName = "SetQzssEphDoubleParamForSV";

    public SetQzssEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetQzssEphDoubleParamForSV(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssEphemerisDoubleParam is deprecated since 21.3. You may use GetQzssEphDoubleParamForSV.
  /// 
  /// Get various parameters in the QZSS ephemeris.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisDoubleParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssEphemerisDoubleParam is deprecated since 21.3. You may use GetQzssEphDoubleParamForSV.\n\nGet various parameters in the QZSS ephemeris."; }
    }

    internal const string CmdName = "GetQzssEphemerisDoubleParam";

    public GetQzssEphemerisDoubleParam()
      : base(CmdName)
    {}

    public GetQzssEphemerisDoubleParam(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters in the QZSS ephemeris.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters in the QZSS ephemeris."; }
    }

    internal const string CmdName = "GetQzssEphDoubleParamForSV";

    public GetQzssEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetQzssEphDoubleParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssEphDoubleParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// Val         double          Parameter value (see ParamName above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisDoubleParamResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssEphDoubleParamForSV."; }
    }
  
    internal const string CmdName = "GetQzssEphemerisDoubleParamResult";

    public GetQzssEphemerisDoubleParamResult()
      : base(CmdName)
    {}

    public GetQzssEphemerisDoubleParamResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite's SV ID 1..10 (use 0 to apply to all satellites)
  /// ParamName   string          In meters:  "Crs", "Crc"
  ///                             In radians: "Cis", "Cic", "Cus", "Cuc"
  ///                             In seconds: "Tgd", "IscL1Ca", "IscL2C", "IscL5I5", "IscL5Q5", "IscL1CP", "IscL1CD"
  /// Val         double          Parameter value (see ParamName above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphDoubleParamForSVResult : GetQzssEphemerisDoubleParamResult
  {
    internal new const string CmdName = "GetQzssEphDoubleParamForSVResult";

    public GetQzssEphDoubleParamForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(relatedCommand, svId, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetNavICEphemerisDoubleParam is deprecated since 21.3. You may use SetNavICEphDoubleParamForSV.
  /// 
  /// Set various parameters in the NavIC ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICEphemerisDoubleParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetNavICEphemerisDoubleParam is deprecated since 21.3. You may use SetNavICEphDoubleParamForSV.\n\nSet various parameters in the NavIC ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec"; }
    }

    internal const string CmdName = "SetNavICEphemerisDoubleParam";

    public SetNavICEphemerisDoubleParam()
      : base(CmdName)
    {}

    public SetNavICEphemerisDoubleParam(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various parameters in the NavIC ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various parameters in the NavIC ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec"; }
    }

    internal const string CmdName = "SetNavICEphDoubleParamForSV";

    public SetNavICEphDoubleParamForSV()
      : base(CmdName)
    {}

    public SetNavICEphDoubleParamForSV(int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetNavICEphemerisDoubleParam is deprecated since 21.3. You may use GetNavICEphDoubleParamForSV.
  /// 
  /// Get various parameters in the NavIC ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphemerisDoubleParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetNavICEphemerisDoubleParam is deprecated since 21.3. You may use GetNavICEphDoubleParamForSV.\n\nGet various parameters in the NavIC ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec"; }
    }

    internal const string CmdName = "GetNavICEphemerisDoubleParam";

    public GetNavICEphemerisDoubleParam()
      : base(CmdName)
    {}

    public GetNavICEphemerisDoubleParam(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various parameters in the NavIC ephemeris
  /// 
  ///   ParamName         Unit
  ///   "ClockBias"       sec
  ///   "ClockDrift"      sec/sec
  ///   "ClockDriftRate"  sec/sec^2
  ///   "Crs"             meter
  ///   "Crc"             meter
  ///   "Cis"             rad
  ///   "Cic"             rad
  ///   "Cus"             rad
  ///   "Cuc"             rad
  ///   "DeltaN"          rad/sec
  ///   "M0"              rad
  ///   "Eccentricity"    -
  ///   "SqrtA"           sqrt(meter)
  ///   "BigOmega"        rad
  ///   "I0"              rad
  ///   "LittleOmega"     rad
  ///   "BigOmegaDot"     rad/sec
  ///   "Idot"            rad/sec
  ///   "Accuracy"        meter
  ///   "Adot"            meters/sec
  ///   "DeltaN0dot"      rad/sec^2
  ///   "Tgd"             sec
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphDoubleParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various parameters in the NavIC ephemeris\n\n  ParamName         Unit\n  \"ClockBias\"       sec\n  \"ClockDrift\"      sec/sec\n  \"ClockDriftRate\"  sec/sec^2\n  \"Crs\"             meter\n  \"Crc\"             meter\n  \"Cis\"             rad\n  \"Cic\"             rad\n  \"Cus\"             rad\n  \"Cuc\"             rad\n  \"DeltaN\"          rad/sec\n  \"M0\"              rad\n  \"Eccentricity\"    -\n  \"SqrtA\"           sqrt(meter)\n  \"BigOmega\"        rad\n  \"I0\"              rad\n  \"LittleOmega\"     rad\n  \"BigOmegaDot\"     rad/sec\n  \"Idot\"            rad/sec\n  \"Accuracy\"        meter\n  \"Adot\"            meters/sec\n  \"DeltaN0dot\"      rad/sec^2\n  \"Tgd\"             sec"; }
    }

    internal const string CmdName = "GetNavICEphDoubleParamForSV";

    public GetNavICEphDoubleParamForSV()
      : base(CmdName)
    {}

    public GetNavICEphDoubleParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetNavICEphDoubleParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphemerisDoubleParamResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetNavICEphDoubleParamForSV."; }
    }
  
    internal const string CmdName = "GetNavICEphemerisDoubleParamResult";

    public GetNavICEphemerisDoubleParamResult()
      : base(CmdName)
    {}

    public GetNavICEphemerisDoubleParamResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public double Val
    {
      get { return GetValue("Val").ToObject<double>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..14, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         double          Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphDoubleParamForSVResult : GetNavICEphemerisDoubleParamResult
  {
    internal new const string CmdName = "GetNavICEphDoubleParamForSVResult";

    public GetNavICEphDoubleParamForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetNavICEphDoubleParamForSVResult(CommandBase relatedCommand, int svId, string paramName, double val, string dataSetName = null)
      : base(relatedCommand, svId, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetGpsEphemerisDoubleParams is deprecated since 21.3. You may use SetGpsEphDoubleParamForEachSV.
  /// 
  /// Set GPS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetGpsEphemerisDoubleParams is deprecated since 21.3. You may use SetGpsEphDoubleParamForEachSV.\n\nSet GPS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGpsEphemerisDoubleParams";

    public SetGpsEphemerisDoubleParams()
      : base(CmdName)
    {}

    public SetGpsEphemerisDoubleParams(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGpsEphDoubleParamForEachSV";

    public SetGpsEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetGpsEphDoubleParamForEachSV(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetGpsEphemerisDoubleParams is deprecated since 21.3. You may use GetGpsEphDoubleParamForEachSV.
  /// 
  /// Get GPS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetGpsEphemerisDoubleParams is deprecated since 21.3. You may use GetGpsEphDoubleParamForEachSV.\n\nGet GPS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGpsEphemerisDoubleParams";

    public GetGpsEphemerisDoubleParams()
      : base(CmdName)
    {}

    public GetGpsEphemerisDoubleParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGpsEphDoubleParamForEachSV";

    public GetGpsEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetGpsEphDoubleParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsEphDoubleParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphemerisDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetGpsEphemerisDoubleParamsResult";

    public GetGpsEphemerisDoubleParamsResult()
      : base(CmdName)
    {}

    public GetGpsEphemerisDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphDoubleParamForEachSVResult : GetGpsEphemerisDoubleParamsResult
  {
    internal new const string CmdName = "GetGpsEphDoubleParamForEachSVResult";

    public GetGpsEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGpsEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use SetGalileoEphDoubleParamForEachSV.
  /// 
  /// Set Galileo ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use SetGalileoEphDoubleParamForEachSV.\n\nSet Galileo ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGalileoEphemerisDoubleParams";

    public SetGalileoEphemerisDoubleParams()
      : base(CmdName)
    {}

    public SetGalileoEphemerisDoubleParams(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Galileo ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Galileo ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGalileoEphDoubleParamForEachSV";

    public SetGalileoEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetGalileoEphDoubleParamForEachSV(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use GetGalileoEphDoubleParamForEachSV.
  /// 
  /// Get Galileo ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetGalileoEphemerisDoubleParams is deprecated since 21.3. You may use GetGalileoEphDoubleParamForEachSV.\n\nGet Galileo ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGalileoEphemerisDoubleParams";

    public GetGalileoEphemerisDoubleParams()
      : base(CmdName)
    {}

    public GetGalileoEphemerisDoubleParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Galileo ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Galileo ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGalileoEphDoubleParamForEachSV";

    public GetGalileoEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetGalileoEphDoubleParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGalileoEphDoubleParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphemerisDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGalileoEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetGalileoEphemerisDoubleParamsResult";

    public GetGalileoEphemerisDoubleParamsResult()
      : base(CmdName)
    {}

    public GetGalileoEphemerisDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGalileoEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGalileoEphDoubleParamForEachSVResult : GetGalileoEphemerisDoubleParamsResult
  {
    internal new const string CmdName = "GetGalileoEphDoubleParamForEachSVResult";

    public GetGalileoEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGalileoEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use SetBeiDouEphDoubleParamForEachSV.
  /// 
  /// Set BeiDou ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use SetBeiDouEphDoubleParamForEachSV.\n\nSet BeiDou ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetBeiDouEphemerisDoubleParams";

    public SetBeiDouEphemerisDoubleParams()
      : base(CmdName)
    {}

    public SetBeiDouEphemerisDoubleParams(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetBeiDouEphDoubleParamForEachSV";

    public SetBeiDouEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetBeiDouEphDoubleParamForEachSV(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use GetBeiDouEphDoubleParamForEachSV.
  /// 
  /// Get BeiDou ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetBeiDouEphemerisDoubleParams is deprecated since 21.3. You may use GetBeiDouEphDoubleParamForEachSV.\n\nGet BeiDou ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetBeiDouEphemerisDoubleParams";

    public GetBeiDouEphemerisDoubleParams()
      : base(CmdName)
    {}

    public GetBeiDouEphemerisDoubleParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetBeiDouEphDoubleParamForEachSV";

    public GetBeiDouEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetBeiDouEphDoubleParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouEphDoubleParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphemerisDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetBeiDouEphemerisDoubleParamsResult";

    public GetBeiDouEphemerisDoubleParamsResult()
      : base(CmdName)
    {}

    public GetBeiDouEphemerisDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphDoubleParamForEachSVResult : GetBeiDouEphemerisDoubleParamsResult
  {
    internal new const string CmdName = "GetBeiDouEphDoubleParamForEachSVResult";

    public GetBeiDouEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetBeiDouEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetGlonassDoubleParams is deprecated since 21.3. You may use SetGlonassEphDoubleParamForEachSV.
  /// 
  /// Set GLONASS parameter value for all satellites
  ///
  /// Name      Type         Description
  /// --------- ------------ --------------------------------------------------------------------------------------------------
  /// ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
  /// Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class SetGlonassDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetGlonassDoubleParams is deprecated since 21.3. You may use SetGlonassEphDoubleParamForEachSV.\n\nSet GLONASS parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGlonassDoubleParams";

    public SetGlonassDoubleParams()
      : base(CmdName)
    {}

    public SetGlonassDoubleParams(string paramName, List<double> val)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GLONASS parameter value for all satellites
  ///
  /// Name      Type         Description
  /// --------- ------------ --------------------------------------------------------------------------------------------------
  /// ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
  /// Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class SetGlonassEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GLONASS parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGlonassEphDoubleParamForEachSV";

    public SetGlonassEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetGlonassEphDoubleParamForEachSV(string paramName, List<double> val)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetGlonassDoubleParams is deprecated since 21.3. You may use GetGlonassEphDoubleParamForEachSV.
  /// 
  /// Get GLONASS parameter value for all satellites
  ///
  /// Name      Type   Description
  /// --------- ------ ---------------------------------------------------------
  /// ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names
  ///

  public class GetGlonassDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetGlonassDoubleParams is deprecated since 21.3. You may use GetGlonassEphDoubleParamForEachSV.\n\nGet GLONASS parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGlonassDoubleParams";

    public GetGlonassDoubleParams()
      : base(CmdName)
    {}

    public GetGlonassDoubleParams(string paramName)
      : base(CmdName)
    {
      ParamName = paramName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GLONASS parameter value for all satellites
  ///
  /// Name      Type   Description
  /// --------- ------ ---------------------------------------------------------
  /// ParamName string Refer to SetGlonassEphDoubleParamForSV for accepted names
  ///

  public class GetGlonassEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GLONASS parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGlonassEphDoubleParamForEachSV";

    public GetGlonassEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetGlonassEphDoubleParamForEachSV(string paramName)
      : base(CmdName)
    {
      ParamName = paramName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGlonassEphDoubleParamForEachSV.
  ///
  /// Name      Type         Description
  /// --------- ------------ --------------------------------------------------------------------------------------------------
  /// ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
  /// Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class GetGlonassDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlonassEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetGlonassDoubleParamsResult";

    public GetGlonassDoubleParamsResult()
      : base(CmdName)
    {}

    public GetGlonassDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name      Type         Description
  /// --------- ------------ --------------------------------------------------------------------------------------------------
  /// ParamName string       Refer to SetGlonassEphDoubleParamForSV for accepted names
  /// Val       array double Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class GetGlonassEphDoubleParamForEachSVResult : GetGlonassDoubleParamsResult
  {
    internal new const string CmdName = "GetGlonassEphDoubleParamForEachSVResult";

    public GetGlonassEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGlonassEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val)
      : base(relatedCommand, paramName, val)
    {
      Name = CmdName;
    }
  }


  ///
  /// Get GLONASS frequency number for all satellites. Return values range from -7 to 13. Value -8 is an invalid value, it indicates that the almanac for the satellite is invalid.
  ///
  /// 
  ///

  public class GetGlonassFrequencyNumberForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GLONASS frequency number for all satellites. Return values range from -7 to 13. Value -8 is an invalid value, it indicates that the almanac for the satellite is invalid."; }
    }

    internal const string CmdName = "GetGlonassFrequencyNumberForEachSV";

    public GetGlonassFrequencyNumberForEachSV()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetGlonassFrequencyNumberForEachSV
  ///
  /// Name            Type      Description
  /// --------------- --------- --------------------------------------------------------------------------------------------------
  /// FrequencyNumber array int Frequency number of each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///

  public class GetGlonassFrequencyNumberForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGlonassFrequencyNumberForEachSV"; }
    }

    internal const string CmdName = "GetGlonassFrequencyNumberForEachSVResult";

    public GetGlonassFrequencyNumberForEachSVResult()
      : base(CmdName)
    {}

    public GetGlonassFrequencyNumberForEachSVResult(CommandBase relatedCommand, List<int> frequencyNumber)
      : base(CmdName, relatedCommand)
    {
      FrequencyNumber = frequencyNumber;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("FrequencyNumber")
      ;
      }
    }

    public List<int> FrequencyNumber
    {
      get { return GetValue("FrequencyNumber").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("FrequencyNumber", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetQzssEphemerisDoubleParams is deprecated since 21.3. You may use SetQzssEphDoubleParamForEachSV.
  /// 
  /// Set QZSS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssEphemerisDoubleParams is deprecated since 21.3. You may use SetQzssEphDoubleParamForEachSV.\n\nSet QZSS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetQzssEphemerisDoubleParams";

    public SetQzssEphemerisDoubleParams()
      : base(CmdName)
    {}

    public SetQzssEphemerisDoubleParams(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetQzssEphDoubleParamForEachSV";

    public SetQzssEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetQzssEphDoubleParamForEachSV(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssEphemerisDoubleParams is deprecated since 21.3. You may use GetQzssEphDoubleParamForEachSV.
  /// 
  /// Get QZSS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssEphemerisDoubleParams is deprecated since 21.3. You may use GetQzssEphDoubleParamForEachSV.\n\nGet QZSS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetQzssEphemerisDoubleParams";

    public GetQzssEphemerisDoubleParams()
      : base(CmdName)
    {}

    public GetQzssEphemerisDoubleParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetQzssEphDoubleParamForEachSV";

    public GetQzssEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetQzssEphDoubleParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssEphDoubleParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetQzssEphemerisDoubleParamsResult";

    public GetQzssEphemerisDoubleParamsResult()
      : base(CmdName)
    {}

    public GetQzssEphemerisDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphDoubleParamForEachSVResult : GetQzssEphemerisDoubleParamsResult
  {
    internal new const string CmdName = "GetQzssEphDoubleParamForEachSVResult";

    public GetQzssEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetNavICEphemerisDoubleParams is deprecated since 21.3. You may use SetNavICEphDoubleParamForEachSV.
  /// 
  /// Set NavIC ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetNavICEphemerisDoubleParams is deprecated since 21.3. You may use SetNavICEphDoubleParamForEachSV.\n\nSet NavIC ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetNavICEphemerisDoubleParams";

    public SetNavICEphemerisDoubleParams()
      : base(CmdName)
    {}

    public SetNavICEphemerisDoubleParams(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set NavIC ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set NavIC ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "SetNavICEphDoubleParamForEachSV";

    public SetNavICEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public SetNavICEphDoubleParamForEachSV(string paramName, List<double> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetNavICEphemerisDoubleParams is deprecated since 21.3. You may use GetNavICEphDoubleParamForEachSV.
  /// 
  /// Get NavIC ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphemerisDoubleParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetNavICEphemerisDoubleParams is deprecated since 21.3. You may use GetNavICEphDoubleParamForEachSV.\n\nGet NavIC ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetNavICEphemerisDoubleParams";

    public GetNavICEphemerisDoubleParams()
      : base(CmdName)
    {}

    public GetNavICEphemerisDoubleParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get NavIC ephemeris parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphDoubleParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get NavIC ephemeris parameter value for all satellites"; }
    }

    internal const string CmdName = "GetNavICEphDoubleParamForEachSV";

    public GetNavICEphDoubleParamForEachSV()
      : base(CmdName)
    {}

    public GetNavICEphDoubleParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetNavICEphDoubleParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphemerisDoubleParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetNavICEphDoubleParamForEachSV."; }
    }
  
    internal const string CmdName = "GetNavICEphemerisDoubleParamsResult";

    public GetNavICEphemerisDoubleParamsResult()
      : base(CmdName)
    {}

    public GetNavICEphemerisDoubleParamsResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Val
    {
      get { return GetValue("Val").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetNavICEphDoubleParamForSV for accepted names
  /// Val         array double    Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetNavICEphDoubleParamForEachSVResult : GetNavICEphemerisDoubleParamsResult
  {
    internal new const string CmdName = "GetNavICEphDoubleParamForEachSVResult";

    public GetNavICEphDoubleParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetNavICEphDoubleParamForEachSVResult(CommandBase relatedCommand, string paramName, List<double> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set various boolean parameters in the GPS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various boolean parameters in the GPS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "SetGpsEphBoolParamForSV";

    public SetGpsEphBoolParamForSV()
      : base(CmdName)
    {}

    public SetGpsEphBoolParamForSV(int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various boolean parameters in the GPS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various boolean parameters in the GPS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "GetGpsEphBoolParamForSV";

    public GetGpsEphBoolParamForSV()
      : base(CmdName)
    {}

    public GetGpsEphBoolParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsEphBoolParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..32, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphBoolParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsEphBoolParamForSV."; }
    }

    internal const string CmdName = "GetGpsEphBoolParamForSVResult";

    public GetGpsEphBoolParamForSVResult()
      : base(CmdName)
    {}

    public GetGpsEphBoolParamForSVResult(CommandBase relatedCommand, int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetGpsEphemerisBoolParams is deprecated since 21.3. You may use SetGpsEphBoolParamForEachSV.
  /// 
  /// Set GPS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetGpsEphemerisBoolParams is deprecated since 21.3. You may use SetGpsEphBoolParamForEachSV.\n\nSet GPS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGpsEphemerisBoolParams";

    public SetGpsEphemerisBoolParams()
      : base(CmdName)
    {}

    public SetGpsEphemerisBoolParams(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GPS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GPS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetGpsEphBoolParamForEachSV";

    public SetGpsEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public SetGpsEphBoolParamForEachSV(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetGpsEphemerisBoolParams is deprecated since 21.3. You may use GetGpsEphBoolParamForEachSV.
  /// 
  /// Get GPS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetGpsEphemerisBoolParams is deprecated since 21.3. You may use GetGpsEphBoolParamForEachSV.\n\nGet GPS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGpsEphemerisBoolParams";

    public GetGpsEphemerisBoolParams()
      : base(CmdName)
    {}

    public GetGpsEphemerisBoolParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GPS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GPS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetGpsEphBoolParamForEachSV";

    public GetGpsEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public GetGpsEphBoolParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGpsEphBoolParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphemerisBoolParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGpsEphBoolParamForEachSV."; }
    }
  
    internal const string CmdName = "GetGpsEphemerisBoolParamsResult";

    public GetGpsEphemerisBoolParamsResult()
      : base(CmdName)
    {}

    public GetGpsEphemerisBoolParamsResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetGpsEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetGpsEphBoolParamForEachSVResult : GetGpsEphemerisBoolParamsResult
  {
    internal new const string CmdName = "GetGpsEphBoolParamForEachSVResult";

    public GetGpsEphBoolParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetGpsEphBoolParamForEachSVResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set various boolean parameters in the BeiDou ephemeris
  /// 
  ///   ParamName
  /// "IscB1CdAvailable"
  /// "IscB2adAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various boolean parameters in the BeiDou ephemeris\n\n  ParamName\n\"IscB1CdAvailable\"\n\"IscB2adAvailable\""; }
    }

    internal const string CmdName = "SetBeiDouEphBoolParamForSV";

    public SetBeiDouEphBoolParamForSV()
      : base(CmdName)
    {}

    public SetBeiDouEphBoolParamForSV(int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various boolean parameters in the BeiDou ephemeris
  /// 
  ///   ParamName
  /// "IscB1CdAvailable"
  /// "IscB2adAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various boolean parameters in the BeiDou ephemeris\n\n  ParamName\n\"IscB1CdAvailable\"\n\"IscB2adAvailable\""; }
    }

    internal const string CmdName = "GetBeiDouEphBoolParamForSV";

    public GetBeiDouEphBoolParamForSV()
      : base(CmdName)
    {}

    public GetBeiDouEphBoolParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouEphBoolParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..35, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphBoolParamForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouEphBoolParamForSV."; }
    }

    internal const string CmdName = "GetBeiDouEphBoolParamForSVResult";

    public GetBeiDouEphBoolParamForSVResult()
      : base(CmdName)
    {}

    public GetBeiDouEphBoolParamForSVResult(CommandBase relatedCommand, int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use SetBeiDouEphBoolParamForEachSV.
  /// 
  /// Set BeiDou ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use SetBeiDouEphBoolParamForEachSV.\n\nSet BeiDou ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetBeiDouEphemerisBoolParams";

    public SetBeiDouEphemerisBoolParams()
      : base(CmdName)
    {}

    public SetBeiDouEphemerisBoolParams(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BeiDou ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BeiDou ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetBeiDouEphBoolParamForEachSV";

    public SetBeiDouEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public SetBeiDouEphBoolParamForEachSV(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use GetBeiDouEphBoolParamForEachSV.
  /// 
  /// Get BeiDou ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetBeiDouEphemerisBoolParams is deprecated since 21.3. You may use GetBeiDouEphBoolParamForEachSV.\n\nGet BeiDou ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetBeiDouEphemerisBoolParams";

    public GetBeiDouEphemerisBoolParams()
      : base(CmdName)
    {}

    public GetBeiDouEphemerisBoolParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BeiDou ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BeiDou ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetBeiDouEphBoolParamForEachSV";

    public GetBeiDouEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public GetBeiDouEphBoolParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetBeiDouEphBoolParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphemerisBoolParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetBeiDouEphBoolParamForEachSV."; }
    }
  
    internal const string CmdName = "GetBeiDouEphemerisBoolParamsResult";

    public GetBeiDouEphemerisBoolParamsResult()
      : base(CmdName)
    {}

    public GetBeiDouEphemerisBoolParamsResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetBeiDouEphBoolParamForSV for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetBeiDouEphBoolParamForEachSVResult : GetBeiDouEphemerisBoolParamsResult
  {
    internal new const string CmdName = "GetBeiDouEphBoolParamForEachSVResult";

    public GetBeiDouEphBoolParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetBeiDouEphBoolParamForEachSVResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssEphemerisBoolParam is deprecated since 21.3. You may use SetQzssEphBoolParamForSV.
  /// 
  /// Set various boolean parameters in the QZSS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphemerisBoolParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssEphemerisBoolParam is deprecated since 21.3. You may use SetQzssEphBoolParamForSV.\n\nSet various boolean parameters in the QZSS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "SetQzssEphemerisBoolParam";

    public SetQzssEphemerisBoolParam()
      : base(CmdName)
    {}

    public SetQzssEphemerisBoolParam(int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set various boolean parameters in the QZSS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set various boolean parameters in the QZSS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "SetQzssEphBoolParamForSV";

    public SetQzssEphBoolParamForSV()
      : base(CmdName)
    {}

    public SetQzssEphBoolParamForSV(int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssEphemerisBoolParam is deprecated since 21.3. You may use GetQzssEphBoolParamForSV.
  /// 
  /// Get various boolean parameters in the QZSS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisBoolParam : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssEphemerisBoolParam is deprecated since 21.3. You may use GetQzssEphBoolParamForSV.\n\nGet various boolean parameters in the QZSS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "GetQzssEphemerisBoolParam";

    public GetQzssEphemerisBoolParam()
      : base(CmdName)
    {}

    public GetQzssEphemerisBoolParam(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get various boolean parameters in the QZSS ephemeris
  /// 
  ///   ParamName
  /// "IscL1CaAvailable"
  /// "IscL2CAvailable"
  /// "IscL5I5Available"
  /// "IscL5Q5Available"
  /// "IscL1CPAvailable"
  /// "IscL1CDAvailable"
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphBoolParamForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get various boolean parameters in the QZSS ephemeris\n\n  ParamName\n\"IscL1CaAvailable\"\n\"IscL2CAvailable\"\n\"IscL5I5Available\"\n\"IscL5Q5Available\"\n\"IscL1CPAvailable\"\n\"IscL1CDAvailable\""; }
    }

    internal const string CmdName = "GetQzssEphBoolParamForSV";

    public GetQzssEphBoolParamForSV()
      : base(CmdName)
    {}

    public GetQzssEphBoolParamForSV(int svId, string paramName, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssEphBoolParamForSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisBoolParamResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssEphBoolParamForSV."; }
    }
  
    internal const string CmdName = "GetQzssEphemerisBoolParamResult";

    public GetQzssEphemerisBoolParamResult()
      : base(CmdName)
    {}

    public GetQzssEphemerisBoolParamResult(CommandBase relatedCommand, int svId, string paramName, bool val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public bool Val
    {
      get { return GetValue("Val").ToObject<bool>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             Satellite SV ID 1..10, or use 0 to apply new value to all satellites
  /// ParamName   string          Parameter name (see table above for accepted names)
  /// Val         bool            Parameter value (see table above for unit)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphBoolParamForSVResult : GetQzssEphemerisBoolParamResult
  {
    internal new const string CmdName = "GetQzssEphBoolParamForSVResult";

    public GetQzssEphBoolParamForSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssEphBoolParamForSVResult(CommandBase relatedCommand, int svId, string paramName, bool val, string dataSetName = null)
      : base(relatedCommand, svId, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command SetQzssEphemerisBoolParams is deprecated since 21.3. You may use SetQzssEphBoolParamForEachSV.
  /// 
  /// Set QZSS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssEphemerisBoolParams is deprecated since 21.3. You may use SetQzssEphBoolParamForEachSV.\n\nSet QZSS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetQzssEphemerisBoolParams";

    public SetQzssEphemerisBoolParams()
      : base(CmdName)
    {}

    public SetQzssEphemerisBoolParams(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set QZSS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set QZSS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "SetQzssEphBoolParamForEachSV";

    public SetQzssEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public SetQzssEphBoolParamForEachSV(string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Val", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetQzssEphemerisBoolParams is deprecated since 21.3. You may use GetQzssEphBoolParamForEachSV.
  /// 
  /// Get QZSS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisBoolParams : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetQzssEphemerisBoolParams is deprecated since 21.3. You may use GetQzssEphBoolParamForEachSV.\n\nGet QZSS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetQzssEphemerisBoolParams";

    public GetQzssEphemerisBoolParams()
      : base(CmdName)
    {}

    public GetQzssEphemerisBoolParams(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get QZSS ephemeris boolean parameter value for all satellites
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphBoolParamForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get QZSS ephemeris boolean parameter value for all satellites"; }
    }

    internal const string CmdName = "GetQzssEphBoolParamForEachSV";

    public GetQzssEphBoolParamForEachSV()
      : base(CmdName)
    {}

    public GetQzssEphBoolParamForEachSV(string paramName, string dataSetName = null)
      : base(CmdName)
    {
      ParamName = paramName;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssEphBoolParamForEachSV.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphemerisBoolParamsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssEphBoolParamForEachSV."; }
    }
  
    internal const string CmdName = "GetQzssEphemerisBoolParamsResult";

    public GetQzssEphemerisBoolParamsResult()
      : base(CmdName)
    {}

    public GetQzssEphemerisBoolParamsResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      ParamName = paramName;
      Val = val;
      DataSetName = dataSetName;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ParamName")
        && Contains("Val")
      ;
      }
    }

    public string ParamName
    {
      get { return GetValue("ParamName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("ParamName", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Val
    {
      get { return GetValue("Val").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Val", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------
  /// ParamName   string          Refer to SetQzssEphemerisBoolParam for accepted names
  /// Val         array bool      Parameter value for each satellite. Zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetQzssEphBoolParamForEachSVResult : GetQzssEphemerisBoolParamsResult
  {
    internal new const string CmdName = "GetQzssEphBoolParamForEachSVResult";

    public GetQzssEphBoolParamForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetQzssEphBoolParamForEachSVResult(CommandBase relatedCommand, string paramName, List<bool> val, string dataSetName = null)
      : base(relatedCommand, paramName, val, dataSetName)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)
  ///
  /// Name           Type               Description
  /// -------------- ------------------ --------------------------------------------------------------------------
  /// SvId           int                The satellite's SV ID
  /// ParamValueDict dict string:double A dictionary of param value pairs.
  ///                                   Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
  ///                                                      "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
  ///                                                      "AccelerationY", "AccelerationZ", "Health", "URA" and
  ///                                                      "UraIndex"
  ///

  public class SetSbasEphParamsForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)"; }
    }

    internal const string CmdName = "SetSbasEphParamsForSV";

    public SetSbasEphParamsForSV()
      : base(CmdName)
    {}

    public SetSbasEphParamsForSV(int svId, Dictionary<string, double> paramValueDict)
      : base(CmdName)
    {
      SvId = svId;
      ParamValueDict = paramValueDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamValueDict")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, double> ParamValueDict
    {
      get { return GetValue("ParamValueDict").ToObject<Dictionary<string, double>>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamValueDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)
  ///
  /// Name       Type         Description
  /// ---------- ------------ ----------------------------------------------------------------------------
  /// SvId       int          The satellite's SV ID
  /// ParamArray array string An array of params.
  ///                         Accepted values are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
  ///                                              "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
  ///                                              "AccelerationY", "AccelerationZ", "Health", "URA" and
  ///                                              "UraIndex"
  ///

  public class GetSbasEphParamsForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get parameters for a SBAS satellite ephemeris (runtime modification only available for health parameter)"; }
    }

    internal const string CmdName = "GetSbasEphParamsForSV";

    public GetSbasEphParamsForSV()
      : base(CmdName)
    {}

    public GetSbasEphParamsForSV(int svId, List<string> paramArray)
      : base(CmdName)
    {
      SvId = svId;
      ParamArray = paramArray;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamArray")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> ParamArray
    {
      get { return GetValue("ParamArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSbasEphParamsForSV.
  ///
  /// Name           Type               Description
  /// -------------- ------------------ --------------------------------------------------------------------------
  /// SvId           int                The satellite's SV ID
  /// ParamValueDict dict string:double A dictionary of param value pairs.
  ///                                   Accepted keys are: "ClockBias", "RelativeFrequencyBias", "X", "Y", "Z",
  ///                                                      "VelocityX", "VelocityY", "VelocityZ", "AccelerationX",
  ///                                                      "AccelerationY", "AccelerationZ", "Health", "URA" and
  ///                                                      "UraIndex"
  ///

  public class GetSbasEphParamsForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasEphParamsForSV."; }
    }

    internal const string CmdName = "GetSbasEphParamsForSVResult";

    public GetSbasEphParamsForSVResult()
      : base(CmdName)
    {}

    public GetSbasEphParamsForSVResult(CommandBase relatedCommand, int svId, Dictionary<string, double> paramValueDict)
      : base(CmdName, relatedCommand)
    {
      SvId = svId;
      ParamValueDict = paramValueDict;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("ParamValueDict")
      ;
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public Dictionary<string, double> ParamValueDict
    {
      get { return GetValue("ParamValueDict").ToObject<Dictionary<string, double>>(CommandBase.Serializer); }
      set
      {
          SetValue("ParamValueDict", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Apply ranging flag for a SBAS satellite
  ///
  /// Name   Type Description
  /// ------ ---- --------------------------
  /// SvId   int  The satellite's SV ID
  /// Health bool The ranging unhealthy flag
  ///

  public class SetSbasRangingHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Apply ranging flag for a SBAS satellite"; }
    }

    internal const string CmdName = "SetSbasRangingHealthForSV";

    public SetSbasRangingHealthForSV()
      : base(CmdName)
    {}

    public SetSbasRangingHealthForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Apply correction flag for a SBAS satellite
  ///
  /// Name   Type Description
  /// ------ ---- -----------------------------
  /// SvId   int  The satellite's SV ID
  /// Health bool The correction unhealthy flag
  ///

  public class SetSbasCorrectionsHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Apply correction flag for a SBAS satellite"; }
    }

    internal const string CmdName = "SetSbasCorrectionsHealthForSV";

    public SetSbasCorrectionsHealthForSV()
      : base(CmdName)
    {}

    public SetSbasCorrectionsHealthForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Apply integrity flag for a SBAS satellite
  ///
  /// Name   Type Description
  /// ------ ---- ----------------------------
  /// SvId   int  The satellite's SV ID
  /// Health bool The integrity unhealthy flag
  ///

  public class SetSbasIntegrityHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Apply integrity flag for a SBAS satellite"; }
    }

    internal const string CmdName = "SetSbasIntegrityHealthForSV";

    public SetSbasIntegrityHealthForSV()
      : base(CmdName)
    {}

    public SetSbasIntegrityHealthForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Apply reserved flag for a SBAS satellite
  ///
  /// Name   Type Description
  /// ------ ---- ---------------------------
  /// SvId   int  The satellite's SV ID
  /// Health bool The reserved unhealthy flag
  ///

  public class SetSbasReservedHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Apply reserved flag for a SBAS satellite"; }
    }

    internal const string CmdName = "SetSbasReservedHealthForSV";

    public SetSbasReservedHealthForSV()
      : base(CmdName)
    {}

    public SetSbasReservedHealthForSV(int svId, bool health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Health
    {
      get { return GetValue("Health").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Apply service provider for a satellite
  ///
  /// Name   Type Description
  /// ------ ---- ---------------------
  /// SvId   int  The satellite's SV ID
  /// Health int  The service provider
  ///

  public class SetSbasServiceHealthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Apply service provider for a satellite"; }
    }

    internal const string CmdName = "SetSbasServiceHealthForSV";

    public SetSbasServiceHealthForSV()
      : base(CmdName)
    {}

    public SetSbasServiceHealthForSV(int svId, int health)
      : base(CmdName)
    {
      SvId = svId;
      Health = health;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Health")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Health
    {
      get { return GetValue("Health").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Health", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) to zero for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID. Use 0 to apply new value to all satellites in the constellation.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class ResetPerturbations : CommandBase
  {
    public override string Documentation
    {
      get { return "Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) to zero for the specified constellation."; }
    }

    internal const string CmdName = "ResetPerturbations";

    public ResetPerturbations()
      : base(CmdName)
    {}

    public ResetPerturbations(string system, int svId, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Crs         double          Crs (meter)
  /// Crc         double          Crc (meter)
  /// Cis         double          Cis (rad)
  /// Cic         double          Cic (rad)
  /// Cus         double          Cus (rad)
  /// Cuc         double          Cuc (rad)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetPerturbations : CommandBase
  {
    public override string Documentation
    {
      get { return "Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation."; }
    }

    internal const string CmdName = "SetPerturbations";

    public SetPerturbations()
      : base(CmdName)
    {}

    public SetPerturbations(string system, int svId, double crs, double crc, double cis, double cic, double cus, double cuc, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Crs = crs;
      Crc = crc;
      Cis = cis;
      Cic = cic;
      Cus = cus;
      Cuc = cuc;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Crs")
        && Contains("Crc")
        && Contains("Cis")
        && Contains("Cic")
        && Contains("Cus")
        && Contains("Cuc")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Crs
    {
      get { return GetValue("Crs").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Crs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Crc
    {
      get { return GetValue("Crc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Crc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cis
    {
      get { return GetValue("Cis").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cic
    {
      get { return GetValue("Cic").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cus
    {
      get { return GetValue("Cus").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cus", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cuc
    {
      get { return GetValue("Cuc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cuc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetPerturbations : CommandBase
  {
    public override string Documentation
    {
      get { return "Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for the specified constellation."; }
    }

    internal const string CmdName = "GetPerturbations";

    public GetPerturbations()
      : base(CmdName)
    {}

    public GetPerturbations(string system, int svId, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPerturbations.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite's SV ID.
  /// Crs         double          Crs (meter)
  /// Crc         double          Crc (meter)
  /// Cis         double          Cis (rad)
  /// Cic         double          Cic (rad)
  /// Cus         double          Cus (rad)
  /// Cuc         double          Cuc (rad)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetPerturbationsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPerturbations."; }
    }

    internal const string CmdName = "GetPerturbationsResult";

    public GetPerturbationsResult()
      : base(CmdName)
    {}

    public GetPerturbationsResult(CommandBase relatedCommand, string system, int svId, double crs, double crc, double cis, double cic, double cus, double cuc, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Crs = crs;
      Crc = crc;
      Cis = cis;
      Cic = cic;
      Cus = cus;
      Cuc = cuc;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Crs")
        && Contains("Crc")
        && Contains("Cis")
        && Contains("Cic")
        && Contains("Cus")
        && Contains("Cuc")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Crs
    {
      get { return GetValue("Crs").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Crs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Crc
    {
      get { return GetValue("Crc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Crc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cis
    {
      get { return GetValue("Cis").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cic
    {
      get { return GetValue("Cic").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cus
    {
      get { return GetValue("Cus").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cus", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Cuc
    {
      get { return GetValue("Cuc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Cuc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
  /// All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// Crs         array double    Crs (meter)
  /// Crc         array double    Crc (meter)
  /// Cis         array double    Cis (rad)
  /// Cic         array double    Cic (rad)
  /// Cus         array double    Cus (rad)
  /// Cuc         array double    Cuc (rad)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetPerturbationsForAllSat : CommandBase
  {
    public override string Documentation
    {
      get { return "Set orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..\nAll parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)"; }
    }

    internal const string CmdName = "SetPerturbationsForAllSat";

    public SetPerturbationsForAllSat()
      : base(CmdName)
    {}

    public SetPerturbationsForAllSat(string system, List<double> crs, List<double> crc, List<double> cis, List<double> cic, List<double> cus, List<double> cuc, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      Crs = crs;
      Crc = crc;
      Cis = cis;
      Cic = cic;
      Cus = cus;
      Cuc = cuc;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Crs")
        && Contains("Crc")
        && Contains("Cis")
        && Contains("Cic")
        && Contains("Cus")
        && Contains("Cuc")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Crs
    {
      get { return GetValue("Crs").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Crs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Crc
    {
      get { return GetValue("Crc").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Crc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cis
    {
      get { return GetValue("Cis").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cic
    {
      get { return GetValue("Cic").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cus
    {
      get { return GetValue("Cus").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cus", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cuc
    {
      get { return GetValue("Cuc").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cuc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..
  /// All parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetPerturbationsForAllSat : CommandBase
  {
    public override string Documentation
    {
      get { return "Get orbit perturbations (Crs, Crc, Cis, Cic, Cus and Cuc) for all satellites of the specified constellation..\nAll parameters are zero based index (index 0 => SV ID 1, index 1 => SV ID 2, etc)"; }
    }

    internal const string CmdName = "GetPerturbationsForAllSat";

    public GetPerturbationsForAllSat()
      : base(CmdName)
    {}

    public GetPerturbationsForAllSat(string system, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPerturbationsForAllSat.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// Crs         array double    Crs (meter)
  /// Crc         array double    Crc (meter)
  /// Cis         array double    Cis (rad)
  /// Cic         array double    Cic (rad)
  /// Cus         array double    Cus (rad)
  /// Cuc         array double    Cuc (rad)
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class GetPerturbationsForAllSatResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPerturbationsForAllSat."; }
    }

    internal const string CmdName = "GetPerturbationsForAllSatResult";

    public GetPerturbationsForAllSatResult()
      : base(CmdName)
    {}

    public GetPerturbationsForAllSatResult(CommandBase relatedCommand, string system, List<double> crs, List<double> crc, List<double> cis, List<double> cic, List<double> cus, List<double> cuc, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Crs = crs;
      Crc = crc;
      Cis = cis;
      Cic = cic;
      Cus = cus;
      Cuc = cuc;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Crs")
        && Contains("Crc")
        && Contains("Cis")
        && Contains("Cic")
        && Contains("Cus")
        && Contains("Cuc")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Crs
    {
      get { return GetValue("Crs").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Crs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Crc
    {
      get { return GetValue("Crc").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Crc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cis
    {
      get { return GetValue("Cis").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cic
    {
      get { return GetValue("Cic").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cus
    {
      get { return GetValue("Cus").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cus", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Cuc
    {
      get { return GetValue("Cuc").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Cuc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change GPS CNAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ---------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGpsCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change GPS CNAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGpsCNav";

    public SetMessageModificationToGpsCNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGpsCNav(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the GPS CNAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGpsCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the GPS CNAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsCNav";

    public GetMessageModificationToGpsCNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsCNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGpsCNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ---------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L2C" and "L5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGpsCNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGpsCNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsCNavResult";

    public GetMessageModificationToGpsCNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsCNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change GPS MNAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          MNAV Message type
  /// Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier automatically set by simulator
  ///

  public class SetMessageModificationToGpsMNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change GPS MNAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGpsMNav";

    public SetMessageModificationToGpsMNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGpsMNav(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, int occurrence, string condition, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Occurrence = occurrence;
      Condition = condition;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Occurrence")
        && Contains("Condition")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Occurrence
    {
      get { return GetValue("Occurrence").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Occurrence", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the GPS MNAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------------------------
  /// Id   string Unique identifier automatically set by simulator
  ///

  public class GetMessageModificationToGpsMNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the GPS MNAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsMNav";

    public GetMessageModificationToGpsMNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsMNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGpsMNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1ME" and "L2ME" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          MNAV Message type
  /// Occurrence       int          Occurrence number in message sequence (1 based, or use -1 to match any occurrence)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier automatically set by simulator
  ///

  public class GetMessageModificationToGpsMNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGpsMNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsMNavResult";

    public GetMessageModificationToGpsMNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsMNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, int occurrence, string condition, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Occurrence = occurrence;
      Condition = condition;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Occurrence")
        && Contains("Condition")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Occurrence
    {
      get { return GetValue("Occurrence").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Occurrence", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change GPS CNAV-2 message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV-2 page (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGpsCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change GPS CNAV-2 message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGpsCNav2";

    public SetMessageModificationToGpsCNav2()
      : base(CmdName)
    {}

    public SetMessageModificationToGpsCNav2(List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the GPS CNAV-2 message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGpsCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the GPS CNAV-2 message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsCNav2";

    public GetMessageModificationToGpsCNav2()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsCNav2(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGpsCNav2.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV-2 page (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGpsCNav2Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGpsCNav2."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsCNav2Result";

    public GetMessageModificationToGpsCNav2Result()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsCNav2Result(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change GPS LNAV message bits.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// subframes. The Modification parameter is a string where the first character applies to the first
  /// bit of subframe word and last character applies to last bit of subframe word.
  ///    '0' will force bit to zero
  ///    '1' will for bit to one
  ///    'X' will negate bit value
  ///    any other byte value will have no effect
  /// 
  /// Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
  ///                       and negate bit 24
  /// 
  /// Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.
  /// 
  /// The ID parameter is automatically updated with a unique ID by the simulator for future reference.
  /// If the ID is set with a value other than an empty string, the simulator will try to find a match
  /// with previously added events. If there is a match, the event is updated with this message
  /// instead of adding a new event. If there is no match, the event is added and the ID is not
  /// changed.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..25 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGpsLNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change GPS LNAV message bits.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nsubframes. The Modification parameter is a string where the first character applies to the first\nbit of subframe word and last character applies to last bit of subframe word.\n   '0' will force bit to zero\n   '1' will for bit to one\n   'X' will negate bit value\n   any other byte value will have no effect\n\nExample: \"-00------------------1-X------\" will force bits 1 and 2 to zero and bit 22 to one\n                      and negate bit 24\n\nNote: if UpdateParity is true, any modification to bits 25..30 will have no effect.\n\nThe ID parameter is automatically updated with a unique ID by the simulator for future reference.\nIf the ID is set with a value other than an empty string, the simulator will try to find a match\nwith previously added events. If there is a match, the event is updated with this message\ninstead of adding a new event. If there is no match, the event is added and the ID is not\nchanged."; }
    }

    internal const string CmdName = "SetMessageModificationToGpsLNav";

    public SetMessageModificationToGpsLNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGpsLNav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the GPS LNAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGpsLNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the GPS LNAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsLNav";

    public GetMessageModificationToGpsLNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsLNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGpsLNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "L1CA", "L1P" and "L2P" (empty for all)
  /// SvId             int          The satellite's SV ID 1..32 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..25 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGpsLNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGpsLNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGpsLNavResult";

    public GetMessageModificationToGpsLNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGpsLNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change Galileo C/NAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGalileoCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change Galileo C/NAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGalileoCNav";

    public SetMessageModificationToGalileoCNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGalileoCNav(List<string> signalArray, int svId, int startTime, int stopTime, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the Galileo C/NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the Galileo C/NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoCNav";

    public GetMessageModificationToGalileoCNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoCNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGalileoCNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E6BC" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoCNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGalileoCNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoCNavResult";

    public GetMessageModificationToGalileoCNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoCNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change Galileo F/NAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..5 (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGalileoFNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change Galileo F/NAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGalileoFNav";

    public SetMessageModificationToGalileoFNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGalileoFNav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the Galileo F/NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoFNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the Galileo F/NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoFNav";

    public GetMessageModificationToGalileoFNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoFNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGalileoFNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E5a" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..12 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..5 (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoFNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGalileoFNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoFNavResult";

    public GetMessageModificationToGalileoFNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoFNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change Galileo I/NAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ---------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..15 (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToGalileoINav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change Galileo I/NAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToGalileoINav";

    public SetMessageModificationToGalileoINav()
      : base(CmdName)
    {}

    public SetMessageModificationToGalileoINav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the Galileo I/NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoINav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the Galileo I/NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoINav";

    public GetMessageModificationToGalileoINav()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoINav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGalileoINav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ---------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "E1" and "E5b" (empty for all)
  /// SvId             int          The satellite's SV ID 1..36 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..24 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..15 (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToGalileoINavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGalileoINav."; }
    }

    internal const string CmdName = "GetMessageModificationToGalileoINavResult";

    public GetMessageModificationToGalileoINavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGalileoINavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change GLONASS NAV message bits.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// message strings. The Modification parameter is a string where the first character applies to bit
  /// 85 of frame string and last character applies to Hamming Code bit 1.
  ///    '0' will force bit to zero
  ///    '1' will for bit to one
  ///    'X' will negate bit value
  ///    ' ' white space are ignored (use them to separate the string into bytes to help reading)
  ///    '-' or any other byte value will have no effect
  /// 
  /// Example:
  /// 
  /// "-0--- 1------- -------- -------- -------- -------- -------- -------- -------- -------- ---1--X-"
  ///   |  |                                           |  |
  ///   |  +- Force bit 80 to '1'               Force Hamming code bit 5 to '1' -+  |
  ///   |                                               |
  ///   +------ Force bit 84 to 0                   Negate Hamming code bit 2 ----+
  /// 
  /// Note: if UpdateHammingCode is true, any modification to bits 1..8 will have no effect.
  /// 
  /// The ID parameter is automatically updated with a unique ID by the simulator for future reference.
  /// If the ID is set with a value other than an empty string, the simulator will try to find a match
  /// with previously added events. If there is a match, the event is updated with this message
  /// instead of adding a new event. If there is no match, the event is added and the ID is not
  /// changed.
  ///
  /// Name               Type         Description
  /// ------------------ ------------ --------------------------------------------------------------------------------------------
  /// SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
  /// SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
  /// StartTime          int          Elapsed time in seconds since start of simulation
  /// StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
  /// StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
  /// UpdateHammingCode  bool         Recalculate Hamming Code after making modification
  /// StringModification string       Modification string must be 85 bits long (or more if using white spaces)
  /// Id                 string       Unique identifier of the event
  ///

  public class SetMessageModificationToGlonassNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change GLONASS NAV message bits.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessage strings. The Modification parameter is a string where the first character applies to bit\n85 of frame string and last character applies to Hamming Code bit 1.\n   '0' will force bit to zero\n   '1' will for bit to one\n   'X' will negate bit value\n   ' ' white space are ignored (use them to separate the string into bytes to help reading)\n   '-' or any other byte value will have no effect\n\nExample:\n\n\"-0--- 1------- -------- -------- -------- -------- -------- -------- -------- -------- ---1--X-\"\n  |  |                                           |  |\n  |  +- Force bit 80 to '1'               Force Hamming code bit 5 to '1' -+  |\n  |                                               |\n  +------ Force bit 84 to 0                   Negate Hamming code bit 2 ----+\n\nNote: if UpdateHammingCode is true, any modification to bits 1..8 will have no effect.\n\nThe ID parameter is automatically updated with a unique ID by the simulator for future reference.\nIf the ID is set with a value other than an empty string, the simulator will try to find a match\nwith previously added events. If there is a match, the event is updated with this message\ninstead of adding a new event. If there is no match, the event is added and the ID is not\nchanged."; }
    }

    internal const string CmdName = "SetMessageModificationToGlonassNav";

    public SetMessageModificationToGlonassNav()
      : base(CmdName)
    {}

    public SetMessageModificationToGlonassNav(List<string> signalArray, int svId, int startTime, int stopTime, int frame, int stringNumber, bool updateHammingCode, string stringModification, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Frame = frame;
      StringNumber = stringNumber;
      UpdateHammingCode = updateHammingCode;
      StringModification = stringModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Frame")
        && Contains("StringNumber")
        && Contains("UpdateHammingCode")
        && Contains("StringModification")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Frame
    {
      get { return GetValue("Frame").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Frame", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StringNumber
    {
      get { return GetValue("StringNumber").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StringNumber", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateHammingCode
    {
      get { return GetValue("UpdateHammingCode").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateHammingCode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string StringModification
    {
      get { return GetValue("StringModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("StringModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the GLONASS NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToGlonassNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the GLONASS NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToGlonassNav";

    public GetMessageModificationToGlonassNav()
      : base(CmdName)
    {}

    public GetMessageModificationToGlonassNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToGlonassNav.
  ///
  /// Name               Type         Description
  /// ------------------ ------------ --------------------------------------------------------------------------------------------
  /// SignalArray        array string Array of signals to apply the message modification to, accepts "G1" and "G2" (empty for all)
  /// SvId               int          The satellite's SV ID number 1..24 (use 0 to apply modification to all SVs)
  /// StartTime          int          Elapsed time in seconds since start of simulation
  /// StopTime           int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Frame              int          Frame 1..5 (use 0 to apply modification to all frames)
  /// StringNumber       int          String 1..15 (use 0 to apply modification to all strings)
  /// UpdateHammingCode  bool         Recalculate Hamming Code after making modification
  /// StringModification string       Modification string must be 85 bits long (or more if using white spaces)
  /// Id                 string       Unique identifier of the event
  ///

  public class GetMessageModificationToGlonassNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToGlonassNav."; }
    }

    internal const string CmdName = "GetMessageModificationToGlonassNavResult";

    public GetMessageModificationToGlonassNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToGlonassNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int frame, int stringNumber, bool updateHammingCode, string stringModification, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Frame = frame;
      StringNumber = stringNumber;
      UpdateHammingCode = updateHammingCode;
      StringModification = stringModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Frame")
        && Contains("StringNumber")
        && Contains("UpdateHammingCode")
        && Contains("StringModification")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Frame
    {
      get { return GetValue("Frame").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Frame", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StringNumber
    {
      get { return GetValue("StringNumber").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StringNumber", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateHammingCode
    {
      get { return GetValue("UpdateHammingCode").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateHammingCode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string StringModification
    {
      get { return GetValue("StringModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("StringModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change BeiDou D1 NAV navigation message bits.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// subframes. The Modification parameter is a string where the first character applies to the first
  /// bit of subframe word and last character applies to last bit of subframe word.
  ///    '0' will force bit to zero
  ///    '1' will for bit to one
  ///    'X' will negate bit value
  ///    any other byte value will have no effect
  /// 
  /// Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
  ///                       and negate bit 24
  /// 
  /// Note: if UpdateParity is true, any modification to parity bits will have no effect.
  /// 
  /// The ID parameter is automatically updated with a unique ID by the simulator for future reference.
  /// If the ID is set with a value other than an empty string, the simulator will try to find a match
  /// with previously added events. If there is a match, the event is updated with this message
  /// instead of adding a new event. If there is no match, the event is added and the ID is not
  /// changed.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..24 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToBeiDouD1Nav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change BeiDou D1 NAV navigation message bits.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nsubframes. The Modification parameter is a string where the first character applies to the first\nbit of subframe word and last character applies to last bit of subframe word.\n   '0' will force bit to zero\n   '1' will for bit to one\n   'X' will negate bit value\n   any other byte value will have no effect\n\nExample: \"-00------------------1-X------\" will force bits 1 and 2 to zero and bit 22 to one\n                      and negate bit 24\n\nNote: if UpdateParity is true, any modification to parity bits will have no effect.\n\nThe ID parameter is automatically updated with a unique ID by the simulator for future reference.\nIf the ID is set with a value other than an empty string, the simulator will try to find a match\nwith previously added events. If there is a match, the event is updated with this message\ninstead of adding a new event. If there is no match, the event is added and the ID is not\nchanged."; }
    }

    internal const string CmdName = "SetMessageModificationToBeiDouD1Nav";

    public SetMessageModificationToBeiDouD1Nav()
      : base(CmdName)
    {}

    public SetMessageModificationToBeiDouD1Nav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the BeiDou D1 NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouD1Nav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the BeiDou D1 NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouD1Nav";

    public GetMessageModificationToBeiDouD1Nav()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouD1Nav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToBeiDouD1Nav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..24 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouD1NavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToBeiDouD1Nav."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouD1NavResult";

    public GetMessageModificationToBeiDouD1NavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouD1NavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change BeiDou D2 NAV message bits.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// subframes. The Modification parameter is a string where the first character applies to the first
  /// bit of subframe word and last character applies to last bit of subframe word.
  ///    '0' will force bit to zero
  ///    '1' will for bit to one
  ///    'X' will negate bit value
  ///    any other byte value will have no effect
  /// 
  /// Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
  ///                       and negate bit 24
  /// 
  /// Note: if UpdateParity is true, any modification to parity bits will have no effect.
  /// 
  /// The ID parameter is automatically updated with a unique ID by the simulator for future reference.
  /// If the ID is set with a value other than an empty string, the simulator will try to find a match
  /// with previously added events. If there is a match, the event is updated with this message
  /// instead of adding a new event. If there is no match, the event is added and the ID is not
  /// changed.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..120 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToBeiDouD2Nav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change BeiDou D2 NAV message bits.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nsubframes. The Modification parameter is a string where the first character applies to the first\nbit of subframe word and last character applies to last bit of subframe word.\n   '0' will force bit to zero\n   '1' will for bit to one\n   'X' will negate bit value\n   any other byte value will have no effect\n\nExample: \"-00------------------1-X------\" will force bits 1 and 2 to zero and bit 22 to one\n                      and negate bit 24\n\nNote: if UpdateParity is true, any modification to parity bits will have no effect.\n\nThe ID parameter is automatically updated with a unique ID by the simulator for future reference.\nIf the ID is set with a value other than an empty string, the simulator will try to find a match\nwith previously added events. If there is a match, the event is updated with this message\ninstead of adding a new event. If there is no match, the event is added and the ID is not\nchanged."; }
    }

    internal const string CmdName = "SetMessageModificationToBeiDouD2Nav";

    public SetMessageModificationToBeiDouD2Nav()
      : base(CmdName)
    {}

    public SetMessageModificationToBeiDouD2Nav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the BeiDou D2 NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouD2Nav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the BeiDou D2 NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouD2Nav";

    public GetMessageModificationToBeiDouD2Nav()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouD2Nav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToBeiDouD2Nav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1" and "B2" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes)
  /// Page             int          Page 1..120 (use 0 to apply modification to all pages)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouD2NavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToBeiDouD2Nav."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouD2NavResult";

    public GetMessageModificationToBeiDouD2NavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouD2NavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int page, int word, bool updateParity, string wordModification, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      Page = page;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("Page")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change BeiDou CNAV1 message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV1 page (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToBeiDouCNav1 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change BeiDou CNAV1 message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToBeiDouCNav1";

    public SetMessageModificationToBeiDouCNav1()
      : base(CmdName)
    {}

    public SetMessageModificationToBeiDouCNav1(List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the BeiDou CNAV1 message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouCNav1 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the BeiDou CNAV1 message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouCNav1";

    public GetMessageModificationToBeiDouCNav1()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouCNav1(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToBeiDouCNav1.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV1 page (use 0 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouCNav1Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToBeiDouCNav1."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouCNav1Result";

    public GetMessageModificationToBeiDouCNav1Result()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouCNav1Result(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change BeiDou CNAV2 message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToBeiDouCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change BeiDou CNAV2 message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToBeiDouCNav2";

    public SetMessageModificationToBeiDouCNav2()
      : base(CmdName)
    {}

    public SetMessageModificationToBeiDouCNav2(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the BeiDou CNAV2 message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the BeiDou CNAV2 message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouCNav2";

    public GetMessageModificationToBeiDouCNav2()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouCNav2(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToBeiDouCNav2.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "B2a" (empty for all)
  /// SvId             int          The satellite's SV ID 1..35 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV2 Message type (use 0 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToBeiDouCNav2Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToBeiDouCNav2."; }
    }

    internal const string CmdName = "GetMessageModificationToBeiDouCNav2Result";

    public GetMessageModificationToBeiDouCNav2Result()
      : base(CmdName)
    {}

    public GetMessageModificationToBeiDouCNav2Result(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change QZSS LNAV message bits.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// subframes. The Modification parameter is a string where the first character applies to the first
  /// bit of subframe word and last character applies to last bit of subframe word.
  ///    '0' will force bit to zero
  ///    '1' will for bit to one
  ///    'X' will negate bit value
  ///    any other byte value will have no effect
  /// 
  /// Example: "-00------------------1-X------" will force bits 1 and 2 to zero and bit 22 to one
  ///                       and negate bit 24
  /// 
  /// Note: if UpdateParity is true, any modification to bits 25..30 will have no effect.
  /// 
  /// The ID parameter is automatically updated with a unique ID by the simulator for future reference.
  /// If the ID is set with a value other than an empty string, the simulator will try to find a match
  /// with previously added events. If there is a match, the event is updated with this message
  /// instead of adding a new event. If there is no match, the event is added and the ID is not
  /// changed.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
  /// LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToQzssLNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change QZSS LNAV message bits.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nsubframes. The Modification parameter is a string where the first character applies to the first\nbit of subframe word and last character applies to last bit of subframe word.\n   '0' will force bit to zero\n   '1' will for bit to one\n   'X' will negate bit value\n   any other byte value will have no effect\n\nExample: \"-00------------------1-X------\" will force bits 1 and 2 to zero and bit 22 to one\n                      and negate bit 24\n\nNote: if UpdateParity is true, any modification to bits 25..30 will have no effect.\n\nThe ID parameter is automatically updated with a unique ID by the simulator for future reference.\nIf the ID is set with a value other than an empty string, the simulator will try to find a match\nwith previously added events. If there is a match, the event is updated with this message\ninstead of adding a new event. If there is no match, the event is added and the ID is not\nchanged."; }
    }

    internal const string CmdName = "SetMessageModificationToQzssLNav";

    public SetMessageModificationToQzssLNav()
      : base(CmdName)
    {}

    public SetMessageModificationToQzssLNav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int lNavSvId, int word, bool updateParity, string wordModification, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      LNavSvId = lNavSvId;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("LNavSvId")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int LNavSvId
    {
      get { return GetValue("LNavSvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("LNavSvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the QZSS LNAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToQzssLNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the QZSS LNAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssLNav";

    public GetMessageModificationToQzssLNav()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssLNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToQzssLNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ --------------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1CA" and "QZSSL1CB" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..5 (use 0 to apply modification to all subframes
  /// LNavSvId         int          LNAV SV ID in subframe 4 and 5 (use 0 to apply modification to all LNAV SV ID)
  /// Word             int          Word 1..10 (use 0 to apply modification to all words)
  /// UpdateParity     bool         Recalculate parity after making modification
  /// WordModification string       Modification string must be 30 bits long
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToQzssLNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToQzssLNav."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssLNavResult";

    public GetMessageModificationToQzssLNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssLNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int lNavSvId, int word, bool updateParity, string wordModification, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      LNavSvId = lNavSvId;
      Word = word;
      UpdateParity = updateParity;
      WordModification = wordModification;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("LNavSvId")
        && Contains("Word")
        && Contains("UpdateParity")
        && Contains("WordModification")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int LNavSvId
    {
      get { return GetValue("LNavSvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("LNavSvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Word
    {
      get { return GetValue("Word").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Word", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateParity
    {
      get { return GetValue("UpdateParity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateParity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string WordModification
    {
      get { return GetValue("WordModification").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("WordModification", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change QZSS SLAS message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToQzssSlas : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change QZSS SLAS message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToQzssSlas";

    public SetMessageModificationToQzssSlas()
      : base(CmdName)
    {}

    public SetMessageModificationToQzssSlas(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the QZSS SLAS message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToQzssSlas : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the QZSS SLAS message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssSlas";

    public GetMessageModificationToQzssSlas()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssSlas(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToQzssSlas.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1S" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          SLAS Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToQzssSlasResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToQzssSlas."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssSlasResult";

    public GetMessageModificationToQzssSlasResult()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssSlasResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change QZSS CNAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -----------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToQzssCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change QZSS CNAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToQzssCNav";

    public SetMessageModificationToQzssCNav()
      : base(CmdName)
    {}

    public SetMessageModificationToQzssCNav(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the QZSS CNAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToQzssCNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the QZSS CNAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssCNav";

    public GetMessageModificationToQzssCNav()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssCNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToQzssCNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -----------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL2C" and "QZSSL5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          CNAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToQzssCNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToQzssCNav."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssCNavResult";

    public GetMessageModificationToQzssCNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssCNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change QZSS CNAV2 message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV2 page (use -1 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToQzssCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change QZSS CNAV2 message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToQzssCNav2";

    public SetMessageModificationToQzssCNav2()
      : base(CmdName)
    {}

    public SetMessageModificationToQzssCNav2(List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the QZSS CNAV2 message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToQzssCNav2 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the QZSS CNAV2 message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssCNav2";

    public GetMessageModificationToQzssCNav2()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssCNav2(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToQzssCNav2.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "QZSSL1C" (empty for all)
  /// SvId             int          The satellite's SV ID 1..10 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Page             int          CNAV2 page (use -1 to apply modification to all pages)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToQzssCNav2Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToQzssCNav2."; }
    }

    internal const string CmdName = "GetMessageModificationToQzssCNav2Result";

    public GetMessageModificationToQzssCNav2Result()
      : base(CmdName)
    {}

    public GetMessageModificationToQzssCNav2Result(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int page, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Page = page;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Page")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Page
    {
      get { return GetValue("Page").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Page", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change NavIC NAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
  /// MessageType      int          NAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToNavICNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change NavIC NAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToNavICNav";

    public SetMessageModificationToNavICNav()
      : base(CmdName)
    {}

    public SetMessageModificationToNavICNav(List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the NavIC NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToNavICNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the NavIC NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToNavICNav";

    public GetMessageModificationToNavICNav()
      : base(CmdName)
    {}

    public GetMessageModificationToNavICNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToNavICNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ ----------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "NAVICL5" (empty for all)
  /// SvId             int          The satellite's SV ID 1..14 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// Subframe         int          Subframe 1..4 (use 0 to apply modification to all subframes)
  /// MessageType      int          NAV Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToNavICNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToNavICNav."; }
    }

    internal const string CmdName = "GetMessageModificationToNavICNavResult";

    public GetMessageModificationToNavICNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToNavICNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int subframe, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      Subframe = subframe;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("Subframe")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Subframe
    {
      get { return GetValue("Subframe").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Subframe", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set (or Modify) event to change SBAS NAV message bits. If you send this command without setting the ID
  /// parameter, or if you set the ID with a value never used before, a new Modification event will be
  /// created. If you reuse the same event ID, it will modify the existing event.
  /// 
  /// Note that start and stop time are automatically extended to beginning and ending of overlapped
  /// messages.
  /// 
  /// The Condition parameter is optional and allows you to add content matching condition before applying
  /// bit modifications.
  /// 
  /// BitModifications can be an empty string. The Modification will have no effect until you modify it with at
  /// least one bits mod.
  /// 
  /// A bits mod is represented with a string using the following format: "I:Bits" where I is a bit
  /// index (1 refers to the first transmitted bit) and Bits is a modification mask where each
  /// character describes a modification to a single bit. The allowed characters are:
  ///    0 : force bit to 0
  ///    1 : force bit to 1
  ///    - : leave bit unchanged
  ///    X : revert bit (0 becomes 1 and 1 becomes 0)
  /// 
  /// For example: "24:X---10XX" will: revert bits 24, 30 and 31
  ///                  set bit 28 to 1
  ///                  set bit 29 to 0
  /// The other bits are not affected.
  /// 
  /// You can add multiple bit modifications using commas. For example: "24:X---10XX,127:100X,231:01"
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -----------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
  /// SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class SetMessageModificationToSbasNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) event to change SBAS NAV message bits. If you send this command without setting the ID\nparameter, or if you set the ID with a value never used before, a new Modification event will be\ncreated. If you reuse the same event ID, it will modify the existing event.\n\nNote that start and stop time are automatically extended to beginning and ending of overlapped\nmessages.\n\nThe Condition parameter is optional and allows you to add content matching condition before applying\nbit modifications.\n\nBitModifications can be an empty string. The Modification will have no effect until you modify it with at\nleast one bits mod.\n\nA bits mod is represented with a string using the following format: \"I:Bits\" where I is a bit\nindex (1 refers to the first transmitted bit) and Bits is a modification mask where each\ncharacter describes a modification to a single bit. The allowed characters are:\n   0 : force bit to 0\n   1 : force bit to 1\n   - : leave bit unchanged\n   X : revert bit (0 becomes 1 and 1 becomes 0)\n\nFor example: \"24:X---10XX\" will: revert bits 24, 30 and 31\n                 set bit 28 to 1\n                 set bit 29 to 0\nThe other bits are not affected.\n\nYou can add multiple bit modifications using commas. For example: \"24:X---10XX,127:100X,231:01\""; }
    }

    internal const string CmdName = "SetMessageModificationToSbasNav";

    public SetMessageModificationToSbasNav()
      : base(CmdName)
    {}

    public SetMessageModificationToSbasNav(List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the SBAS NAV message modification with this ID.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Unique identifier of the event
  ///

  public class GetMessageModificationToSbasNav : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the SBAS NAV message modification with this ID."; }
    }

    internal const string CmdName = "GetMessageModificationToSbasNav";

    public GetMessageModificationToSbasNav()
      : base(CmdName)
    {}

    public GetMessageModificationToSbasNav(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageModificationToSbasNav.
  ///
  /// Name             Type         Description
  /// ---------------- ------------ -----------------------------------------------------------------------------------------------------
  /// SignalArray      array string Array of signals to apply the message modification to, accepts "SBASL1" and "SBASL5" (empty for all).
  /// SvId             int          The satellite's SV ID 1..39 (use 0 to apply modification to all SVs)
  /// StartTime        int          Elapsed time in seconds since start of simulation
  /// StopTime         int          Elapsed time in seconds since start of simulation (use 0 for no stop time)
  /// MessageType      int          Message type (use -1 to apply modification to all message types)
  /// Condition        string       Optional condition to match message content, ex: "EQUAL(45, 10, 0x3f)"
  /// UpdateCRC        bool         Recalculate CRC after making modification
  /// BitModifications string       Comma separated bit modifications
  /// Id               string       Unique identifier of the event
  ///

  public class GetMessageModificationToSbasNavResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageModificationToSbasNav."; }
    }

    internal const string CmdName = "GetMessageModificationToSbasNavResult";

    public GetMessageModificationToSbasNavResult()
      : base(CmdName)
    {}

    public GetMessageModificationToSbasNavResult(CommandBase relatedCommand, List<string> signalArray, int svId, int startTime, int stopTime, int messageType, string condition, bool updateCRC, string bitModifications, string id)
      : base(CmdName, relatedCommand)
    {
      SignalArray = signalArray;
      SvId = svId;
      StartTime = startTime;
      StopTime = stopTime;
      MessageType = messageType;
      Condition = condition;
      UpdateCRC = updateCRC;
      BitModifications = bitModifications;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalArray")
        && Contains("SvId")
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("MessageType")
        && Contains("Condition")
        && Contains("UpdateCRC")
        && Contains("BitModifications")
        && Contains("Id")
      ;
      }
    }

    public List<string> SignalArray
    {
      get { return GetValue("SignalArray").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalArray", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int MessageType
    {
      get { return GetValue("MessageType").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("MessageType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Condition
    {
      get { return GetValue("Condition").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Condition", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool UpdateCRC
    {
      get { return GetValue("UpdateCRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateCRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string BitModifications
    {
      get { return GetValue("BitModifications").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("BitModifications", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes a message modification event for the navigation message family.
  ///
  /// Name         Type   Description
  /// ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
  /// Id           string Unique identifier
  ///

  public class RemoveMessageModificationForNavMsgFamily : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes a message modification event for the navigation message family."; }
    }

    internal const string CmdName = "RemoveMessageModificationForNavMsgFamily";

    public RemoveMessageModificationForNavMsgFamily()
      : base(CmdName)
    {}

    public RemoveMessageModificationForNavMsgFamily(string navMsgFamily, string id)
      : base(CmdName)
    {
      NavMsgFamily = navMsgFamily;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("NavMsgFamily")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string NavMsgFamily
    {
      get { return GetValue("NavMsgFamily").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NavMsgFamily", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clear all message modification events for this navigation message family.
  ///
  /// Name         Type   Description
  /// ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
  ///

  public class ClearAllMessageModificationsForNavMsgFamily : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear all message modification events for this navigation message family."; }
    }

    internal const string CmdName = "ClearAllMessageModificationsForNavMsgFamily";

    public ClearAllMessageModificationsForNavMsgFamily()
      : base(CmdName)
    {}

    public ClearAllMessageModificationsForNavMsgFamily(string navMsgFamily)
      : base(CmdName)
    {
      NavMsgFamily = navMsgFamily;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("NavMsgFamily")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string NavMsgFamily
    {
      get { return GetValue("NavMsgFamily").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NavMsgFamily", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all the message modification event's IDs for this navigation message family and SV ID.
  ///
  /// Name         Type   Description
  /// ------------ ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// NavMsgFamily string Navigation message family key, accepted values : "GPS_LNAV", "GPS_CNAV", "GPS_CNAV2", "GPS_MNAV", "GLONASS_NAV", "GALILEO_FNAV", "GALILEO_INAV", "BEIDOU_D1_NAV", "BEIDOU_CNAV1", "BEIDOU_CNAV2", "QZSS_LNAV", "QZSS_SLAS", "NAVIC_NAV" and "SBAS_NAV"
  /// SvId         int    The satellite's SV ID
  ///

  public class GetAllMessageModificationIdsForNavMsgFamily : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all the message modification event's IDs for this navigation message family and SV ID."; }
    }

    internal const string CmdName = "GetAllMessageModificationIdsForNavMsgFamily";

    public GetAllMessageModificationIdsForNavMsgFamily()
      : base(CmdName)
    {}

    public GetAllMessageModificationIdsForNavMsgFamily(string navMsgFamily, int svId)
      : base(CmdName)
    {
      NavMsgFamily = navMsgFamily;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("NavMsgFamily")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string NavMsgFamily
    {
      get { return GetValue("NavMsgFamily").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NavMsgFamily", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllMessageModificationIdsForNavMsgFamily.
  ///
  /// Name Type         Description
  /// ---- ------------ -------------------------------------------------------------------------
  /// Ids  array string List of event IDs which will modify the navigation message for this SV ID
  ///

  public class GetAllMessageModificationIdsForNavMsgFamilyResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllMessageModificationIdsForNavMsgFamily."; }
    }

    internal const string CmdName = "GetAllMessageModificationIdsForNavMsgFamilyResult";

    public GetAllMessageModificationIdsForNavMsgFamilyResult()
      : base(CmdName)
    {}

    public GetAllMessageModificationIdsForNavMsgFamilyResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command RemoveMessageModification is deprecated since 21.3. You may use RemoveMessageModificationForSignal.
  /// 
  /// Removes the signal for the message modification.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
  /// Id     string Unique identifier
  ///

  public class RemoveMessageModification : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command RemoveMessageModification is deprecated since 21.3. You may use RemoveMessageModificationForSignal.\n\nRemoves the signal for the message modification."; }
    }

    internal const string CmdName = "RemoveMessageModification";

    public RemoveMessageModification()
      : base(CmdName)
    {}

    public RemoveMessageModification(string signal, string id)
      : base(CmdName)
    {
      Signal = signal;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the signal for the message modification.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
  /// Id     string Unique identifier
  ///

  public class RemoveMessageModificationForSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the signal for the message modification."; }
    }

    internal const string CmdName = "RemoveMessageModificationForSignal";

    public RemoveMessageModificationForSignal()
      : base(CmdName)
    {}

    public RemoveMessageModificationForSignal(string signal, string id)
      : base(CmdName)
    {
      Signal = signal;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command ClearAllMessageModifications is deprecated since 21.3. You may use ClearAllMessageModificationsForSignal.
  /// 
  /// Clear the signal for all message modifications.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
  ///

  public class ClearAllMessageModifications : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command ClearAllMessageModifications is deprecated since 21.3. You may use ClearAllMessageModificationsForSignal.\n\nClear the signal for all message modifications."; }
    }

    internal const string CmdName = "ClearAllMessageModifications";

    public ClearAllMessageModifications()
      : base(CmdName)
    {}

    public ClearAllMessageModifications(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clear the signal for all message modifications.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
  ///

  public class ClearAllMessageModificationsForSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear the signal for all message modifications."; }
    }

    internal const string CmdName = "ClearAllMessageModificationsForSignal";

    public ClearAllMessageModificationsForSignal()
      : base(CmdName)
    {}

    public ClearAllMessageModificationsForSignal(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all the message modification event's IDs for this signal and SV ID.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Signal key, accepted values : "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B2a", "B1C", "QZSSL1CA", "QZSSL1CB", "QZSSL1S", "NAVICL5", "SBASL1" and "SBASL5"
  /// SvId   int    The satellite's SV ID
  ///

  public class GetAllMessageModificationIdsForSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all the message modification event's IDs for this signal and SV ID."; }
    }

    internal const string CmdName = "GetAllMessageModificationIdsForSignal";

    public GetAllMessageModificationIdsForSignal()
      : base(CmdName)
    {}

    public GetAllMessageModificationIdsForSignal(string signal, int svId)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllMessageModificationIdsForSignal.
  ///
  /// Name Type         Description
  /// ---- ------------ -------------------------------------------------------------------------
  /// Ids  array string List of event IDs which will modify the navigation message for this SV ID
  ///

  public class GetAllMessageModificationIdsForSignalResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllMessageModificationIdsForSignal."; }
    }

    internal const string CmdName = "GetAllMessageModificationIdsForSignalResult";

    public GetAllMessageModificationIdsForSignalResult()
      : base(CmdName)
    {}

    public GetAllMessageModificationIdsForSignalResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add or update continuous wave interference.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------
  /// StartTime   int    Elapsed time in seconds since start of simulation
  /// StopTime    int    Elapsed time in seconds since start of simulation
  /// CentralFreq double Central frequency (Hz)
  /// Power       double Power (dB) relative to nominal power
  /// Enabled     bool   Interference enable or not
  /// Id          string Unique identifier automatically set by simulator
  ///

  public class SetInterferenceCW : CommandBase
  {
    public override string Documentation
    {
      get { return "Add or update continuous wave interference."; }
    }

    internal const string CmdName = "SetInterferenceCW";

    public SetInterferenceCW()
      : base(CmdName)
    {}

    public SetInterferenceCW(int startTime, int stopTime, double centralFreq, double power, bool enabled, string id)
      : base(CmdName)
    {
      StartTime = startTime;
      StopTime = stopTime;
      CentralFreq = centralFreq;
      Power = power;
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add or update chirp signal interference.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------
  /// StartTime   int    Elapsed time in seconds since start of simulation
  /// StopTime    int    Elapsed time in seconds since start of simulation
  /// CentralFreq double Central frequency (Hz)
  /// Power       double Power (dB) relative to nominal power
  /// Bandwidth   double Bandwidth (Hz)
  /// SweepTime   double Sweep Time (us)
  /// Enabled     bool   Interference enable or not
  /// Id          string Unique identifier automatically set by simulator
  ///

  public class SetInterferenceChirp : CommandBase
  {
    public override string Documentation
    {
      get { return "Add or update chirp signal interference."; }
    }

    internal const string CmdName = "SetInterferenceChirp";

    public SetInterferenceChirp()
      : base(CmdName)
    {}

    public SetInterferenceChirp(int startTime, int stopTime, double centralFreq, double power, double bandwidth, double sweepTime, bool enabled, string id)
      : base(CmdName)
    {
      StartTime = startTime;
      StopTime = stopTime;
      CentralFreq = centralFreq;
      Power = power;
      Bandwidth = bandwidth;
      SweepTime = sweepTime;
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("StartTime")
        && Contains("StopTime")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Bandwidth")
        && Contains("SweepTime")
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Bandwidth
    {
      get { return GetValue("Bandwidth").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Bandwidth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SweepTime
    {
      get { return GetValue("SweepTime").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SweepTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes an interference. When adding an event, the simulator
  /// sets the Id parameter. Use that Id here to remove the associated interference.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------------------------
  /// Id   string Unique identifier of the interference to remove.
  ///

  public class RemoveInterference : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes an interference. When adding an event, the simulator\nsets the Id parameter. Use that Id here to remove the associated interference."; }
    }

    internal const string CmdName = "RemoveInterference";

    public RemoveInterference()
      : base(CmdName)
    {}

    public RemoveInterference(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clear all interferences
  ///
  /// 
  ///

  public class RemoveAllInterferences : CommandBase
  {
    public override string Documentation
    {
      get { return "Clear all interferences"; }
    }

    internal const string CmdName = "RemoveAllInterferences";

    public RemoveAllInterferences()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Set PSR ramp event. This function lets user change the pseudorange of any satellite.
  /// If SV ID is set to 0, the change is applied to all satellites.
  /// 
  ///           Hold Start Time
  ///           |         Hold Stop Time
  ///           |         |
  ///           ...........
  ///          ..         ...
  ///         ..            ...
  ///   .......               .........> Time
  ///         |               |
  ///         Start Time      Stop Time
  /// 
  ///
  /// Name          Type   Description
  /// ------------- ------ ----------------------------------------------------------------------------------
  /// System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId          int    The satellite's SV ID.
  /// Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
  /// StartTime     int    Elapsed time in seconds since start of simulation.
  /// HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
  /// HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
  /// StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
  /// Id            string Unique identifier automatically set by simulator if empty string.
  ///                      The IDs pool is common between all system.
  ///

  public class SetPseudorangeRampForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set PSR ramp event. This function lets user change the pseudorange of any satellite.\nIf SV ID is set to 0, the change is applied to all satellites.\n\n          Hold Start Time\n          |         Hold Stop Time\n          |         |\n          ...........\n         ..         ...\n        ..            ...\n  .......               .........> Time\n        |               |\n        Start Time      Stop Time\n"; }
    }

    internal const string CmdName = "SetPseudorangeRampForSV";

    public SetPseudorangeRampForSV()
      : base(CmdName)
    {}

    public SetPseudorangeRampForSV(string system, int svId, double offset, int startTime, int holdStartTime, int holdStopTime, int stopTime, string id)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Offset = offset;
      StartTime = startTime;
      HoldStartTime = holdStartTime;
      HoldStopTime = holdStopTime;
      StopTime = stopTime;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Offset")
        && Contains("StartTime")
        && Contains("HoldStartTime")
        && Contains("HoldStopTime")
        && Contains("StopTime")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int HoldStartTime
    {
      get { return GetValue("HoldStartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HoldStartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int HoldStopTime
    {
      get { return GetValue("HoldStopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HoldStopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get PSR ramp event. This function lets user change the pseudorange of any satellite.
  /// If SV ID is set to 0, the change is applied to all satellites.
  /// 
  ///           Hold Start Time
  ///           |         Hold Stop Time
  ///           |         |
  ///           ...........
  ///          ..         ...
  ///         ..            ...
  ///   .......               .........> Time
  ///         |               |
  ///         Start Time      Stop Time
  /// 
  ///
  /// Name Type   Description
  /// ---- ------ -----------------------------------------------------------------
  /// Id   string Unique identifier automatically set by simulator if empty string.
  ///             The IDs pool is common between all system.
  ///

  public class GetPseudorangeRampForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get PSR ramp event. This function lets user change the pseudorange of any satellite.\nIf SV ID is set to 0, the change is applied to all satellites.\n\n          Hold Start Time\n          |         Hold Stop Time\n          |         |\n          ...........\n         ..         ...\n        ..            ...\n  .......               .........> Time\n        |               |\n        Start Time      Stop Time\n"; }
    }

    internal const string CmdName = "GetPseudorangeRampForSV";

    public GetPseudorangeRampForSV()
      : base(CmdName)
    {}

    public GetPseudorangeRampForSV(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeRampForSV.
  ///
  /// Name          Type   Description
  /// ------------- ------ ----------------------------------------------------------------------------------
  /// System        string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId          int    The satellite's SV ID.
  /// Offset        double Change to satellite pseudorange in meter when ramp is at maximum. Range -1e7..+1e7
  /// StartTime     int    Elapsed time in seconds since start of simulation.
  /// HoldStartTime int    Elapsed time in seconds since start of simulation. HoldStartTime >= StartTime
  /// HoldStopTime  int    Elapsed time in seconds since start of simulation. HoldStopTime >= HoldStartTime
  /// StopTime      int    Elapsed time in seconds since start of simulation. StopTime >= HoldStopTime
  /// Id            string Unique identifier automatically set by simulator if empty string.
  ///                      The IDs pool is common between all system.
  ///

  public class GetPseudorangeRampForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeRampForSV."; }
    }

    internal const string CmdName = "GetPseudorangeRampForSVResult";

    public GetPseudorangeRampForSVResult()
      : base(CmdName)
    {}

    public GetPseudorangeRampForSVResult(CommandBase relatedCommand, string system, int svId, double offset, int startTime, int holdStartTime, int holdStopTime, int stopTime, string id)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Offset = offset;
      StartTime = startTime;
      HoldStartTime = holdStartTime;
      HoldStopTime = holdStopTime;
      StopTime = stopTime;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Offset")
        && Contains("StartTime")
        && Contains("HoldStartTime")
        && Contains("HoldStopTime")
        && Contains("StopTime")
        && Contains("Id")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StartTime
    {
      get { return GetValue("StartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int HoldStartTime
    {
      get { return GetValue("HoldStartTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HoldStartTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int HoldStopTime
    {
      get { return GetValue("HoldStopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HoldStopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int StopTime
    {
      get { return GetValue("StopTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("StopTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a list of all the pseudorange ramps IDs for a system's satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID.
  ///

  public class GetAllPseudorangeRampForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a list of all the pseudorange ramps IDs for a system's satellite."; }
    }

    internal const string CmdName = "GetAllPseudorangeRampForSV";

    public GetAllPseudorangeRampForSV()
      : base(CmdName)
    {}

    public GetAllPseudorangeRampForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllPseudorangeRampForSV.
  ///
  /// Name   Type         Description
  /// ------ ------------ ------------------------------------------------------------------
  /// System string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int          The satellite's SV ID.
  /// Ids    array string List of all the pseudorange ramps IDs for this system's satellite.
  ///

  public class GetAllPseudorangeRampForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllPseudorangeRampForSV."; }
    }

    internal const string CmdName = "GetAllPseudorangeRampForSVResult";

    public GetAllPseudorangeRampForSVResult()
      : base(CmdName)
    {}

    public GetAllPseudorangeRampForSVResult(CommandBase relatedCommand, string system, int svId, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Ids")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes a PSR ramp events. When adding an event, the simulator
  /// sets the Id parameter. Use that Id here to remove the associated ramp.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Id     string Unique identifier of the PSR ramp to remove.
  ///

  public class RemovePseudorangeRamp : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes a PSR ramp events. When adding an event, the simulator\nsets the Id parameter. Use that Id here to remove the associated ramp."; }
    }

    internal const string CmdName = "RemovePseudorangeRamp";

    public RemovePseudorangeRamp()
      : base(CmdName)
    {}

    public RemovePseudorangeRamp(string system, string id)
      : base(CmdName)
    {
      System = system;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove all PSR Ramps for the specified system's satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID (use 0 for all SVs).
  ///

  public class RemoveAllPseudorangeRampForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove all PSR Ramps for the specified system's satellite."; }
    }

    internal const string CmdName = "RemoveAllPseudorangeRampForSV";

    public RemoveAllPseudorangeRampForSV()
      : base(CmdName)
    {}

    public RemoveAllPseudorangeRampForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command RemoveAllPseudorangeRamp is deprecated since 21.3. You may use RemoveAllPseudorangeRampForSystem.
  /// 
  /// Remove all PSR Ramps for all satellites of the specified system.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class RemoveAllPseudorangeRamp : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command RemoveAllPseudorangeRamp is deprecated since 21.3. You may use RemoveAllPseudorangeRampForSystem.\n\nRemove all PSR Ramps for all satellites of the specified system."; }
    }

    internal const string CmdName = "RemoveAllPseudorangeRamp";

    public RemoveAllPseudorangeRamp()
      : base(CmdName)
    {}

    public RemoveAllPseudorangeRamp(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove all PSR Ramps for all satellites of the specified system.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class RemoveAllPseudorangeRampForSystem : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove all PSR Ramps for all satellites of the specified system."; }
    }

    internal const string CmdName = "RemoveAllPseudorangeRampForSystem";

    public RemoveAllPseudorangeRampForSystem()
      : base(CmdName)
    {}

    public RemoveAllPseudorangeRampForSystem(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set next almanac upload time relative to simulation start time.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------
  /// System string Must be "GPS"
  /// Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]
  ///

  public class SetAlmanacInitialUploadTimeOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set next almanac upload time relative to simulation start time."; }
    }

    internal const string CmdName = "SetAlmanacInitialUploadTimeOffset";

    public SetAlmanacInitialUploadTimeOffset()
      : base(CmdName)
    {}

    public SetAlmanacInitialUploadTimeOffset(string system, int offset)
      : base(CmdName)
    {
      System = system;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Offset
    {
      get { return GetValue("Offset").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get next almanac upload time relative to simulation start time.
  ///
  /// 
  ///

  public class GetAlmanacInitialUploadTimeOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get next almanac upload time relative to simulation start time."; }
    }

    internal const string CmdName = "GetAlmanacInitialUploadTimeOffset";

    public GetAlmanacInitialUploadTimeOffset()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAlmanacInitialUploadTimeOffset.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------
  /// System string Must be "GPS"
  /// Offset int    Next upload time in sec (relative to simulation start time). Accepted range is [30..259200]
  ///

  public class GetAlmanacInitialUploadTimeOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAlmanacInitialUploadTimeOffset."; }
    }

    internal const string CmdName = "GetAlmanacInitialUploadTimeOffsetResult";

    public GetAlmanacInitialUploadTimeOffsetResult()
      : base(CmdName)
    {}

    public GetAlmanacInitialUploadTimeOffsetResult(CommandBase relatedCommand, string system, int offset)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Offset")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Offset
    {
      get { return GetValue("Offset").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set almanac upload interval in seconds. After the initial upload set with command 
  /// SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------
  /// System   string Must be "GPS"
  /// Interval int    Interval duration in sec. Accepted range is [3600..259200]
  ///

  public class SetAlmanacUploadTimeInterval : CommandBase
  {
    public override string Documentation
    {
      get { return "Set almanac upload interval in seconds. After the initial upload set with command \nSetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval."; }
    }

    internal const string CmdName = "SetAlmanacUploadTimeInterval";

    public SetAlmanacUploadTimeInterval()
      : base(CmdName)
    {}

    public SetAlmanacUploadTimeInterval(string system, int interval)
      : base(CmdName)
    {
      System = system;
      Interval = interval;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Interval")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Interval
    {
      get { return GetValue("Interval").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Interval", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get almanac upload interval in seconds. After the initial upload set with command 
  /// SetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval.
  ///
  /// 
  ///

  public class GetAlmanacUploadTimeInterval : CommandBase
  {
    public override string Documentation
    {
      get { return "Get almanac upload interval in seconds. After the initial upload set with command \nSetAlmanacInitialUploadTimeOffset, the almanac will automatically update at each interval."; }
    }

    internal const string CmdName = "GetAlmanacUploadTimeInterval";

    public GetAlmanacUploadTimeInterval()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAlmanacUploadTimeInterval.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------
  /// System   string Must be "GPS"
  /// Interval int    Interval duration in sec. Accepted range is [3600..259200]
  ///

  public class GetAlmanacUploadTimeIntervalResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAlmanacUploadTimeInterval."; }
    }

    internal const string CmdName = "GetAlmanacUploadTimeIntervalResult";

    public GetAlmanacUploadTimeIntervalResult()
      : base(CmdName)
    {}

    public GetAlmanacUploadTimeIntervalResult(CommandBase relatedCommand, string system, int interval)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Interval = interval;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Interval")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Interval
    {
      get { return GetValue("Interval").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Interval", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add or update signal echo (multipath). Offsets (power loss, pseudorange, Doppler and carrier phase) are all relative to line-of-sight signal.
  /// If Id is not set, or unknown to Skydel, a new echo will be added. Otherwise, existing echo will be updated.
  ///
  /// Name         Type   Description
  /// ------------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId         int    The satellite's SV ID
  /// PowerLoss    double Power loss in dB (value must be positive)
  /// Pseudorange  double Pseudorange offset in meters (value must be positive)
  /// Doppler      double Doppler frequency offset in Hz
  /// CarrierPhase double Carrier phase offset in radians
  /// Echo         int    Echo number [1..4], or use zero to let Skydel assign an echo number.
  /// Id           string Unique identifier.
  ///

  public class SetMultipathForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Add or update signal echo (multipath). Offsets (power loss, pseudorange, Doppler and carrier phase) are all relative to line-of-sight signal.\nIf Id is not set, or unknown to Skydel, a new echo will be added. Otherwise, existing echo will be updated."; }
    }

    internal const string CmdName = "SetMultipathForSV";

    public SetMultipathForSV()
      : base(CmdName)
    {}

    public SetMultipathForSV(string signal, int svId, double powerLoss, double pseudorange, double doppler, double carrierPhase, int echo, string id)
      : base(CmdName)
    {
      Signal = signal;
      SvId = svId;
      PowerLoss = powerLoss;
      Pseudorange = pseudorange;
      Doppler = doppler;
      CarrierPhase = carrierPhase;
      Echo = echo;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("SvId")
        && Contains("PowerLoss")
        && Contains("Pseudorange")
        && Contains("Doppler")
        && Contains("CarrierPhase")
        && Contains("Echo")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PowerLoss
    {
      get { return GetValue("PowerLoss").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PowerLoss", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pseudorange
    {
      get { return GetValue("Pseudorange").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pseudorange", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Doppler
    {
      get { return GetValue("Doppler").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Doppler", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CarrierPhase
    {
      get { return GetValue("CarrierPhase").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CarrierPhase", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Echo
    {
      get { return GetValue("Echo").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Echo", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable/Disable a multipath signal.
  ///
  /// Name    Type   Description
  /// ------- ------ ---------------------------------------------------------------
  /// Enabled bool   Enable (true) or disable (false) multipath.
  /// Id      string Unique identifier of the multipath signal to enable or disable.
  ///

  public class EnableMultipath : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable/Disable a multipath signal."; }
    }

    internal const string CmdName = "EnableMultipath";

    public EnableMultipath()
      : base(CmdName)
    {}

    public EnableMultipath(bool enabled, string id)
      : base(CmdName)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes a multipath signal.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------------
  /// Id   string Unique identifier of the multipath signal to remove.
  ///

  public class RemoveMultipath : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes a multipath signal."; }
    }

    internal const string CmdName = "RemoveMultipath";

    public RemoveMultipath()
      : base(CmdName)
    {}

    public RemoveMultipath(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Disable all multipath in all satellites but only for the specified signal.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
  ///

  public class RemoveAllMultipathForSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Disable all multipath in all satellites but only for the specified signal."; }
    }

    internal const string CmdName = "RemoveAllMultipathForSignal";

    public RemoveAllMultipathForSignal()
      : base(CmdName)
    {}

    public RemoveAllMultipathForSignal(string signal, bool reset)
      : base(CmdName)
    {
      Signal = signal;
      Reset = reset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Reset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Reset
    {
      get { return GetValue("Reset").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Reset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Disable all multipath for the specified satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID
  /// Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
  ///

  public class RemoveAllMultipathForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Disable all multipath for the specified satellite."; }
    }

    internal const string CmdName = "RemoveAllMultipathForSV";

    public RemoveAllMultipathForSV()
      : base(CmdName)
    {}

    public RemoveAllMultipathForSV(string system, int svId, bool reset)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Reset = reset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Reset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Reset
    {
      get { return GetValue("Reset").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Reset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Disable all multipath for the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Reset  bool   Reset attributes (PSR offset, power loss, Doppler shift and carrier phase offset are set to zero)
  ///

  public class RemoveAllMultipathForSystem : CommandBase
  {
    public override string Documentation
    {
      get { return "Disable all multipath for the specified constellation."; }
    }

    internal const string CmdName = "RemoveAllMultipathForSystem";

    public RemoveAllMultipathForSystem()
      : base(CmdName)
    {}

    public RemoveAllMultipathForSystem(string system, bool reset)
      : base(CmdName)
    {
      System = system;
      Reset = reset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Reset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Reset
    {
      get { return GetValue("Reset").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Reset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get multipath infos for the specified multipath ID.
  ///
  /// Name Type   Description
  /// ---- ------ --------------
  /// Id   string A multipath ID
  ///

  public class GetMultipathForID : CommandBase
  {
    public override string Documentation
    {
      get { return "Get multipath infos for the specified multipath ID."; }
    }

    internal const string CmdName = "GetMultipathForID";

    public GetMultipathForID()
      : base(CmdName)
    {}

    public GetMultipathForID(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMultipathForID.
  ///
  /// Name         Type   Description
  /// ------------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Id           string A multipath ID
  /// System       string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Signal       string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  /// SvId         int    The satellite's SV ID
  /// PowerLoss    double Power loss in dB (value must be positive)
  /// Pseudorange  double Pseudorange offset in meters (value must be positive)
  /// Doppler      double Doppler frequency offset in Hz
  /// CarrierPhase double Carrier phase offset in radians
  /// Echo         int    Echo number [1..3], or use zero to let Skydel assign an echo number.
  ///

  public class GetMultipathForIDResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMultipathForID."; }
    }

    internal const string CmdName = "GetMultipathForIDResult";

    public GetMultipathForIDResult()
      : base(CmdName)
    {}

    public GetMultipathForIDResult(CommandBase relatedCommand, string id, string system, string signal, int svId, double powerLoss, double pseudorange, double doppler, double carrierPhase, int echo)
      : base(CmdName, relatedCommand)
    {
      Id = id;
      System = system;
      Signal = signal;
      SvId = svId;
      PowerLoss = powerLoss;
      Pseudorange = pseudorange;
      Doppler = doppler;
      CarrierPhase = carrierPhase;
      Echo = echo;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
        && Contains("System")
        && Contains("Signal")
        && Contains("SvId")
        && Contains("PowerLoss")
        && Contains("Pseudorange")
        && Contains("Doppler")
        && Contains("CarrierPhase")
        && Contains("Echo")
      ;
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PowerLoss
    {
      get { return GetValue("PowerLoss").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PowerLoss", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pseudorange
    {
      get { return GetValue("Pseudorange").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pseudorange", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Doppler
    {
      get { return GetValue("Doppler").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Doppler", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CarrierPhase
    {
      get { return GetValue("CarrierPhase").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CarrierPhase", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Echo
    {
      get { return GetValue("Echo").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Echo", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all multipath ID for the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetAllMultipathForSystem : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all multipath ID for the specified constellation."; }
    }

    internal const string CmdName = "GetAllMultipathForSystem";

    public GetAllMultipathForSystem()
      : base(CmdName)
    {}

    public GetAllMultipathForSystem(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all multipath ID for the specified satellite of the constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID
  ///

  public class GetAllMultipathForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all multipath ID for the specified satellite of the constellation."; }
    }

    internal const string CmdName = "GetAllMultipathForSV";

    public GetAllMultipathForSV()
      : base(CmdName)
    {}

    public GetAllMultipathForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all multipath ID for the specified signal.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// Signal string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S", "NAVICL5"
  ///

  public class GetAllMultipathForSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all multipath ID for the specified signal."; }
    }

    internal const string CmdName = "GetAllMultipathForSignal";

    public GetAllMultipathForSignal()
      : base(CmdName)
    {}

    public GetAllMultipathForSignal(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllMultipathFor(Signal|SV|System) commands.
  ///
  /// Name Type         Description
  /// ---- ------------ ------------------------------------------------------
  /// Ids  array string IDs of multipaths for the specified argument in getter
  ///

  public class GetAllMultipathForResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllMultipathFor(Signal|SV|System) commands."; }
    }

    internal const string CmdName = "GetAllMultipathForResult";

    public GetAllMultipathForResult()
      : base(CmdName)
    {}

    public GetAllMultipathForResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID
  /// Enabled bool   Direct Line of Sight enabled or not
  ///

  public class EnableLosForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible."; }
    }

    internal const string CmdName = "EnableLosForSV";

    public EnableLosForSV()
      : base(CmdName)
    {}

    public EnableLosForSV(string system, int svId, bool enabled)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID
  ///

  public class IsLosEnabledForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Direct Line Of Sight signal from satellite enabled or disabled. Generally used when only multipaths signal is visible."; }
    }

    internal const string CmdName = "IsLosEnabledForSV";

    public IsLosEnabledForSV()
      : base(CmdName)
    {}

    public IsLosEnabledForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsLosEnabledForSV.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID
  /// Enabled bool   Direct Line of Sight enabled or not
  ///

  public class IsLosEnabledForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLosEnabledForSV."; }
    }

    internal const string CmdName = "IsLosEnabledForSVResult";

    public IsLosEnabledForSVResult()
      : base(CmdName)
    {}

    public IsLosEnabledForSVResult(CommandBase relatedCommand, string system, int svId, bool enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable Direct Line of Sight (LoS) of all satellites for the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class ClearAllLOSForSystem : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable Direct Line of Sight (LoS) of all satellites for the specified constellation."; }
    }

    internal const string CmdName = "ClearAllLOSForSystem";

    public ClearAllLOSForSystem()
      : base(CmdName)
    {}

    public ClearAllLOSForSystem(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.
  ///
  /// Name    Type       Description
  /// ------- ---------- -----------------------------------------------------------------------------------------------------------
  /// System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).
  ///

  public class EnableLosForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible."; }
    }

    internal const string CmdName = "EnableLosForEachSV";

    public EnableLosForEachSV()
      : base(CmdName)
    {}

    public EnableLosForEachSV(string system, List<bool> enabled)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class IsLOSEnabledForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Direct Line Of Sight signal from satellite disabled or enabled. Generally used when only multipaths signal is visible."; }
    }

    internal const string CmdName = "IsLOSEnabledForEachSV";

    public IsLOSEnabledForEachSV()
      : base(CmdName)
    {}

    public IsLOSEnabledForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsLOSEnabledForEachSV.
  ///
  /// Name    Type       Description
  /// ------- ---------- -----------------------------------------------------------------------------------------------------------
  /// System  string     "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool Direct Line of Sight enabled or not. Zero based index (index 0 => SV ID 1, index 1 => second SV ID 2, etc).
  ///

  public class IsLOSEnabledForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsLOSEnabledForEachSV."; }
    }

    internal const string CmdName = "IsLOSEnabledForEachSVResult";

    public IsLOSEnabledForEachSVResult()
      : base(CmdName)
    {}

    public IsLOSEnabledForEachSVResult(CommandBase relatedCommand, string system, List<bool> enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add a plug-in instance of specified type.
  ///
  /// Name Type   Description
  /// ---- ------ -------------------------------------
  /// Name string Unique name for the plug-in instance.
  /// Type string Type of the plug-in instance.
  ///

  public class AddPlugInInstance : CommandBase
  {
    public override string Documentation
    {
      get { return "Add a plug-in instance of specified type."; }
    }

    internal const string CmdName = "AddPlugInInstance";

    public AddPlugInInstance()
      : base(CmdName)
    {}

    public AddPlugInInstance(string name, string type)
      : base(CmdName)
    {
      Name = name;
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
        && Contains("Type")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the plug-in instance.
  ///
  /// Name Type   Description
  /// ---- ------ -----------------------------
  /// Name string Plug-in instance unique name.
  ///

  public class RemovePlugInInstance : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the plug-in instance."; }
    }

    internal const string CmdName = "RemovePlugInInstance";

    public RemovePlugInInstance()
      : base(CmdName)
    {}

    public RemovePlugInInstance(string name)
      : base(CmdName)
    {
      Name = name;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Name")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public new string Name
    {
      get { return GetValue("Name").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Name", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set wether by default transmitters should keep the modification done during simulation.
  ///
  /// Name         Type Description
  /// ------------ ---- --------------------------------------------------------------------------------
  /// DefaultValue bool True if jammers should keep the modifications done during simulation by default.
  ///

  public class SetDefaultIntTxPersistence : CommandBase
  {
    public override string Documentation
    {
      get { return "Set wether by default transmitters should keep the modification done during simulation."; }
    }

    internal const string CmdName = "SetDefaultIntTxPersistence";

    public SetDefaultIntTxPersistence()
      : base(CmdName)
    {}

    public SetDefaultIntTxPersistence(bool defaultValue)
      : base(CmdName)
    {
      DefaultValue = defaultValue;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("DefaultValue")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool DefaultValue
    {
      get { return GetValue("DefaultValue").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("DefaultValue", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get wether by default transmitters should keep the modification done during simulation.
  ///
  /// 
  ///

  public class GetDefaultIntTxPersistence : CommandBase
  {
    public override string Documentation
    {
      get { return "Get wether by default transmitters should keep the modification done during simulation."; }
    }

    internal const string CmdName = "GetDefaultIntTxPersistence";

    public GetDefaultIntTxPersistence()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetDefaultIntTxPersistence.
  ///
  /// Name         Type Description
  /// ------------ ---- --------------------------------------------------------------------------------
  /// DefaultValue bool True if jammers should keep the modifications done during simulation by default.
  ///

  public class GetDefaultIntTxPersistenceResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetDefaultIntTxPersistence."; }
    }

    internal const string CmdName = "GetDefaultIntTxPersistenceResult";

    public GetDefaultIntTxPersistenceResult()
      : base(CmdName)
    {}

    public GetDefaultIntTxPersistenceResult(CommandBase relatedCommand, bool defaultValue)
      : base(CmdName, relatedCommand)
    {
      DefaultValue = defaultValue;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("DefaultValue")
      ;
      }
    }

    public bool DefaultValue
    {
      get { return GetValue("DefaultValue").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("DefaultValue", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the ID of all interferences transmitters.
  ///
  /// 
  ///

  public class GetAllIntTxID : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the ID of all interferences transmitters."; }
    }

    internal const string CmdName = "GetAllIntTxID";

    public GetAllIntTxID()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetAllIntTxID.
  ///
  /// Name Type         Description
  /// ---- ------------ ------------------------------------------
  /// Ids  array string ID list of all interferences transmitters.
  ///

  public class GetAllIntTxIDResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllIntTxID."; }
    }

    internal const string CmdName = "GetAllIntTxIDResult";

    public GetAllIntTxIDResult()
      : base(CmdName)
    {}

    public GetAllIntTxIDResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set an interference transmitter. If the transmitter ID parameter is not set (empty string),
  /// Skydel will assign a unique ID to the transmitter. If the ID is set and already used by Skydel, the
  /// command will fail.
  ///
  /// Name      Type   Description
  /// --------- ------ ----------------------------------------------------------------------------------------
  /// UsualName string Usual name for the transmitter.
  /// Enabled   bool   Enable (true) or disable (false) the transmitter
  /// Group     int    Interference group number [1..16]
  /// Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
  /// Power     double Set the transmitter reference power
  /// Id        string Transmitter unique identifier.
  ///

  public class AddIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Set an interference transmitter. If the transmitter ID parameter is not set (empty string),\nSkydel will assign a unique ID to the transmitter. If the ID is set and already used by Skydel, the\ncommand will fail."; }
    }

    internal const string CmdName = "AddIntTx";

    public AddIntTx()
      : base(CmdName)
    {}

    public AddIntTx(string usualName, bool enabled, int group, bool dynamic, double power, string id)
      : base(CmdName)
    {
      UsualName = usualName;
      Enabled = enabled;
      Group = group;
      Dynamic = dynamic;
      Power = power;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Enabled")
        && Contains("Group")
        && Contains("Dynamic")
        && Contains("Power")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Dynamic
    {
      get { return GetValue("Dynamic").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Dynamic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get an interference transmitter.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Get an interference transmitter."; }
    }

    internal const string CmdName = "GetIntTx";

    public GetIntTx()
      : base(CmdName)
    {}

    public GetIntTx(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTx.
  ///
  /// Name      Type   Description
  /// --------- ------ ----------------------------------------------------------------------------------------
  /// UsualName string Usual name for the transmitter.
  /// Enabled   bool   Enable (true) or disable (false) the transmitter
  /// Group     int    Interference group number [1..16]
  /// Dynamic   bool   Set to true for a dynamic transmitter (propagation loss and doppler shift are simulated)
  /// Power     double Set the transmitter reference power
  /// Id        string Transmitter unique identifier.
  ///

  public class GetIntTxResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTx."; }
    }

    internal const string CmdName = "GetIntTxResult";

    public GetIntTxResult()
      : base(CmdName)
    {}

    public GetIntTxResult(CommandBase relatedCommand, string usualName, bool enabled, int group, bool dynamic, double power, string id)
      : base(CmdName, relatedCommand)
    {
      UsualName = usualName;
      Enabled = enabled;
      Group = group;
      Dynamic = dynamic;
      Power = power;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Enabled")
        && Contains("Group")
        && Contains("Dynamic")
        && Contains("Power")
        && Contains("Id")
      ;
      }
    }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Dynamic
    {
      get { return GetValue("Dynamic").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Dynamic", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Rename a transmitter.
  ///
  /// Name      Type   Description
  /// --------- ------ -------------------------------
  /// UsualName string Usual name for the transmitter.
  /// Id        string Transmitter unique identifier.
  ///

  public class RenameIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Rename a transmitter."; }
    }

    internal const string CmdName = "RenameIntTx";

    public RenameIntTx()
      : base(CmdName)
    {}

    public RenameIntTx(string usualName, string id)
      : base(CmdName)
    {
      UsualName = usualName;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set a transmitter color in spectrums
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------------------------------------------------------
  /// Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
  /// Id    string Transmitter unique identifier.
  ///

  public class ChangeIntTxColor : CommandBase
  {
    public override string Documentation
    {
      get { return "Set a transmitter color in spectrums"; }
    }

    internal const string CmdName = "ChangeIntTxColor";

    public ChangeIntTxColor()
      : base(CmdName)
    {}

    public ChangeIntTxColor(string color, string id)
      : base(CmdName)
    {
      Color = color;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Color")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Color
    {
      get { return GetValue("Color").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Color", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a transmitter color in spectrums
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxColor : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a transmitter color in spectrums"; }
    }

    internal const string CmdName = "GetIntTxColor";

    public GetIntTxColor()
      : base(CmdName)
    {}

    public GetIntTxColor(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxColor.
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------------------------------------------------------
  /// Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
  /// Id    string Transmitter unique identifier.
  ///

  public class GetIntTxColorResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxColor."; }
    }

    internal const string CmdName = "GetIntTxColorResult";

    public GetIntTxColorResult()
      : base(CmdName)
    {}

    public GetIntTxColorResult(CommandBase relatedCommand, string color, string id)
      : base(CmdName, relatedCommand)
    {
      Color = color;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Color")
        && Contains("Id")
      ;
      }
    }

    public string Color
    {
      get { return GetValue("Color").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Color", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable/Disable the interference transmitter.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------
  /// Enabled bool   Enable (true) or disable (false) the transmitter
  /// Id      string Transmitter unique identifier.
  ///

  public class EnableIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable/Disable the interference transmitter."; }
    }

    internal const string CmdName = "EnableIntTx";

    public EnableIntTx()
      : base(CmdName)
    {}

    public EnableIntTx(bool enabled, string id)
      : base(CmdName)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the interference transmitter group (which links to a specific RF output target).
  ///
  /// Name  Type   Description
  /// ----- ------ ---------------------------------
  /// Group int    Interference group number [1..16]
  /// Id    string Transmitter unique identifier.
  ///

  public class SetIntTxGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the interference transmitter group (which links to a specific RF output target)."; }
    }

    internal const string CmdName = "SetIntTxGroup";

    public SetIntTxGroup()
      : base(CmdName)
    {}

    public SetIntTxGroup(int group, string id)
      : base(CmdName)
    {
      Group = group;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Group")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public int Group
    {
      get { return GetValue("Group").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the interference transmitter reference power.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Power double Reference Power (dBm)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetIntTxRefPower : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the interference transmitter reference power."; }
    }

    internal const string CmdName = "SetIntTxRefPower";

    public SetIntTxRefPower()
      : base(CmdName)
    {}

    public SetIntTxRefPower(double power, string id)
      : base(CmdName)
    {
      Power = power;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Power")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set wether the transmitter should keep the modifications done during the simulation.
  ///
  /// Name        Type   Description
  /// ----------- ------ ------------------------------------------------------
  /// Persistence bool   True to keep the modifications, false to discard them.
  /// Id          string Transmitter unique identifier.
  ///

  public class SetIntTxPersistence : CommandBase
  {
    public override string Documentation
    {
      get { return "Set wether the transmitter should keep the modifications done during the simulation."; }
    }

    internal const string CmdName = "SetIntTxPersistence";

    public SetIntTxPersistence()
      : base(CmdName)
    {}

    public SetIntTxPersistence(bool persistence, string id)
      : base(CmdName)
    {
      Persistence = persistence;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Persistence")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Persistence
    {
      get { return GetValue("Persistence").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Persistence", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get wether the transmitter should keep the modifications done during the simulation.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxPersistence : CommandBase
  {
    public override string Documentation
    {
      get { return "Get wether the transmitter should keep the modifications done during the simulation."; }
    }

    internal const string CmdName = "GetIntTxPersistence";

    public GetIntTxPersistence()
      : base(CmdName)
    {}

    public GetIntTxPersistence(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxPersistence.
  ///
  /// Name        Type   Description
  /// ----------- ------ ------------------------------------------------------
  /// Persistence bool   True to keep the modifications, false to discard them.
  /// Id          string Transmitter unique identifier.
  ///

  public class GetIntTxPersistenceResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxPersistence."; }
    }

    internal const string CmdName = "GetIntTxPersistenceResult";

    public GetIntTxPersistenceResult()
      : base(CmdName)
    {}

    public GetIntTxPersistenceResult(CommandBase relatedCommand, bool persistence, string id)
      : base(CmdName, relatedCommand)
    {
      Persistence = persistence;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Persistence")
        && Contains("Id")
      ;
      }
    }

    public bool Persistence
    {
      get { return GetValue("Persistence").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Persistence", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the manual propagation loss for the given interference signal. Value is used only if SetIntTxUseManualPropagationLoss has been set on the corresponding transmitter. This value is not preserved after simulation end.
  ///
  /// Name            Type   Description
  /// --------------- ------ --------------------------------------------------------------------------------------------------------
  /// PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
  /// TransmitterId   string Transmitter unique identifier.
  /// SignalId        string Signal unique identifier.
  ///

  public class SetIntTxSignalManualPropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the manual propagation loss for the given interference signal. Value is used only if SetIntTxUseManualPropagationLoss has been set on the corresponding transmitter. This value is not preserved after simulation end."; }
    }

    internal const string CmdName = "SetIntTxSignalManualPropagationLoss";

    public SetIntTxSignalManualPropagationLoss()
      : base(CmdName)
    {}

    public SetIntTxSignalManualPropagationLoss(double propagationLoss, string transmitterId, string signalId)
      : base(CmdName)
    {
      PropagationLoss = propagationLoss;
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PropagationLoss")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double PropagationLoss
    {
      get { return GetValue("PropagationLoss").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PropagationLoss", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a dynamic transmitter should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Manual bool   If true, propagation loss will be 1000 dB until set manually.
  /// Id     string Interference transmitter unique identifier.
  ///

  public class SetIntTxUseManualPropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a dynamic transmitter should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end."; }
    }

    internal const string CmdName = "SetIntTxUseManualPropagationLoss";

    public SetIntTxUseManualPropagationLoss()
      : base(CmdName)
    {}

    public SetIntTxUseManualPropagationLoss(bool manual, string id)
      : base(CmdName)
    {
      Manual = manual;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Manual")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Manual
    {
      get { return GetValue("Manual").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Manual", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a dynamic transmitter should ignore propagation loss or not.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------------------------------
  /// Ignore bool   If true, propagation loss will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetIntTxIgnorePropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a dynamic transmitter should ignore propagation loss or not."; }
    }

    internal const string CmdName = "SetIntTxIgnorePropagationLoss";

    public SetIntTxIgnorePropagationLoss()
      : base(CmdName)
    {}

    public SetIntTxIgnorePropagationLoss(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetIntTxIgnoreVehicleAntennaPattern is deprecated since 20.2. You may use SetIntTxIgnoreRxAntennaPatterns.
  /// 
  /// Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------
  /// Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetIntTxIgnoreVehicleAntennaPattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetIntTxIgnoreVehicleAntennaPattern is deprecated since 20.2. You may use SetIntTxIgnoreRxAntennaPatterns.\n\nSet whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase)."; }
    }

    internal const string CmdName = "SetIntTxIgnoreVehicleAntennaPattern";

    public SetIntTxIgnoreVehicleAntennaPattern()
      : base(CmdName)
    {}

    public SetIntTxIgnoreVehicleAntennaPattern(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase).
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------------------
  /// Ignore bool   If true, the vehicle's antenna patterns (gain and phase) will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetIntTxIgnoreRxAntennaPatterns : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a dynamic transmitter should ignore the vehicle's antenna patterns (gain and phase)."; }
    }

    internal const string CmdName = "SetIntTxIgnoreRxAntennaPatterns";

    public SetIntTxIgnoreRxAntennaPatterns()
      : base(CmdName)
    {}

    public SetIntTxIgnoreRxAntennaPatterns(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a transmitter should be hidden on the map.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------
  /// HiddenOnMap bool   If true, transmitter will be hidden on the map.
  /// Id          string Transmitter unique identifier.
  ///

  public class SetIntTxHiddenOnMap : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a transmitter should be hidden on the map."; }
    }

    internal const string CmdName = "SetIntTxHiddenOnMap";

    public SetIntTxHiddenOnMap()
      : base(CmdName)
    {}

    public SetIntTxHiddenOnMap(bool hiddenOnMap, string id)
      : base(CmdName)
    {
      HiddenOnMap = hiddenOnMap;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("HiddenOnMap")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool HiddenOnMap
    {
      get { return GetValue("HiddenOnMap").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("HiddenOnMap", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a transmitter should be hidden on the map.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxHiddenOnMap : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a transmitter should be hidden on the map."; }
    }

    internal const string CmdName = "GetIntTxHiddenOnMap";

    public GetIntTxHiddenOnMap()
      : base(CmdName)
    {}

    public GetIntTxHiddenOnMap(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxHiddenOnMap.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------
  /// HiddenOnMap bool   If true, transmitter will be hidden on the map.
  /// Id          string Transmitter unique identifier.
  ///

  public class GetIntTxHiddenOnMapResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxHiddenOnMap."; }
    }

    internal const string CmdName = "GetIntTxHiddenOnMapResult";

    public GetIntTxHiddenOnMapResult()
      : base(CmdName)
    {}

    public GetIntTxHiddenOnMapResult(CommandBase relatedCommand, bool hiddenOnMap, string id)
      : base(CmdName, relatedCommand)
    {
      HiddenOnMap = hiddenOnMap;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("HiddenOnMap")
        && Contains("Id")
      ;
      }
    }

    public bool HiddenOnMap
    {
      get { return GetValue("HiddenOnMap").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("HiddenOnMap", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a dynamic transmitter should ignore the receiver's antenna gain pattern.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetIntTxIgnoreRxAntennaGainPattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a dynamic transmitter should ignore the receiver's antenna gain pattern."; }
    }

    internal const string CmdName = "SetIntTxIgnoreRxAntennaGainPattern";

    public SetIntTxIgnoreRxAntennaGainPattern()
      : base(CmdName)
    {}

    public SetIntTxIgnoreRxAntennaGainPattern(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a dynamic transmitter ignore the receiver's antenna gain pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsIntTxIgnoreRxAntennaGainPattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a dynamic transmitter ignore the receiver's antenna gain pattern."; }
    }

    internal const string CmdName = "IsIntTxIgnoreRxAntennaGainPattern";

    public IsIntTxIgnoreRxAntennaGainPattern()
      : base(CmdName)
    {}

    public IsIntTxIgnoreRxAntennaGainPattern(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsIntTxIgnoreRxAntennaGainPattern.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class IsIntTxIgnoreRxAntennaGainPatternResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsIntTxIgnoreRxAntennaGainPattern."; }
    }

    internal const string CmdName = "IsIntTxIgnoreRxAntennaGainPatternResult";

    public IsIntTxIgnoreRxAntennaGainPatternResult()
      : base(CmdName)
    {}

    public IsIntTxIgnoreRxAntennaGainPatternResult(CommandBase relatedCommand, bool ignore, string id)
      : base(CmdName, relatedCommand)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a dynamic transmitter should ignore the receiver's antenna phase pattern.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetIntTxIgnoreRxAntennaPhasePattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a dynamic transmitter should ignore the receiver's antenna phase pattern."; }
    }

    internal const string CmdName = "SetIntTxIgnoreRxAntennaPhasePattern";

    public SetIntTxIgnoreRxAntennaPhasePattern()
      : base(CmdName)
    {}

    public SetIntTxIgnoreRxAntennaPhasePattern(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a dynamic transmitter ignore the receiver's antenna phase pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsIntTxIgnoreRxAntennaPhasePattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a dynamic transmitter ignore the receiver's antenna phase pattern."; }
    }

    internal const string CmdName = "IsIntTxIgnoreRxAntennaPhasePattern";

    public IsIntTxIgnoreRxAntennaPhasePattern()
      : base(CmdName)
    {}

    public IsIntTxIgnoreRxAntennaPhasePattern(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsIntTxIgnoreRxAntennaPhasePattern.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class IsIntTxIgnoreRxAntennaPhasePatternResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsIntTxIgnoreRxAntennaPhasePattern."; }
    }

    internal const string CmdName = "IsIntTxIgnoreRxAntennaPhasePatternResult";

    public IsIntTxIgnoreRxAntennaPhasePatternResult()
      : base(CmdName)
    {}

    public IsIntTxIgnoreRxAntennaPhasePatternResult(CommandBase relatedCommand, bool ignore, string id)
      : base(CmdName, relatedCommand)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set an undefined trajectory to a transmitter, thus preventing it to be modulated (default value).
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class SetIntTxNone : CommandBase
  {
    public override string Documentation
    {
      get { return "Set an undefined trajectory to a transmitter, thus preventing it to be modulated (default value)."; }
    }

    internal const string CmdName = "SetIntTxNone";

    public SetIntTxNone()
      : base(CmdName)
    {}

    public SetIntTxNone(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set interference transmitter static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetIntTxFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Set interference transmitter static position and orientation"; }
    }

    internal const string CmdName = "SetIntTxFix";

    public SetIntTxFix()
      : base(CmdName)
    {}

    public SetIntTxFix(double lat, double lon, double alt, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get interference transmitter static position and orientation
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Get interference transmitter static position and orientation"; }
    }

    internal const string CmdName = "GetIntTxFix";

    public GetIntTxFix()
      : base(CmdName)
    {}

    public GetIntTxFix(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxFix.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class GetIntTxFixResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxFix."; }
    }

    internal const string CmdName = "GetIntTxFixResult";

    public GetIntTxFixResult()
      : base(CmdName)
    {}

    public GetIntTxFixResult(CommandBase relatedCommand, double lat, double lon, double alt, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set interference transmitter static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetIntTxFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Set interference transmitter static position and orientation"; }
    }

    internal const string CmdName = "SetIntTxFixEcef";

    public SetIntTxFixEcef()
      : base(CmdName)
    {}

    public SetIntTxFixEcef(double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get interference transmitter static position and orientation
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Get interference transmitter static position and orientation"; }
    }

    internal const string CmdName = "GetIntTxFixEcef";

    public GetIntTxFixEcef()
      : base(CmdName)
    {}

    public GetIntTxFixEcef(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxFixEcef.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class GetIntTxFixEcefResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxFixEcef."; }
    }

    internal const string CmdName = "GetIntTxFixEcefResult";

    public GetIntTxFixEcefResult()
      : base(CmdName)
    {}

    public GetIntTxFixEcefResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set interference transmitter circular trajectory
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// Id          string          Transmitter unique identifier.
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class SetIntTxCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Set interference transmitter circular trajectory"; }
    }

    internal const string CmdName = "SetIntTxCircular";

    public SetIntTxCircular()
      : base(CmdName)
    {}

    public SetIntTxCircular(double lat, double lon, double alt, double radius, double speed, bool clockwise, string id, double? originAngle = null)
      : base(CmdName)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      Id = id;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get interference transmitter circular trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Get interference transmitter circular trajectory"; }
    }

    internal const string CmdName = "GetIntTxCircular";

    public GetIntTxCircular()
      : base(CmdName)
    {}

    public GetIntTxCircular(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxCircular.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// Id          string          Transmitter unique identifier.
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class GetIntTxCircularResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxCircular."; }
    }

    internal const string CmdName = "GetIntTxCircularResult";

    public GetIntTxCircularResult()
      : base(CmdName)
    {}

    public GetIntTxCircularResult(CommandBase relatedCommand, double lat, double lon, double alt, double radius, double speed, bool clockwise, string id, double? originAngle = null)
      : base(CmdName, relatedCommand)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      Id = id;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
        && Contains("Id")
      ;
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set interference transmitter HIL trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class SetIntTxHil : CommandBase
  {
    public override string Documentation
    {
      get { return "Set interference transmitter HIL trajectory"; }
    }

    internal const string CmdName = "SetIntTxHil";

    public SetIntTxHil()
      : base(CmdName)
    {}

    public SetIntTxHil(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Begins a new interference track definition. Actual track remains unchanged until
  /// EndIntTxTrackDefinition command is sent and successful. After this command, the
  /// client must push time and position pairs to form a complete track. Once all the
  /// positions are sent, the client must send the command EndIntTxTrackDefinition.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class BeginIntTxTrackDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "Begins a new interference track definition. Actual track remains unchanged until\nEndIntTxTrackDefinition command is sent and successful. After this command, the\nclient must push time and position pairs to form a complete track. Once all the\npositions are sent, the client must send the command EndIntTxTrackDefinition."; }
    }

    internal const string CmdName = "BeginIntTxTrackDefinition";

    public BeginIntTxTrackDefinition()
      : base(CmdName)
    {}

    public BeginIntTxTrackDefinition(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Push an interference track ecef node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------------------
  /// Time int    Node Timestamp in miliseconds
  /// X    double X distance from earth-center in meters
  /// Y    double Y distance from earth-center in meters
  /// Z    double Z distance from earth-center in meters
  /// Id   string Transmitter unique identifier.
  ///

  public class PushIntTxTrackEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Push an interference track ecef node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition."; }
    }

    internal const string CmdName = "PushIntTxTrackEcef";

    public PushIntTxTrackEcef()
      : base(CmdName)
    {}

    public PushIntTxTrackEcef(int time, double x, double y, double z, string id)
      : base(CmdName)
    {
      Time = time;
      X = x;
      Y = y;
      Z = z;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Time
    {
      get { return GetValue("Time").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Push an interference track ecef and ned attitude node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// Time  int    Node Timestamp in miliseconds
  /// X     double X distance from earth-center in meters
  /// Y     double Y distance from earth-center in meters
  /// Z     double Z distance from earth-center in meters
  /// Yaw   double Yaw in radians
  /// Pitch double Pitch in radians
  /// Roll  double Roll in radians
  /// Id    string Transmitter unique identifier.
  ///

  public class PushIntTxTrackEcefNed : CommandBase
  {
    public override string Documentation
    {
      get { return "Push an interference track ecef and ned attitude node. Must be called after BeginIntTxTrackDefinition and before EndIntTxTrackDefinition."; }
    }

    internal const string CmdName = "PushIntTxTrackEcefNed";

    public PushIntTxTrackEcefNed()
      : base(CmdName)
    {}

    public PushIntTxTrackEcefNed(int time, double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      Time = time;
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Time
    {
      get { return GetValue("Time").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// This command completes the track started with BeginIntTxTrackDefinition command. If
  /// the track is accepted, the current track in the configuration is replaced with
  /// this new track. If the track is not accepted, the current track in the config
  /// remains unchanged.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class EndIntTxTrackDefinition : CommandBase
  {
    public override string Documentation
    {
      get { return "This command completes the track started with BeginIntTxTrackDefinition command. If\nthe track is accepted, the current track in the configuration is replaced with\nthis new track. If the track is not accepted, the current track in the config\nremains unchanged."; }
    }

    internal const string CmdName = "EndIntTxTrackDefinition";

    public EndIntTxTrackDefinition()
      : base(CmdName)
    {}

    public EndIntTxTrackDefinition(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// EndIntTxTrackDefinition Result with created track informations.
  ///
  /// Name  Type   Description
  /// ----- ------ ----------------------------------------------------------------------------------------------------
  /// Count int    Number of nodes in the track. The client can compare this value with the number of positions pushed.
  /// Id    string Transmitter unique identifier.
  ///

  public class EndIntTxTrackDefinitionResult : CommandResult
  {
    public override string Documentation
    {
      get { return "EndIntTxTrackDefinition Result with created track informations."; }
    }

    internal const string CmdName = "EndIntTxTrackDefinitionResult";

    public EndIntTxTrackDefinitionResult()
      : base(CmdName)
    {}

    public EndIntTxTrackDefinitionResult(CommandBase relatedCommand, int count, string id)
      : base(CmdName, relatedCommand)
    {
      Count = count;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Count")
        && Contains("Id")
      ;
      }
    }

    public int Count
    {
      get { return GetValue("Count").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Count", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import NMEA interference track file
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Path string NMEA file path
  /// Id   string Transmitter unique identifier.
  ///

  public class ImportNmeaIntTxTrack : CommandBase
  {
    public override string Documentation
    {
      get { return "Import NMEA interference track file"; }
    }

    internal const string CmdName = "ImportNmeaIntTxTrack";

    public ImportNmeaIntTxTrack()
      : base(CmdName)
    {}

    public ImportNmeaIntTxTrack(string path, string id)
      : base(CmdName)
    {
      Path = path;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set trajectory smoothing for interference Track enabled or disabled
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------
  /// Enabled bool   If true, interference trajectory will be smoothed during simulation
  /// Id      string Transmitter unique identifier.
  ///

  public class EnableIntTxTrajectorySmoothing : CommandBase
  {
    public override string Documentation
    {
      get { return "Set trajectory smoothing for interference Track enabled or disabled"; }
    }

    internal const string CmdName = "EnableIntTxTrajectorySmoothing";

    public EnableIntTxTrajectorySmoothing()
      : base(CmdName)
    {}

    public EnableIntTxTrajectorySmoothing(bool enabled, string id)
      : base(CmdName)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get trajectory smoothing for interference Track enabled or disabled
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsIntTxTrajectorySmoothingEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get trajectory smoothing for interference Track enabled or disabled"; }
    }

    internal const string CmdName = "IsIntTxTrajectorySmoothingEnabled";

    public IsIntTxTrajectorySmoothingEnabled()
      : base(CmdName)
    {}

    public IsIntTxTrajectorySmoothingEnabled(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsIntTxTrajectorySmoothingEnabled.
  ///
  /// Name    Type   Description
  /// ------- ------ -------------------------------------------------------------------
  /// Enabled bool   If true, interference trajectory will be smoothed during simulation
  /// Id      string Transmitter unique identifier.
  ///

  public class IsIntTxTrajectorySmoothingEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsIntTxTrajectorySmoothingEnabled."; }
    }

    internal const string CmdName = "IsIntTxTrajectorySmoothingEnabledResult";

    public IsIntTxTrajectorySmoothingEnabledResult()
      : base(CmdName)
    {}

    public IsIntTxTrajectorySmoothingEnabledResult(CommandBase relatedCommand, bool enabled, string id)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set force interference vehicle yaw, pitch and roll to zero enabled or disabled
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------------------
  /// Enabled bool   If true, interference vehicle won't rotate during simulation
  /// Id      string Transmitter unique identifier.
  ///

  public class ForceIntTxAttitudeToZero : CommandBase
  {
    public override string Documentation
    {
      get { return "Set force interference vehicle yaw, pitch and roll to zero enabled or disabled"; }
    }

    internal const string CmdName = "ForceIntTxAttitudeToZero";

    public ForceIntTxAttitudeToZero()
      : base(CmdName)
    {}

    public ForceIntTxAttitudeToZero(bool enabled, string id)
      : base(CmdName)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get force interference vehicle yaw, pitch and roll to zero enabled or disabled
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsIntTxAttitudeToZeroForced : CommandBase
  {
    public override string Documentation
    {
      get { return "Get force interference vehicle yaw, pitch and roll to zero enabled or disabled"; }
    }

    internal const string CmdName = "IsIntTxAttitudeToZeroForced";

    public IsIntTxAttitudeToZeroForced()
      : base(CmdName)
    {}

    public IsIntTxAttitudeToZeroForced(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsIntTxAttitudeToZeroForced.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------------------
  /// Enabled bool   If true, interference vehicle won't rotate during simulation
  /// Id      string Transmitter unique identifier.
  ///

  public class IsIntTxAttitudeToZeroForcedResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsIntTxAttitudeToZeroForced."; }
    }

    internal const string CmdName = "IsIntTxAttitudeToZeroForcedResult";

    public IsIntTxAttitudeToZeroForcedResult()
      : base(CmdName)
    {}

    public IsIntTxAttitudeToZeroForcedResult(CommandBase relatedCommand, bool enabled, string id)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Set interference vehicle type for Track Trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------------------
  /// Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
  /// Id   string Transmitter unique identifier.
  ///

  public class SetIntTxVehicleType : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Set interference vehicle type for Track Trajectory"; }
    }

    internal const string CmdName = "SetIntTxVehicleType";

    public SetIntTxVehicleType()
      : base(CmdName)
    {}

    public SetIntTxVehicleType(string type, string id)
      : base(CmdName)
    {
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Set interference vehicle type for Track Trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxVehicleType : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Set interference vehicle type for Track Trajectory"; }
    }

    internal const string CmdName = "GetIntTxVehicleType";

    public GetIntTxVehicleType()
      : base(CmdName)
    {}

    public GetIntTxVehicleType(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxVehicleType.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------------------
  /// Type string Vehicle type ("Ground / Water" or "Airborne / Spaceborne")
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxVehicleTypeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxVehicleType."; }
    }

    internal const string CmdName = "GetIntTxVehicleTypeResult";

    public GetIntTxVehicleTypeResult()
      : base(CmdName)
    {}

    public GetIntTxVehicleTypeResult(CommandBase relatedCommand, string type, string id)
      : base(CmdName, relatedCommand)
    {
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get interference transmitter trajectory.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxTrajectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Get interference transmitter trajectory."; }
    }

    internal const string CmdName = "GetIntTxTrajectory";

    public GetIntTxTrajectory()
      : base(CmdName)
    {}

    public GetIntTxTrajectory(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxTrajectory.
  ///
  /// Name           Type   Description
  /// -------------- ------ ---------------------------------------------------------
  /// TrajectoryType string Type of the trajectory of the interferences transmitters.
  /// Id             string Transmitter unique identifier.
  ///

  public class GetIntTxTrajectoryResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxTrajectory."; }
    }

    internal const string CmdName = "GetIntTxTrajectoryResult";

    public GetIntTxTrajectoryResult()
      : base(CmdName)
    {}

    public GetIntTxTrajectoryResult(CommandBase relatedCommand, string trajectoryType, string id)
      : base(CmdName, relatedCommand)
    {
      TrajectoryType = trajectoryType;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TrajectoryType")
        && Contains("Id")
      ;
      }
    }

    public string TrajectoryType
    {
      get { return GetValue("TrajectoryType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TrajectoryType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set transmitter antenna pattern.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Id   string             Transmitter unique identifier.
  ///

  public class SetIntTxAntenna : CommandBase
  {
    public override string Documentation
    {
      get { return "Set transmitter antenna pattern."; }
    }

    internal const string CmdName = "SetIntTxAntenna";

    public SetIntTxAntenna()
      : base(CmdName)
    {}

    public SetIntTxAntenna(List<List<double>> gain, AntennaPatternType type, string id)
      : base(CmdName)
    {
      Gain = gain;
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get transmitter antenna pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxAntenna : CommandBase
  {
    public override string Documentation
    {
      get { return "Get transmitter antenna pattern."; }
    }

    internal const string CmdName = "GetIntTxAntenna";

    public GetIntTxAntenna()
      : base(CmdName)
    {}

    public GetIntTxAntenna(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxAntenna.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Id   string             Transmitter unique identifier.
  ///

  public class GetIntTxAntennaResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxAntenna."; }
    }

    internal const string CmdName = "GetIntTxAntennaResult";

    public GetIntTxAntennaResult()
      : base(CmdName)
    {}

    public GetIntTxAntennaResult(CommandBase relatedCommand, List<List<double>> gain, AntennaPatternType type, string id)
      : base(CmdName, relatedCommand)
    {
      Gain = gain;
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the transmitter trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// X     double Antenna X offset in the body frame
  /// Y     double Antenna Y offset in the body frame
  /// Z     double Antenna Z offset in the body frame
  /// Yaw   double Antenna Yaw offset in the body frame
  /// Pitch double Antenna Pitch offset in the body frame
  /// Roll  double Antenna Roll offset in the body frame
  /// Id    string Transmitter unique identifier.
  ///

  public class SetIntTxAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the transmitter trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "SetIntTxAntennaOffset";

    public SetIntTxAntennaOffset()
      : base(CmdName)
    {}

    public SetIntTxAntennaOffset(double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the transmitter trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetIntTxAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the transmitter trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "GetIntTxAntennaOffset";

    public GetIntTxAntennaOffset()
      : base(CmdName)
    {}

    public GetIntTxAntennaOffset(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxAntennaOffset.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// X     double Antenna X offset in the body frame
  /// Y     double Antenna Y offset in the body frame
  /// Z     double Antenna Z offset in the body frame
  /// Yaw   double Antenna Yaw offset in the body frame
  /// Pitch double Antenna Pitch offset in the body frame
  /// Roll  double Antenna Roll offset in the body frame
  /// Id    string Transmitter unique identifier.
  ///

  public class GetIntTxAntennaOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxAntennaOffset."; }
    }

    internal const string CmdName = "GetIntTxAntennaOffsetResult";

    public GetIntTxAntennaOffsetResult()
      : base(CmdName)
    {}

    public GetIntTxAntennaOffsetResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the interference transmitter. See EnableIntTx if all you want is to
  /// disable the interference temporarily.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class RemoveIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the interference transmitter. See EnableIntTx if all you want is to\ndisable the interference temporarily."; }
    }

    internal const string CmdName = "RemoveIntTx";

    public RemoveIntTx()
      : base(CmdName)
    {}

    public RemoveIntTx(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove all the interference transmitters.
  ///
  /// 
  ///

  public class RemoveAllIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove all the interference transmitters."; }
    }

    internal const string CmdName = "RemoveAllIntTx";

    public RemoveAllIntTx()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }
  }


  ///
  /// Get all signal ID for this interference transmitters.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetAllSignalsFromIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all signal ID for this interference transmitters."; }
    }

    internal const string CmdName = "GetAllSignalsFromIntTx";

    public GetAllSignalsFromIntTx()
      : base(CmdName)
    {}

    public GetAllSignalsFromIntTx(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetAllSignalsFromIntTx.
  ///
  /// Name      Type         Description
  /// --------- ------------ -----------------------------------------------------
  /// Id        string       Transmitter unique identifier.
  /// IdsSignal array string List of signal ID for this interferences transmitter.
  ///

  public class GetAllSignalsFromIntTxResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllSignalsFromIntTx."; }
    }

    internal const string CmdName = "GetAllSignalsFromIntTxResult";

    public GetAllSignalsFromIntTxResult()
      : base(CmdName)
    {}

    public GetAllSignalsFromIntTxResult(CommandBase relatedCommand, string id, List<string> idsSignal)
      : base(CmdName, relatedCommand)
    {
      Id = id;
      IdsSignal = idsSignal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
        && Contains("IdsSignal")
      ;
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> IdsSignal
    {
      get { return GetValue("IdsSignal").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("IdsSignal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get all signal ID from this interference transmitters and this signal type. If the signal type is invalid, get the IDs of CW type.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------------------------------------------------------------
  /// IdTransmitter string Transmitter unique identifier.
  /// SignalType    string Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"
  ///

  public class GetSignalFromIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all signal ID from this interference transmitters and this signal type. If the signal type is invalid, get the IDs of CW type."; }
    }

    internal const string CmdName = "GetSignalFromIntTx";

    public GetSignalFromIntTx()
      : base(CmdName)
    {}

    public GetSignalFromIntTx(string idTransmitter, string signalType)
      : base(CmdName)
    {
      IdTransmitter = idTransmitter;
      SignalType = signalType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IdTransmitter")
        && Contains("SignalType")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string IdTransmitter
    {
      get { return GetValue("IdTransmitter").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("IdTransmitter", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalType
    {
      get { return GetValue("SignalType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSignalFromIntTx.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ------------------------------------------------------------------------------------
  /// IdTransmitter string       Transmitter unique identifier.
  /// SignalType    string       Type of signal. Accepted signals are : "CW", "Chirp", "Pulse", "BPSK", "BOC", "AWGN"
  /// IdsSignal     array string List of signal ID for this interferences transmitter and this signal type.
  ///

  public class GetSignalFromIntTxResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSignalFromIntTx."; }
    }

    internal const string CmdName = "GetSignalFromIntTxResult";

    public GetSignalFromIntTxResult()
      : base(CmdName)
    {}

    public GetSignalFromIntTxResult(CommandBase relatedCommand, string idTransmitter, string signalType, List<string> idsSignal)
      : base(CmdName, relatedCommand)
    {
      IdTransmitter = idTransmitter;
      SignalType = signalType;
      IdsSignal = idsSignal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IdTransmitter")
        && Contains("SignalType")
        && Contains("IdsSignal")
      ;
      }
    }

    public string IdTransmitter
    {
      get { return GetValue("IdTransmitter").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("IdTransmitter", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalType
    {
      get { return GetValue("SignalType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<string> IdsSignal
    {
      get { return GetValue("IdsSignal").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("IdsSignal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set continuous wave (CW) signal to interference transmitter. A transmitter can combine
  /// multiple signals of different types to create complex waveform. The CW id (SignalId) can be an empty
  /// string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
  /// specified transmitted, the existing signal is updated, ortherwise a new signal is added.
  ///
  /// Name               Type            Description
  /// ------------------ --------------- ---------------------------------------------------
  /// Enabled            bool            Enable (true) or disable (false) the signal
  /// CentralFreq        double          Central frequency (Hz)
  /// Power              double          Power (dB), relative to transmitter reference power
  /// TransmitterId      string          Transmitter unique identifier.
  /// SignalId           string          CW unique identifier.
  /// InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
  /// Group              optional int    Group, if not using default group.
  ///

  public class SetIntTxCW : CommandBase
  {
    public override string Documentation
    {
      get { return "Set continuous wave (CW) signal to interference transmitter. A transmitter can combine\nmultiple signals of different types to create complex waveform. The CW id (SignalId) can be an empty\nstring. In such case, Skydel will assign a unique ID. If the signal id is already in use for the\nspecified transmitted, the existing signal is updated, ortherwise a new signal is added."; }
    }

    internal const string CmdName = "SetIntTxCW";

    public SetIntTxCW()
      : base(CmdName)
    {}

    public SetIntTxCW(bool enabled, double centralFreq, double power, string transmitterId, string signalId, double? initialPhaseOffset = null, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      TransmitterId = transmitterId;
      SignalId = signalId;
      InitialPhaseOffset = initialPhaseOffset;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? InitialPhaseOffset
    {
      get { return GetValue("InitialPhaseOffset").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("InitialPhaseOffset");
        else
          SetValue("InitialPhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get informations about the CW signal of the transmitter.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string CW unique identifier.
  ///

  public class GetIntTxCW : CommandBase
  {
    public override string Documentation
    {
      get { return "Get informations about the CW signal of the transmitter."; }
    }

    internal const string CmdName = "GetIntTxCW";

    public GetIntTxCW()
      : base(CmdName)
    {}

    public GetIntTxCW(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxCW.
  ///
  /// Name               Type            Description
  /// ------------------ --------------- ---------------------------------------------------
  /// Enabled            bool            Enable (true) or disable (false) the signal
  /// CentralFreq        double          Central frequency (Hz)
  /// Power              double          Power (dB), relative to transmitter reference power
  /// TransmitterId      string          Transmitter unique identifier.
  /// SignalId           string          CW unique identifier.
  /// InitialPhaseOffset optional double Initial phase offset, in radians. Defaults to 0.
  /// Group              optional int    Group, if not using default group.
  ///

  public class GetIntTxCWResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxCW."; }
    }

    internal const string CmdName = "GetIntTxCWResult";

    public GetIntTxCWResult()
      : base(CmdName)
    {}

    public GetIntTxCWResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, string transmitterId, string signalId, double? initialPhaseOffset = null, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      TransmitterId = transmitterId;
      SignalId = signalId;
      InitialPhaseOffset = initialPhaseOffset;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? InitialPhaseOffset
    {
      get { return GetValue("InitialPhaseOffset").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("InitialPhaseOffset");
        else
          SetValue("InitialPhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Chirp signal to interference transmitter. A transmitter can combine
  /// multiple signals of different types to create complex waveform. The signal id (SignalId) can be an empty
  /// string. In such case, Skydel will assign a unique ID. If the signal id is already in use for the
  /// specified transmitted, the existing signal is updated, ortherwise a new signal is added.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ---------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Bandwidth     double       Bandwidth (Hz)
  /// SweepTime     double       sweep Time (us)
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       Chirp unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class SetIntTxChirp : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Chirp signal to interference transmitter. A transmitter can combine\nmultiple signals of different types to create complex waveform. The signal id (SignalId) can be an empty\nstring. In such case, Skydel will assign a unique ID. If the signal id is already in use for the\nspecified transmitted, the existing signal is updated, ortherwise a new signal is added."; }
    }

    internal const string CmdName = "SetIntTxChirp";

    public SetIntTxChirp()
      : base(CmdName)
    {}

    public SetIntTxChirp(bool enabled, double centralFreq, double power, double bandwidth, double sweepTime, string transmitterId, string signalId, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Bandwidth = bandwidth;
      SweepTime = sweepTime;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Bandwidth")
        && Contains("SweepTime")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Bandwidth
    {
      get { return GetValue("Bandwidth").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Bandwidth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SweepTime
    {
      get { return GetValue("SweepTime").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SweepTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get informations about the Chirp signal of the transmitter.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string Chirp unique identifier.
  ///

  public class GetIntTxChirp : CommandBase
  {
    public override string Documentation
    {
      get { return "Get informations about the Chirp signal of the transmitter."; }
    }

    internal const string CmdName = "GetIntTxChirp";

    public GetIntTxChirp()
      : base(CmdName)
    {}

    public GetIntTxChirp(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxChirp.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ---------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Bandwidth     double       Bandwidth (Hz)
  /// SweepTime     double       sweep Time (us)
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       Chirp unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class GetIntTxChirpResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxChirp."; }
    }

    internal const string CmdName = "GetIntTxChirpResult";

    public GetIntTxChirpResult()
      : base(CmdName)
    {}

    public GetIntTxChirpResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, double bandwidth, double sweepTime, string transmitterId, string signalId, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Bandwidth = bandwidth;
      SweepTime = sweepTime;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Bandwidth")
        && Contains("SweepTime")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Bandwidth
    {
      get { return GetValue("Bandwidth").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Bandwidth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SweepTime
    {
      get { return GetValue("SweepTime").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SweepTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set pulse signal interference.
  ///
  /// Name          Type         Description
  /// ------------- ------------ --------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
  /// PulseRate     int          Pulse rate (Hz), between 1 and 100000
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       Pulse unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class SetIntTxPulse : CommandBase
  {
    public override string Documentation
    {
      get { return "Set pulse signal interference."; }
    }

    internal const string CmdName = "SetIntTxPulse";

    public SetIntTxPulse()
      : base(CmdName)
    {}

    public SetIntTxPulse(bool enabled, double centralFreq, double power, double dutyCycle, int pulseRate, string transmitterId, string signalId, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      DutyCycle = dutyCycle;
      PulseRate = pulseRate;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("DutyCycle")
        && Contains("PulseRate")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DutyCycle
    {
      get { return GetValue("DutyCycle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DutyCycle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int PulseRate
    {
      get { return GetValue("PulseRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("PulseRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get pulse signal interference.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string Pulse unique identifier.
  ///

  public class GetIntTxPulse : CommandBase
  {
    public override string Documentation
    {
      get { return "Get pulse signal interference."; }
    }

    internal const string CmdName = "GetIntTxPulse";

    public GetIntTxPulse()
      : base(CmdName)
    {}

    public GetIntTxPulse(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxPulse.
  ///
  /// Name          Type         Description
  /// ------------- ------------ --------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// DutyCycle     double       Duty Cycle between 0.01 and 100, as a percentage of Pulse Rate
  /// PulseRate     int          Pulse rate (Hz), between 1 and 100000
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       Pulse unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class GetIntTxPulseResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxPulse."; }
    }

    internal const string CmdName = "GetIntTxPulseResult";

    public GetIntTxPulseResult()
      : base(CmdName)
    {}

    public GetIntTxPulseResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, double dutyCycle, int pulseRate, string transmitterId, string signalId, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      DutyCycle = dutyCycle;
      PulseRate = pulseRate;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("DutyCycle")
        && Contains("PulseRate")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DutyCycle
    {
      get { return GetValue("DutyCycle").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DutyCycle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int PulseRate
    {
      get { return GetValue("PulseRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("PulseRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BPSK signal interference.
  ///
  /// Name          Type         Description
  /// ------------- ------------ -------------------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz).
  /// Power         double       Power (dB), relative to transmitter reference power.
  /// CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       BPSK unique identifier.
  /// Group         optional int Group, if not using default group.
  /// Prn           optional int Prn code to use. If not specified, a random gode will be generated.
  ///

  public class SetIntTxBPSK : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BPSK signal interference."; }
    }

    internal const string CmdName = "SetIntTxBPSK";

    public SetIntTxBPSK()
      : base(CmdName)
    {}

    public SetIntTxBPSK(bool enabled, double centralFreq, double power, int codeRate, int codeLengthMs, string transmitterId, string signalId, int? group = null, int? prn = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      CodeRate = codeRate;
      CodeLengthMs = codeLengthMs;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("CodeRate")
        && Contains("CodeLengthMs")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeRate
    {
      get { return GetValue("CodeRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeLengthMs
    {
      get { return GetValue("CodeLengthMs").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeLengthMs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Prn
    {
      get { return GetValue("Prn").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Prn");
        else
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BPSK signal interference.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string BPSK unique identifier.
  ///

  public class GetIntTxBPSK : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BPSK signal interference."; }
    }

    internal const string CmdName = "GetIntTxBPSK";

    public GetIntTxBPSK()
      : base(CmdName)
    {}

    public GetIntTxBPSK(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxBPSK.
  ///
  /// Name          Type         Description
  /// ------------- ------------ -------------------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz).
  /// Power         double       Power (dB), relative to transmitter reference power.
  /// CodeRate      int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CodeLengthMs  int          Code length (ms). Must be between 1 and 100.
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       BPSK unique identifier.
  /// Group         optional int Group, if not using default group.
  /// Prn           optional int Prn code to use. If not specified, a random gode will be generated.
  ///

  public class GetIntTxBPSKResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxBPSK."; }
    }

    internal const string CmdName = "GetIntTxBPSKResult";

    public GetIntTxBPSKResult()
      : base(CmdName)
    {}

    public GetIntTxBPSKResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, int codeRate, int codeLengthMs, string transmitterId, string signalId, int? group = null, int? prn = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      CodeRate = codeRate;
      CodeLengthMs = codeLengthMs;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("CodeRate")
        && Contains("CodeLengthMs")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeRate
    {
      get { return GetValue("CodeRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeLengthMs
    {
      get { return GetValue("CodeLengthMs").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeLengthMs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Prn
    {
      get { return GetValue("Prn").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Prn");
        else
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set BOC signal interference.
  ///
  /// Name           Type         Description
  /// -------------- ------------ -------------------------------------------------------------------------
  /// Enabled        bool         Enable (true) or disable (false) the signal
  /// CentralFreq    double       Central frequency (Hz)
  /// Power          double       Power (dB), relative to transmitter reference power
  /// CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
  /// SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
  /// TransmitterId  string       Transmitter unique identifier.
  /// SignalId       string       BOC unique identifier.
  /// Group          optional int Group, if not using default group.
  ///

  public class SetIntTxBOC : CommandBase
  {
    public override string Documentation
    {
      get { return "Set BOC signal interference."; }
    }

    internal const string CmdName = "SetIntTxBOC";

    public SetIntTxBOC()
      : base(CmdName)
    {}

    public SetIntTxBOC(bool enabled, double centralFreq, double power, int codeRate, int codeLengthMs, int subCarrierRate, bool cosinePhaseBoc, string transmitterId, string signalId, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      CodeRate = codeRate;
      CodeLengthMs = codeLengthMs;
      SubCarrierRate = subCarrierRate;
      CosinePhaseBoc = cosinePhaseBoc;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("CodeRate")
        && Contains("CodeLengthMs")
        && Contains("SubCarrierRate")
        && Contains("CosinePhaseBoc")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeRate
    {
      get { return GetValue("CodeRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeLengthMs
    {
      get { return GetValue("CodeLengthMs").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeLengthMs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SubCarrierRate
    {
      get { return GetValue("SubCarrierRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SubCarrierRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool CosinePhaseBoc
    {
      get { return GetValue("CosinePhaseBoc").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("CosinePhaseBoc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get BOC signal interference.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string BOC unique identifier.
  ///

  public class GetIntTxBOC : CommandBase
  {
    public override string Documentation
    {
      get { return "Get BOC signal interference."; }
    }

    internal const string CmdName = "GetIntTxBOC";

    public GetIntTxBOC()
      : base(CmdName)
    {}

    public GetIntTxBOC(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxBOC.
  ///
  /// Name           Type         Description
  /// -------------- ------------ -------------------------------------------------------------------------
  /// Enabled        bool         Enable (true) or disable (false) the signal
  /// CentralFreq    double       Central frequency (Hz)
  /// Power          double       Power (dB), relative to transmitter reference power
  /// CodeRate       int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CodeLengthMs   int          Code length (ms). Must be between 1 and 100.
  /// SubCarrierRate int          Code rate (Hz). Must be between 1000 and 60000000 and a multiple of 1KHz.
  /// CosinePhaseBoc bool         Use Cosine-Phase BOC instead of default Sine-Phase BOC.
  /// TransmitterId  string       Transmitter unique identifier.
  /// SignalId       string       BOC unique identifier.
  /// Group          optional int Group, if not using default group.
  ///

  public class GetIntTxBOCResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxBOC."; }
    }

    internal const string CmdName = "GetIntTxBOCResult";

    public GetIntTxBOCResult()
      : base(CmdName)
    {}

    public GetIntTxBOCResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, int codeRate, int codeLengthMs, int subCarrierRate, bool cosinePhaseBoc, string transmitterId, string signalId, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      CodeRate = codeRate;
      CodeLengthMs = codeLengthMs;
      SubCarrierRate = subCarrierRate;
      CosinePhaseBoc = cosinePhaseBoc;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("CodeRate")
        && Contains("CodeLengthMs")
        && Contains("SubCarrierRate")
        && Contains("CosinePhaseBoc")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeRate
    {
      get { return GetValue("CodeRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int CodeLengthMs
    {
      get { return GetValue("CodeLengthMs").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("CodeLengthMs", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SubCarrierRate
    {
      get { return GetValue("SubCarrierRate").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SubCarrierRate", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool CosinePhaseBoc
    {
      get { return GetValue("CosinePhaseBoc").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("CosinePhaseBoc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set AWGN signal interference.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ------------------------------------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Bandwidth     double       Bandwidth (Hz)
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       AWGN unique identifier.
  /// Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
  /// Group         optional int Group, if not using default group.
  ///

  public class SetIntTxAWGN : CommandBase
  {
    public override string Documentation
    {
      get { return "Set AWGN signal interference."; }
    }

    internal const string CmdName = "SetIntTxAWGN";

    public SetIntTxAWGN()
      : base(CmdName)
    {}

    public SetIntTxAWGN(bool enabled, double centralFreq, double power, double bandwidth, string transmitterId, string signalId, int? seed = null, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Bandwidth = bandwidth;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Seed = seed;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Bandwidth")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Bandwidth
    {
      get { return GetValue("Bandwidth").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Bandwidth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Seed
    {
      get { return GetValue("Seed").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Seed");
        else
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get AWGN signal interference.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string AWGN unique identifier.
  ///

  public class GetIntTxAWGN : CommandBase
  {
    public override string Documentation
    {
      get { return "Get AWGN signal interference."; }
    }

    internal const string CmdName = "GetIntTxAWGN";

    public GetIntTxAWGN()
      : base(CmdName)
    {}

    public GetIntTxAWGN(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxAWGN.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ------------------------------------------------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Bandwidth     double       Bandwidth (Hz)
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       AWGN unique identifier.
  /// Seed          optional int Seed for the random number generator. Signals with the same seed will have the same shape.
  /// Group         optional int Group, if not using default group.
  ///

  public class GetIntTxAWGNResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxAWGN."; }
    }

    internal const string CmdName = "GetIntTxAWGNResult";

    public GetIntTxAWGNResult()
      : base(CmdName)
    {}

    public GetIntTxAWGNResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, double bandwidth, string transmitterId, string signalId, int? seed = null, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Bandwidth = bandwidth;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Seed = seed;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Bandwidth")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Bandwidth
    {
      get { return GetValue("Bandwidth").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Bandwidth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Seed
    {
      get { return GetValue("Seed").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Seed");
        else
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set IQ file signal interference.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ---------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Path          string       Path to the file to play
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       AWGN unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class SetIntTxIqFile : CommandBase
  {
    public override string Documentation
    {
      get { return "Set IQ file signal interference."; }
    }

    internal const string CmdName = "SetIntTxIqFile";

    public SetIntTxIqFile()
      : base(CmdName)
    {}

    public SetIntTxIqFile(bool enabled, double centralFreq, double power, string path, string transmitterId, string signalId, int? group = null)
      : base(CmdName)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Path = path;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Path")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get IQ file signal interference.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string AWGN unique identifier.
  ///

  public class GetIntTxIqFile : CommandBase
  {
    public override string Documentation
    {
      get { return "Get IQ file signal interference."; }
    }

    internal const string CmdName = "GetIntTxIqFile";

    public GetIntTxIqFile()
      : base(CmdName)
    {}

    public GetIntTxIqFile(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIntTxIqFile.
  ///
  /// Name          Type         Description
  /// ------------- ------------ ---------------------------------------------------
  /// Enabled       bool         Enable (true) or disable (false) the signal
  /// CentralFreq   double       Central frequency (Hz)
  /// Power         double       Power (dB), relative to transmitter reference power
  /// Path          string       Path to the file to play
  /// TransmitterId string       Transmitter unique identifier.
  /// SignalId      string       AWGN unique identifier.
  /// Group         optional int Group, if not using default group.
  ///

  public class GetIntTxIqFileResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIntTxIqFile."; }
    }

    internal const string CmdName = "GetIntTxIqFileResult";

    public GetIntTxIqFileResult()
      : base(CmdName)
    {}

    public GetIntTxIqFileResult(CommandBase relatedCommand, bool enabled, double centralFreq, double power, string path, string transmitterId, string signalId, int? group = null)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
      CentralFreq = centralFreq;
      Power = power;
      Path = path;
      TransmitterId = transmitterId;
      SignalId = signalId;
      Group = group;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("CentralFreq")
        && Contains("Power")
        && Contains("Path")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreq
    {
      get { return GetValue("CentralFreq").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreq", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Group
    {
      get { return GetValue("Group").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Group");
        else
          SetValue("Group", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Change whether a signal is enabled or disabled
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------------
  /// Enabled       bool   Whether the signal is enabled or not
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string CW unique identifier.
  ///

  public class EnableIntTxSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Change whether a signal is enabled or disabled"; }
    }

    internal const string CmdName = "EnableIntTxSignal";

    public EnableIntTxSignal()
      : base(CmdName)
    {}

    public EnableIntTxSignal(bool enabled, string transmitterId, string signalId)
      : base(CmdName)
    {
      Enabled = enabled;
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the specified signal from the interference transmitter.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  /// SignalId      string Signal unique identifier.
  ///

  public class RemoveSignalFromIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the specified signal from the interference transmitter."; }
    }

    internal const string CmdName = "RemoveSignalFromIntTx";

    public RemoveSignalFromIntTx()
      : base(CmdName)
    {}

    public RemoveSignalFromIntTx(string transmitterId, string signalId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes all signals from the interference transmitter.
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------
  /// TransmitterId string Transmitter unique identifier.
  ///

  public class RemoveAllSignalsFromIntTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes all signals from the interference transmitter."; }
    }

    internal const string CmdName = "RemoveAllSignalsFromIntTx";

    public RemoveAllSignalsFromIntTx()
      : base(CmdName)
    {}

    public RemoveAllSignalsFromIntTx(string transmitterId)
      : base(CmdName)
    {
      TransmitterId = transmitterId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitterId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set streaming buffer size.
  ///
  /// Name Type Description
  /// ---- ---- -----------------------------
  /// Size int  Streaming buffer size in msec
  ///

  public class SetStreamingBuffer : CommandBase
  {
    public override string Documentation
    {
      get { return "Set streaming buffer size."; }
    }

    internal const string CmdName = "SetStreamingBuffer";

    public SetStreamingBuffer()
      : base(CmdName)
    {}

    public SetStreamingBuffer(int size)
      : base(CmdName)
    {
      Size = size;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Size")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public int Size
    {
      get { return GetValue("Size").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Size", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get streaming buffer size.
  ///
  /// 
  ///

  public class GetStreamingBuffer : CommandBase
  {
    public override string Documentation
    {
      get { return "Get streaming buffer size."; }
    }

    internal const string CmdName = "GetStreamingBuffer";

    public GetStreamingBuffer()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetStreamingBuffer.
  ///
  /// Name Type Description
  /// ---- ---- -----------------------------
  /// Size int  Streaming buffer size in msec
  ///

  public class GetStreamingBufferResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetStreamingBuffer."; }
    }

    internal const string CmdName = "GetStreamingBufferResult";

    public GetStreamingBufferResult()
      : base(CmdName)
    {}

    public GetStreamingBufferResult(CommandBase relatedCommand, int size)
      : base(CmdName, relatedCommand)
    {
      Size = size;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Size")
      ;
      }
    }

    public int Size
    {
      get { return GetValue("Size").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Size", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set engine latency.
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------
  /// Latency int  Engine latency in msec
  ///

  public class SetEngineLatency : CommandBase
  {
    public override string Documentation
    {
      get { return "Set engine latency."; }
    }

    internal const string CmdName = "SetEngineLatency";

    public SetEngineLatency()
      : base(CmdName)
    {}

    public SetEngineLatency(int latency)
      : base(CmdName)
    {
      Latency = latency;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Latency")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public int Latency
    {
      get { return GetValue("Latency").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Latency", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get engine latency.
  ///
  /// 
  ///

  public class GetEngineLatency : CommandBase
  {
    public override string Documentation
    {
      get { return "Get engine latency."; }
    }

    internal const string CmdName = "GetEngineLatency";

    public GetEngineLatency()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetEngineLatency.
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------
  /// Latency int  Engine latency in msec
  ///

  public class GetEngineLatencyResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetEngineLatency."; }
    }

    internal const string CmdName = "GetEngineLatencyResult";

    public GetEngineLatencyResult()
      : base(CmdName)
    {}

    public GetEngineLatencyResult(CommandBase relatedCommand, int latency)
      : base(CmdName, relatedCommand)
    {
      Latency = latency;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Latency")
      ;
      }
    }

    public int Latency
    {
      get { return GetValue("Latency").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Latency", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// HIL Tjoin. Value is in milliseconds.
  ///
  /// Name     Type Description
  /// -------- ---- -----------
  /// HilTjoin int  HIL Tjoin.
  ///

  public class SetHilTjoin : CommandBase
  {
    public override string Documentation
    {
      get { return "HIL Tjoin. Value is in milliseconds."; }
    }

    internal const string CmdName = "SetHilTjoin";

    public SetHilTjoin()
      : base(CmdName)
    {}

    public SetHilTjoin(int hilTjoin)
      : base(CmdName)
    {
      HilTjoin = hilTjoin;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("HilTjoin")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int HilTjoin
    {
      get { return GetValue("HilTjoin").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("HilTjoin", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set listening port for sync time server.
  ///
  /// Name Type Description
  /// ---- ---- ---------------------
  /// Port int  Listening port number
  ///

  public class SetSyncServer : CommandBase
  {
    public override string Documentation
    {
      get { return "Set listening port for sync time server."; }
    }

    internal const string CmdName = "SetSyncServer";

    public SetSyncServer()
      : base(CmdName)
    {}

    public SetSyncServer(int port)
      : base(CmdName)
    {
      Port = port;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Port")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public int Port
    {
      get { return GetValue("Port").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set host and port to connect to sync time server.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------
  /// Host string Host address
  /// Port int    Host port number
  ///

  public class SetSyncClient : CommandBase
  {
    public override string Documentation
    {
      get { return "Set host and port to connect to sync time server."; }
    }

    internal const string CmdName = "SetSyncClient";

    public SetSyncClient()
      : base(CmdName)
    {}

    public SetSyncClient(string host, int port)
      : base(CmdName)
    {
      Host = host;
      Port = port;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Host")
        && Contains("Port")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public string Host
    {
      get { return GetValue("Host").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Host", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Port
    {
      get { return GetValue("Port").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Port", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set time delay to start streaming, in order to allign PPS out Signal with RF.
  /// 2000 ms is a calibrated value.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------
  /// Time double Time delay in msec (minimum is 500 msec)
  ///

  public class SetSyncTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Set time delay to start streaming, in order to allign PPS out Signal with RF.\n2000 ms is a calibrated value."; }
    }

    internal const string CmdName = "SetSyncTime";

    public SetSyncTime()
      : base(CmdName)
    {}

    public SetSyncTime(double time)
      : base(CmdName)
    {
      Time = time;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get time delay to start streaming, in order to allign PPS out Signal with RF.
  /// 2000 ms is a calibrated value.
  ///
  /// 
  ///

  public class GetSyncTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Get time delay to start streaming, in order to allign PPS out Signal with RF.\n2000 ms is a calibrated value."; }
    }

    internal const string CmdName = "GetSyncTime";

    public GetSyncTime()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetSyncTime.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------
  /// Time double Time delay in msec (minimum is 500 msec)
  ///

  public class GetSyncTimeResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSyncTime."; }
    }

    internal const string CmdName = "GetSyncTimeResult";

    public GetSyncTimeResult()
      : base(CmdName)
    {}

    public GetSyncTimeResult(CommandBase relatedCommand, double time)
      : base(CmdName, relatedCommand)
    {
      Time = time;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
      ;
      }
    }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set time delay to start streaming after PPS synchronization. A value of 1500
  /// means the simulation will start streaming 1.5 sec after the PPS used for
  /// synchornization.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------
  /// Time double Time delay in msec (minimum is 500 msec)
  ///

  public class SetSyncTimeMaster : CommandBase
  {
    public override string Documentation
    {
      get { return "Set time delay to start streaming after PPS synchronization. A value of 1500\nmeans the simulation will start streaming 1.5 sec after the PPS used for\nsynchornization."; }
    }

    internal const string CmdName = "SetSyncTimeMaster";

    public SetSyncTimeMaster()
      : base(CmdName)
    {}

    public SetSyncTimeMaster(double time)
      : base(CmdName)
    {
      Time = time;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get time delay to start streaming after PPS synchronization. A value of 1500
  /// means the simulation will start streaming 1.5 sec after the PPS used for
  /// synchornization.
  ///
  /// 
  ///

  public class GetSyncTimeMaster : CommandBase
  {
    public override string Documentation
    {
      get { return "Get time delay to start streaming after PPS synchronization. A value of 1500\nmeans the simulation will start streaming 1.5 sec after the PPS used for\nsynchornization."; }
    }

    internal const string CmdName = "GetSyncTimeMaster";

    public GetSyncTimeMaster()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetSyncTimeMaster.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------
  /// Time double Time delay in msec (minimum is 500 msec)
  ///

  public class GetSyncTimeMasterResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSyncTimeMaster."; }
    }

    internal const string CmdName = "GetSyncTimeMasterResult";

    public GetSyncTimeMasterResult()
      : base(CmdName)
    {}

    public GetSyncTimeMasterResult(CommandBase relatedCommand, double time)
      : base(CmdName, relatedCommand)
    {
      Time = time;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Time")
      ;
      }
    }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// If enabled, simulation stops when a command result fail.
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------------------
  /// Enabled bool Enable stop when command fail flag
  ///

  public class StopWhenCommandFail : CommandBase
  {
    public override string Documentation
    {
      get { return "If enabled, simulation stops when a command result fail."; }
    }

    internal const string CmdName = "StopWhenCommandFail";

    public StopWhenCommandFail()
      : base(CmdName)
    {}

    public StopWhenCommandFail(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// If enabled, simulation stops when a command result fail.
  ///
  /// 
  ///

  public class IsSimStopWhenCommandFailEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "If enabled, simulation stops when a command result fail."; }
    }

    internal const string CmdName = "IsSimStopWhenCommandFailEnabled";

    public IsSimStopWhenCommandFailEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of IsSimStopWhenCommandFailEnabled.
  ///
  /// Name    Type Description
  /// ------- ---- ----------------------------------
  /// Enabled bool Enable stop when command fail flag
  ///

  public class IsSimStopWhenCommandFailEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSimStopWhenCommandFailEnabled."; }
    }

    internal const string CmdName = "IsSimStopWhenCommandFailEnabledResult";

    public IsSimStopWhenCommandFailEnabledResult()
      : base(CmdName)
    {}

    public IsSimStopWhenCommandFailEnabledResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// If enabled, master and all the slaves will stop if a slave stop.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Enabled bool Enable master stop when slave fail flag
  ///

  public class StopMasterWhenSlaveStop : CommandBase
  {
    public override string Documentation
    {
      get { return "If enabled, master and all the slaves will stop if a slave stop."; }
    }

    internal const string CmdName = "StopMasterWhenSlaveStop";

    public StopMasterWhenSlaveStop()
      : base(CmdName)
    {}

    public StopMasterWhenSlaveStop(bool enabled)
      : base(CmdName)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// If enabled, master and all the slaves will stop if a slave stop.
  ///
  /// 
  ///

  public class IsStopMasterWhenSlaveStop : CommandBase
  {
    public override string Documentation
    {
      get { return "If enabled, master and all the slaves will stop if a slave stop."; }
    }

    internal const string CmdName = "IsStopMasterWhenSlaveStop";

    public IsStopMasterWhenSlaveStop()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of IsStopMasterWhenSlaveStop.
  ///
  /// Name    Type Description
  /// ------- ---- ---------------------------------------
  /// Enabled bool Enable master stop when slave fail flag
  ///

  public class IsStopMasterWhenSlaveStopResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsStopMasterWhenSlaveStop."; }
    }

    internal const string CmdName = "IsStopMasterWhenSlaveStopResult";

    public IsStopMasterWhenSlaveStopResult()
      : base(CmdName)
    {}

    public IsStopMasterWhenSlaveStopResult(CommandBase relatedCommand, bool enabled)
      : base(CmdName, relatedCommand)
    {
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
      ;
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set if map is show/hide in Analysis tab.
  ///
  /// Name Type Description
  /// ---- ---- -------------
  /// Show bool Show map flag
  ///

  public class ShowMapAnalysis : CommandBase
  {
    public override string Documentation
    {
      get { return "Set if map is show/hide in Analysis tab."; }
    }

    internal const string CmdName = "ShowMapAnalysis";

    public ShowMapAnalysis()
      : base(CmdName)
    {}

    public ShowMapAnalysis(bool show)
      : base(CmdName)
    {
      Show = show;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Show")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public bool Show
    {
      get { return GetValue("Show").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Show", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get if map is show/hide in Analysis tab.
  ///
  /// 
  ///

  public class IsMapAnalysisEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get if map is show/hide in Analysis tab."; }
    }

    internal const string CmdName = "IsMapAnalysisEnabled";

    public IsMapAnalysisEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsMapAnalysisEnabled.
  ///
  /// Name Type Description
  /// ---- ---- -------------
  /// Show bool Show map flag
  ///

  public class IsMapAnalysisEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsMapAnalysisEnabled."; }
    }

    internal const string CmdName = "IsMapAnalysisEnabledResult";

    public IsMapAnalysisEnabledResult()
      : base(CmdName)
    {}

    public IsMapAnalysisEnabledResult(CommandBase relatedCommand, bool show)
      : base(CmdName, relatedCommand)
    {
      Show = show;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Show")
      ;
      }
    }

    public bool Show
    {
      get { return GetValue("Show").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Show", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set if spectrums are show/hide.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------
  /// Visible bool Show spectrum flag
  ///

  public class SetSpectrumVisible : CommandBase
  {
    public override string Documentation
    {
      get { return "Set if spectrums are show/hide."; }
    }

    internal const string CmdName = "SetSpectrumVisible";

    public SetSpectrumVisible()
      : base(CmdName)
    {}

    public SetSpectrumVisible(bool visible)
      : base(CmdName)
    {
      Visible = visible;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Visible")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public bool Visible
    {
      get { return GetValue("Visible").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Visible", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get if spectrums are show/hide.
  ///
  /// 
  ///

  public class IsSpectrumVisible : CommandBase
  {
    public override string Documentation
    {
      get { return "Get if spectrums are show/hide."; }
    }

    internal const string CmdName = "IsSpectrumVisible";

    public IsSpectrumVisible()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsSpectrumVisible.
  ///
  /// Name    Type Description
  /// ------- ---- ------------------
  /// Visible bool Show spectrum flag
  ///

  public class IsSpectrumVisibleResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSpectrumVisible."; }
    }

    internal const string CmdName = "IsSpectrumVisibleResult";

    public IsSpectrumVisibleResult()
      : base(CmdName)
    {}

    public IsSpectrumVisibleResult(CommandBase relatedCommand, bool visible)
      : base(CmdName, relatedCommand)
    {
      Visible = visible;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Visible")
      ;
      }
    }

    public bool Visible
    {
      get { return GetValue("Visible").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Visible", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Ask current simulator state. Will return a SimulatorStateResult.
  ///
  /// 
  ///

  public class GetSimulatorState : CommandBase
  {
    public override string Documentation
    {
      get { return "Ask current simulator state. Will return a SimulatorStateResult."; }
    }

    internal const string CmdName = "GetSimulatorState";

    public GetSimulatorState()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Wait until simulator has reached the specified substate unless simulator goes to error state or specified failure substate. Will return a SimulatorStateResult.
  /// Possible substates are :
  /// -None
  /// -Incomplete
  /// -Ready
  /// -Initializing
  /// -Armed
  /// -Streaming RF
  /// -Sync Slave
  /// -WF Init (Slave)
  /// -WF Init (Master)
  /// -HIL Sync
  /// -Sync Init
  /// -Sync PPS Reset
  /// -Sync Start Time
  /// -Sync Start
  /// -Error
  ///
  /// Name         Type   Description
  /// ------------ ------ ----------------------------------------------------------
  /// State        string Simulator sub state string.
  /// FailureState string Abort waiting if simulator goes to this sub state instead.
  ///

  public class WaitSimulatorState : CommandBase
  {
    public override string Documentation
    {
      get { return "Wait until simulator has reached the specified substate unless simulator goes to error state or specified failure substate. Will return a SimulatorStateResult.\nPossible substates are :\n-None\n-Incomplete\n-Ready\n-Initializing\n-Armed\n-Streaming RF\n-Sync Slave\n-WF Init (Slave)\n-WF Init (Master)\n-HIL Sync\n-Sync Init\n-Sync PPS Reset\n-Sync Start Time\n-Sync Start\n-Error"; }
    }

    internal const string CmdName = "WaitSimulatorState";

    public WaitSimulatorState()
      : base(CmdName)
    {}

    public WaitSimulatorState(string state, string failureState)
      : base(CmdName)
    {
      State = state;
      FailureState = failureState;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("State")
        && Contains("FailureState")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string State
    {
      get { return GetValue("State").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("State", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string FailureState
    {
      get { return GetValue("FailureState").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FailureState", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Abort the current WaitSimulatorState if any.
  ///
  /// 
  ///

  public class AbortWaitSimulatorState : CommandBase
  {
    public override string Documentation
    {
      get { return "Abort the current WaitSimulatorState if any."; }
    }

    internal const string CmdName = "AbortWaitSimulatorState";

    public AbortWaitSimulatorState()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Simulator State Result.
  /// Possible substates are :
  /// -None
  /// -Incomplete
  /// -Ready
  /// -Initializing
  /// -Armed
  /// -Streaming RF
  /// -Sync Slave
  /// -WF Init (Slave)
  /// -WF Init (Master)
  /// -HIL Sync
  /// -Sync Init
  /// -Sync PPS Reset
  /// -Sync Start Time
  /// -Sync Start
  /// -Error
  ///
  /// Name       Type              Description
  /// ---------- ----------------- ------------------------------------
  /// State      string            Simulator substate.
  /// Error      string            Error Message if state is Error.
  /// StateId    SimulatorState    Simulator State value as an enum.
  /// SubStateId SimulatorSubState Simulator SubState value as an enum.
  ///

  public class SimulatorStateResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Simulator State Result.\nPossible substates are :\n-None\n-Incomplete\n-Ready\n-Initializing\n-Armed\n-Streaming RF\n-Sync Slave\n-WF Init (Slave)\n-WF Init (Master)\n-HIL Sync\n-Sync Init\n-Sync PPS Reset\n-Sync Start Time\n-Sync Start\n-Error"; }
    }

    internal const string CmdName = "SimulatorStateResult";

    public SimulatorStateResult()
      : base(CmdName)
    {}

    public SimulatorStateResult(CommandBase relatedCommand, string state, string error, SimulatorState stateId, SimulatorSubState subStateId)
      : base(CmdName, relatedCommand)
    {
      State = state;
      Error = error;
      StateId = stateId;
      SubStateId = subStateId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("State")
        && Contains("Error")
        && Contains("StateId")
        && Contains("SubStateId")
      ;
      }
    }

    public string State
    {
      get { return GetValue("State").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("State", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Error
    {
      get { return GetValue("Error").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Error", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SimulatorState StateId
    {
      get { return GetValue("StateId").ToObject<SimulatorState>(CommandBase.Serializer); }
      set
      {
          SetValue("StateId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public SimulatorSubState SubStateId
    {
      get { return GetValue("SubStateId").ToObject<SimulatorSubState>(CommandBase.Serializer); }
      set
      {
          SetValue("SubStateId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Begin receiving simulated vehicle informations. 
  /// During simulation, you must call RemoteSimulator.lastVehicleInfo to get current simulation statistics or RemoteSimulator.nextVehicleInfo to get pending simulation statistics
  ///
  /// 
  ///

  public class BeginVehicleInfo : CommandBase
  {
    public override string Documentation
    {
      get { return "Begin receiving simulated vehicle informations. \nDuring simulation, you must call RemoteSimulator.lastVehicleInfo to get current simulation statistics or RemoteSimulator.nextVehicleInfo to get pending simulation statistics"; }
    }

    internal const string CmdName = "BeginVehicleInfo";

    public BeginVehicleInfo()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// End receiving simulated vehicle informations.
  ///
  /// 
  ///

  public class EndVehicleInfo : CommandBase
  {
    public override string Documentation
    {
      get { return "End receiving simulated vehicle informations."; }
    }

    internal const string CmdName = "EndVehicleInfo";

    public EndVehicleInfo()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Insert message to sequence.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------------------------------
  /// Signal string Signal Name ("L2C" for example)
  /// Index  int    Message index in sequence where to insert. Set to -1 to append the message type at the end of the sequence.
  /// Type   int    Message type to insert
  ///

  public class MessageSequenceInsert : CommandBase
  {
    public override string Documentation
    {
      get { return "Insert message to sequence."; }
    }

    internal const string CmdName = "MessageSequenceInsert";

    public MessageSequenceInsert()
      : base(CmdName)
    {}

    public MessageSequenceInsert(string signal, int index, int type)
      : base(CmdName)
    {
      Signal = signal;
      Index = index;
      Type = type;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Index")
        && Contains("Type")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Type
    {
      get { return GetValue("Type").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove message from sequence.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------------------------------
  /// Signal string Signal Name ("L2C" for example)
  /// Index  int    Message index in sequence where to remove. Set to -1 to remove last message in sequence.
  ///

  public class MessageSequenceRemove : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove message from sequence."; }
    }

    internal const string CmdName = "MessageSequenceRemove";

    public MessageSequenceRemove()
      : base(CmdName)
    {}

    public MessageSequenceRemove(string signal, int index)
      : base(CmdName)
    {
      Signal = signal;
      Index = index;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Index")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Index
    {
      get { return GetValue("Index").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Index", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Swap 2 messages in sequence.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------
  /// Signal string Signal Name ("L2C" for example)
  /// IndexI int    Message index i in sequence.
  /// IndexJ int    Message index j in sequence.
  ///

  public class MessageSequenceSwap : CommandBase
  {
    public override string Documentation
    {
      get { return "Swap 2 messages in sequence."; }
    }

    internal const string CmdName = "MessageSequenceSwap";

    public MessageSequenceSwap()
      : base(CmdName)
    {}

    public MessageSequenceSwap(string signal, int indexI, int indexJ)
      : base(CmdName)
    {
      Signal = signal;
      IndexI = indexI;
      IndexJ = indexJ;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("IndexI")
        && Contains("IndexJ")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int IndexI
    {
      get { return GetValue("IndexI").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("IndexI", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int IndexJ
    {
      get { return GetValue("IndexJ").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("IndexJ", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import a sequence file.
  /// A sequence file is a CSV with one message type per line.
  ///
  /// Name     Type   Description
  /// -------- ------ ------------------------------------------------
  /// Signal   string Signal Name ("L2C" for example)
  /// Filename string Path to the CSV file on the simulator's machine.
  ///

  public class MessageSequenceImport : CommandBase
  {
    public override string Documentation
    {
      get { return "Import a sequence file.\nA sequence file is a CSV with one message type per line."; }
    }

    internal const string CmdName = "MessageSequenceImport";

    public MessageSequenceImport()
      : base(CmdName)
    {}

    public MessageSequenceImport(string signal, string filename)
      : base(CmdName)
    {
      Signal = signal;
      Filename = filename;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Filename")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Filename
    {
      get { return GetValue("Filename").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Filename", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export the signal's message sequence into a csv file.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------------------------------------------------------------------------
  /// Signal      string Signal key ("L2C" for example).
  /// Path        string The full path to the csv file.
  /// Overwriting bool   Overwrites an existing file if set to true, returns an error if set to false and the file exists.
  ///

  public class ExportMessageSequenceToCSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Export the signal's message sequence into a csv file."; }
    }

    internal const string CmdName = "ExportMessageSequenceToCSV";

    public ExportMessageSequenceToCSV()
      : base(CmdName)
    {}

    public ExportMessageSequenceToCSV(string signal, string path, bool overwriting)
      : base(CmdName)
    {
      Signal = signal;
      Path = path;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Path")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the messages sequence for the signal
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------
  /// Signal string Signal Name ("L2C" for example)
  ///

  public class GetMessageSequence : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the messages sequence for the signal"; }
    }

    internal const string CmdName = "GetMessageSequence";

    public GetMessageSequence()
      : base(CmdName)
    {}

    public GetMessageSequence(string signal)
      : base(CmdName)
    {
      Signal = signal;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetMessageSequence.
  ///
  /// Name     Type      Description
  /// -------- --------- -------------------------------
  /// Signal   string    Signal Name ("L2C" for example)
  /// Sequence array int List of message type
  ///

  public class GetMessageSequenceResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetMessageSequence."; }
    }

    internal const string CmdName = "GetMessageSequenceResult";

    public GetMessageSequenceResult()
      : base(CmdName)
    {}

    public GetMessageSequenceResult(CommandBase relatedCommand, string signal, List<int> sequence)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Sequence = sequence;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Sequence")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Sequence
    {
      get { return GetValue("Sequence").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Sequence", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).
  ///
  /// Name Type Description
  /// ---- ---- -----------------------
  /// Prn  int  Satellite PRN number
  /// K    int  Satellite K PRN number.
  ///

  public class SetGalileoFnavSatelliteK : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout)."; }
    }

    internal const string CmdName = "SetGalileoFnavSatelliteK";

    public SetGalileoFnavSatelliteK()
      : base(CmdName)
    {}

    public SetGalileoFnavSatelliteK(int prn, int k)
      : base(CmdName)
    {
      Prn = prn;
      K = k;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Prn")
        && Contains("K")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int K
    {
      get { return GetValue("K").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("K", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout).
  ///
  /// Name Type Description
  /// ---- ---- --------------------
  /// Prn  int  Satellite PRN number
  ///

  public class GetGalileoFnavSatelliteK : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the almanac satellite id for subframe 1 (Parameter K described in ICD 4.2.3 Frame Layout)."; }
    }

    internal const string CmdName = "GetGalileoFnavSatelliteK";

    public GetGalileoFnavSatelliteK()
      : base(CmdName)
    {}

    public GetGalileoFnavSatelliteK(int prn)
      : base(CmdName)
    {
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Prn")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetGalileoFnavSatelliteK.
  ///
  /// Name Type Description
  /// ---- ---- -----------------------
  /// Prn  int  Satellite PRN number
  /// K    int  Satellite K PRN number.
  ///

  public class GetGalileoFnavSatelliteKResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetGalileoFnavSatelliteK."; }
    }

    internal const string CmdName = "GetGalileoFnavSatelliteKResult";

    public GetGalileoFnavSatelliteKResult()
      : base(CmdName)
    {}

    public GetGalileoFnavSatelliteKResult(CommandBase relatedCommand, int prn, int k)
      : base(CmdName, relatedCommand)
    {
      Prn = prn;
      K = k;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Prn")
        && Contains("K")
      ;
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int K
    {
      get { return GetValue("K").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("K", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Skydel special calibration function, internal use only
  ///
  /// Name          Type   Description
  /// ------------- ------ ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  /// SvId          int    SV ID for GPS, Galileo, BeiDou, GLONASS, QZSS and SBAS.
  /// Signal        string Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L2ME", "L2MR", "L5", "G1", "G2", "E1", "E5a", "E5b", "B1", "B2", "B1C", "B2a", "SBASL1", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S"
  /// EnableSV      bool   Enable/Disable multiplication by satellite and Navigation Message
  /// EnableDoppler bool   Enable/Disable Doppler Frequency and Phase offset
  /// PhaseOffet    double Carrier Phase Offset applied to Line Of Sight
  ///

  public class CalibFunction : CommandBase
  {
    public override string Documentation
    {
      get { return "Skydel special calibration function, internal use only"; }
    }

    internal const string CmdName = "CalibFunction";

    public CalibFunction()
      : base(CmdName)
    {}

    public CalibFunction(int svId, string signal, bool enableSV, bool enableDoppler, double phaseOffet)
      : base(CmdName)
    {
      SvId = svId;
      Signal = signal;
      EnableSV = enableSV;
      EnableDoppler = enableDoppler;
      PhaseOffet = phaseOffet;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Signal")
        && Contains("EnableSV")
        && Contains("EnableDoppler")
        && Contains("PhaseOffet")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool EnableSV
    {
      get { return GetValue("EnableSV").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("EnableSV", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool EnableDoppler
    {
      get { return GetValue("EnableDoppler").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("EnableDoppler", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhaseOffet
    {
      get { return GetValue("PhaseOffet").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffet", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clears the status log
  ///
  /// 
  ///

  public class ClearStatusLog : CommandBase
  {
    public override string Documentation
    {
      get { return "Clears the status log"; }
    }

    internal const string CmdName = "ClearStatusLog";

    public ClearStatusLog()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// A log record level.
  ///
  
  public enum LogLevel { Message, Warning, Error }


  ///
  /// Represents a record inside the status log.
  ///
  /// Name      Type              Description
  /// --------- ----------------- --------------------------------------------------
  /// TimeStamp datetime          The record time, in the host os time.
  /// State     SimulatorState    The simulator state at the time of the record.
  /// SubState  SimulatorSubState The simulator sub-state at the time of the record.
  /// Level     LogLevel          The record level.
  /// Message   string            The record message.
  ///

  public struct LogRecord
  {
    public DateTime TimeStamp;
    public SimulatorState State;
    public SimulatorSubState SubState;
    public LogLevel Level;
    public string Message;
  }


  ///
  /// Returns the status log in a GetStatusLogResult and clears it
  ///
  /// 
  ///

  public class GetStatusLog : CommandBase
  {
    public override string Documentation
    {
      get { return "Returns the status log in a GetStatusLogResult and clears it"; }
    }

    internal const string CmdName = "GetStatusLog";

    public GetStatusLog()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetStatusLog.
  ///
  /// Name    Type            Description
  /// ------- --------------- ----------------
  /// Records array LogRecord The log records.
  ///

  public class GetStatusLogResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetStatusLog."; }
    }

    internal const string CmdName = "GetStatusLogResult";

    public GetStatusLogResult()
      : base(CmdName)
    {}

    public GetStatusLogResult(CommandBase relatedCommand, List<LogRecord> records)
      : base(CmdName, relatedCommand)
    {
      Records = records;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Records")
      ;
      }
    }

    public List<LogRecord> Records
    {
      get { return GetValue("Records").ToObject<List<LogRecord>>(CommandBase.Serializer); }
      set
      {
          SetValue("Records", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Group multiple commands as one
  ///
  /// Name     Type               Description
  /// -------- ------------------ -----------------------
  /// Commands array command_base The commands to execute
  ///

  public class CommandGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Group multiple commands as one"; }
    }

    internal const string CmdName = "CommandGroup";

    public CommandGroup()
      : base(CmdName)
    {}

    public CommandGroup(List<CommandBase> commands)
      : base(CmdName)
    {
      Commands = commands;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Commands")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public List<CommandBase> Commands
    {
      get { return GetValue("Commands").ToObject<List<CommandBase>>(CommandBase.Serializer); }
      set
      {
          SetValue("Commands", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a list of visible satellites' SV IDs within a system, returns a GetVisibleSVResult
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------
  /// System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetVisibleSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a list of visible satellites' SV IDs within a system, returns a GetVisibleSVResult"; }
    }

    internal const string CmdName = "GetVisibleSV";

    public GetVisibleSV()
      : base(CmdName)
    {}

    public GetVisibleSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetVisibleSV.
  ///
  /// Name   Type      Description
  /// ------ --------- -----------------------------------------------------------------------------------
  /// System string    The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   array int A list containing the visible satellites' SV IDs
  ///

  public class GetVisibleSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetVisibleSV."; }
    }

    internal const string CmdName = "GetVisibleSVResult";

    public GetVisibleSVResult()
      : base(CmdName)
    {}

    public GetVisibleSVResult(CommandBase relatedCommand, string system, List<int> svId)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> SvId
    {
      get { return GetValue("SvId").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Arm the system for further PPS synchronization instructions.
  ///
  /// 
  ///

  public class ArmPPS : CommandBase
  {
    public override string Documentation
    {
      get { return "Arm the system for further PPS synchronization instructions."; }
    }

    internal const string CmdName = "ArmPPS";

    public ArmPPS()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Ask Skydel to reset its PPS counter.
  ///
  /// 
  ///

  public class WaitAndResetPPS : CommandBase
  {
    public override string Documentation
    {
      get { return "Ask Skydel to reset its PPS counter."; }
    }

    internal const string CmdName = "WaitAndResetPPS";

    public WaitAndResetPPS()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Start the simulation at the given PPS count.
  ///
  /// Name Type Description
  /// ---- ---- -------------------------------------------------------------
  /// Msec int  The number of ms after PPS to wait before starting simulation
  ///

  public class StartPPS : CommandBase
  {
    public override string Documentation
    {
      get { return "Start the simulation at the given PPS count."; }
    }

    internal const string CmdName = "StartPPS";

    public StartPPS()
      : base(CmdName)
    {}

    public StartPPS(int msec)
      : base(CmdName)
    {
      Msec = msec;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Msec")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public int Msec
    {
      get { return GetValue("Msec").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Msec", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable or disable a satellite for this constellation.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------------------------------------------------------------
  /// System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID (use 0 for all SVs).
  /// Enabled bool   The satellite will be present/absent from the constellation
  ///

  public class EnableSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable or disable a satellite for this constellation."; }
    }

    internal const string CmdName = "EnableSV";

    public EnableSV()
      : base(CmdName)
    {}

    public EnableSV(string system, int svId, bool enabled)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a satellite is enabled or disabled for this constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------------------------------------------------------------------------------------------
  /// System string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The satellite's SV ID (use 0 for all SVs).
  ///

  public class IsSVEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a satellite is enabled or disabled for this constellation."; }
    }

    internal const string CmdName = "IsSVEnabled";

    public IsSVEnabled()
      : base(CmdName)
    {}

    public IsSVEnabled(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSVEnabled.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------------------------------------------------------------
  /// System  string The satellite's constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    The satellite's SV ID (use 0 for all SVs).
  /// Enabled bool   The satellite will be present/absent from the constellation
  ///

  public class IsSVEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSVEnabled."; }
    }

    internal const string CmdName = "IsSVEnabledResult";

    public IsSVEnabledResult()
      : base(CmdName)
    {}

    public IsSVEnabledResult(CommandBase relatedCommand, string system, int svId, bool enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable or disable each satellite for this constellation.
  ///
  /// Name    Type       Description
  /// ------- ---------- ------------------------------------------------------------------------------------------------------
  /// System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool Array of present/absent flags for the constellation
  ///

  public class EnableEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable or disable each satellite for this constellation."; }
    }

    internal const string CmdName = "EnableEachSV";

    public EnableEachSV()
      : base(CmdName)
    {}

    public EnableEachSV(string system, List<bool> enabled)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether each satellite is enabled or disabled for this constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------------------------------------------------------------------------------------------
  /// System string The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class IsEachSVEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether each satellite is enabled or disabled for this constellation."; }
    }

    internal const string CmdName = "IsEachSVEnabled";

    public IsEachSVEnabled()
      : base(CmdName)
    {}

    public IsEachSVEnabled(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsEachSVEnabled.
  ///
  /// Name    Type       Description
  /// ------- ---------- ------------------------------------------------------------------------------------------------------
  /// System  string     The satellites' constellation. Can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool Array of present/absent flags for the constellation
  ///

  public class IsEachSVEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsEachSVEnabled."; }
    }

    internal const string CmdName = "IsEachSVEnabledResult";

    public IsEachSVEnabledResult()
      : base(CmdName)
    {}

    public IsEachSVEnabledResult(CommandBase relatedCommand, string system, List<bool> enabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Enabled = enabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the enabled L1C CNAV2 pages
  ///
  /// Name     Type      Description
  /// -------- --------- -----------------
  /// Messages array int The enabled pages
  ///

  public class EnableCnav2Pages : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the enabled L1C CNAV2 pages"; }
    }

    internal const string CmdName = "EnableCnav2Pages";

    public EnableCnav2Pages()
      : base(CmdName)
    {}

    public EnableCnav2Pages(List<int> messages)
      : base(CmdName)
    {
      Messages = messages;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Messages")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<int> Messages
    {
      get { return GetValue("Messages").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Messages", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the enabled L1C CNAV2 pages
  ///
  /// 
  ///

  public class GetCnav2PagesEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the enabled L1C CNAV2 pages"; }
    }

    internal const string CmdName = "GetCnav2PagesEnabled";

    public GetCnav2PagesEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetCnav2PagesEnabled.
  ///
  /// Name     Type      Description
  /// -------- --------- -----------------
  /// Messages array int The enabled pages
  ///

  public class GetCnav2PagesEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetCnav2PagesEnabled."; }
    }

    internal const string CmdName = "GetCnav2PagesEnabledResult";

    public GetCnav2PagesEnabledResult()
      : base(CmdName)
    {}

    public GetCnav2PagesEnabledResult(CommandBase relatedCommand, List<int> messages)
      : base(CmdName, relatedCommand)
    {
      Messages = messages;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Messages")
      ;
      }
    }

    public List<int> Messages
    {
      get { return GetValue("Messages").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Messages", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the enabled SBAS messages. Message 63 is always enabled
  ///
  /// Name     Type      Description
  /// -------- --------- --------------------
  /// Messages array int The enabled messages
  ///

  public class EnableSbasMessages : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the enabled SBAS messages. Message 63 is always enabled"; }
    }

    internal const string CmdName = "EnableSbasMessages";

    public EnableSbasMessages()
      : base(CmdName)
    {}

    public EnableSbasMessages(List<int> messages)
      : base(CmdName)
    {
      Messages = messages;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Messages")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public List<int> Messages
    {
      get { return GetValue("Messages").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Messages", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the enabled SBAS messages. Message 63 is always enabled
  ///
  /// 
  ///

  public class GetSbasMessagesEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the enabled SBAS messages. Message 63 is always enabled"; }
    }

    internal const string CmdName = "GetSbasMessagesEnabled";

    public GetSbasMessagesEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetSbasMessagesEnabled.
  ///
  /// Name     Type      Description
  /// -------- --------- --------------------
  /// Messages array int The enabled messages
  ///

  public class GetSbasMessagesEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasMessagesEnabled."; }
    }

    internal const string CmdName = "GetSbasMessagesEnabledResult";

    public GetSbasMessagesEnabledResult()
      : base(CmdName)
    {}

    public GetSbasMessagesEnabledResult(CommandBase relatedCommand, List<int> messages)
      : base(CmdName, relatedCommand)
    {
      Messages = messages;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Messages")
      ;
      }
    }

    public List<int> Messages
    {
      get { return GetValue("Messages").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Messages", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the SBAS message update interval.
  ///
  /// Name           Type Description
  /// -------------- ---- -----------------------------------------------------------------------------------------------
  /// Message        int  The message type.
  /// UpdateInterval int  The message update interval in seconds. Accepted range is [6..300] and must be a multiple of 6.
  ///

  public class SetSbasMessageUpdateInterval : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the SBAS message update interval."; }
    }

    internal const string CmdName = "SetSbasMessageUpdateInterval";

    public SetSbasMessageUpdateInterval()
      : base(CmdName)
    {}

    public SetSbasMessageUpdateInterval(int message, int updateInterval)
      : base(CmdName)
    {
      Message = message;
      UpdateInterval = updateInterval;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Message")
        && Contains("UpdateInterval")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int Message
    {
      get { return GetValue("Message").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Message", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int UpdateInterval
    {
      get { return GetValue("UpdateInterval").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateInterval", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the SBAS message update interval.
  ///
  /// Name    Type Description
  /// ------- ---- -----------------
  /// Message int  The message type.
  ///

  public class GetSbasMessageUpdateInterval : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the SBAS message update interval."; }
    }

    internal const string CmdName = "GetSbasMessageUpdateInterval";

    public GetSbasMessageUpdateInterval()
      : base(CmdName)
    {}

    public GetSbasMessageUpdateInterval(int message)
      : base(CmdName)
    {
      Message = message;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Message")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int Message
    {
      get { return GetValue("Message").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Message", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSbasMessageUpdateInterval.
  ///
  /// Name           Type Description
  /// -------------- ---- -----------------------------------------------------------------------------------------------
  /// Message        int  The message type.
  /// UpdateInterval int  The message update interval in seconds. Accepted range is [6..300] and must be a multiple of 6.
  ///

  public class GetSbasMessageUpdateIntervalResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasMessageUpdateInterval."; }
    }

    internal const string CmdName = "GetSbasMessageUpdateIntervalResult";

    public GetSbasMessageUpdateIntervalResult()
      : base(CmdName)
    {}

    public GetSbasMessageUpdateIntervalResult(CommandBase relatedCommand, int message, int updateInterval)
      : base(CmdName, relatedCommand)
    {
      Message = message;
      UpdateInterval = updateInterval;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Message")
        && Contains("UpdateInterval")
      ;
      }
    }

    public int Message
    {
      get { return GetValue("Message").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Message", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int UpdateInterval
    {
      get { return GetValue("UpdateInterval").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("UpdateInterval", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export the SBAS message sequence into a csv file.
  ///
  /// Name        Type   Description
  /// ----------- ------ -----------------------------------------------------------------------------------------------
  /// Path        string The full path to the csv file.
  /// Overwriting bool   Overwrite an existing file if set to true, return an error if set to false and the file exists.
  ///

  public class ExportSbasMessageSequence : CommandBase
  {
    public override string Documentation
    {
      get { return "Export the SBAS message sequence into a csv file."; }
    }

    internal const string CmdName = "ExportSbasMessageSequence";

    public ExportSbasMessageSequence()
      : base(CmdName)
    {}

    public ExportSbasMessageSequence(string path, bool overwriting)
      : base(CmdName)
    {
      Path = path;
      Overwriting = overwriting;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Overwriting")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the systems monitored by SBAS.
  ///
  /// Name    Type         Description
  /// ------- ------------ ------------------------------------------------------------------------------------
  /// Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported
  ///

  public class SetSbasMonitoredSystems : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the systems monitored by SBAS."; }
    }

    internal const string CmdName = "SetSbasMonitoredSystems";

    public SetSbasMonitoredSystems()
      : base(CmdName)
    {}

    public SetSbasMonitoredSystems(List<string> systems)
      : base(CmdName)
    {
      Systems = systems;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Systems")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<string> Systems
    {
      get { return GetValue("Systems").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Systems", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the systems monitored by SBAS.
  ///
  /// 
  ///

  public class GetSbasMonitoredSystems : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the systems monitored by SBAS."; }
    }

    internal const string CmdName = "GetSbasMonitoredSystems";

    public GetSbasMonitoredSystems()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetSbasMonitoredSystems.
  ///
  /// Name    Type         Description
  /// ------- ------------ ------------------------------------------------------------------------------------
  /// Systems array string A list containing the name of monitored systems, only "GPS" and "SBAS" are supported
  ///

  public class GetSbasMonitoredSystemsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasMonitoredSystems."; }
    }

    internal const string CmdName = "GetSbasMonitoredSystemsResult";

    public GetSbasMonitoredSystemsResult()
      : base(CmdName)
    {}

    public GetSbasMonitoredSystemsResult(CommandBase relatedCommand, List<string> systems)
      : base(CmdName, relatedCommand)
    {
      Systems = systems;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Systems")
      ;
      }
    }

    public List<string> Systems
    {
      get { return GetValue("Systems").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Systems", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the UDREI value transmitted by SBAS for the satellite of the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------------------
  /// System string "GPS" or "SBAS".
  /// SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
  /// Udrei  int    The UDREI value.
  ///

  public class SetUdreiForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the UDREI value transmitted by SBAS for the satellite of the specified constellation."; }
    }

    internal const string CmdName = "SetUdreiForSV";

    public SetUdreiForSV()
      : base(CmdName)
    {}

    public SetUdreiForSV(string system, int svId, int udrei)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Udrei = udrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Udrei")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Udrei
    {
      get { return GetValue("Udrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Udrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the UDREI value transmitted by SBAS for the satellite of the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------------------
  /// System string "GPS" or "SBAS".
  /// SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
  ///

  public class GetUdreiForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the UDREI value transmitted by SBAS for the satellite of the specified constellation."; }
    }

    internal const string CmdName = "GetUdreiForSV";

    public GetUdreiForSV()
      : base(CmdName)
    {}

    public GetUdreiForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetUdreiForSV.
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------------------------
  /// System string "GPS" or "SBAS".
  /// SvId   int    The satellite's SV ID (use 0 to apply modification to all SVs).
  /// Udrei  int    The UDREI value.
  ///

  public class GetUdreiForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetUdreiForSV."; }
    }

    internal const string CmdName = "GetUdreiForSVResult";

    public GetUdreiForSVResult()
      : base(CmdName)
    {}

    public GetUdreiForSVResult(CommandBase relatedCommand, string system, int svId, int udrei)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Udrei = udrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Udrei")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Udrei
    {
      get { return GetValue("Udrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Udrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the UDREI value transmitted by SBAS for all satellites of the specified constellation.
  ///
  /// Name   Type      Description
  /// ------ --------- --------------------------------------------------------------------------------------------------------------------------
  /// System string    "GPS" or "SBAS".
  /// Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).
  ///

  public class SetUdreiForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the UDREI value transmitted by SBAS for all satellites of the specified constellation."; }
    }

    internal const string CmdName = "SetUdreiForEachSV";

    public SetUdreiForEachSV()
      : base(CmdName)
    {}

    public SetUdreiForEachSV(string system, List<int> udreis)
      : base(CmdName)
    {
      System = system;
      Udreis = udreis;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Udreis")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Udreis
    {
      get { return GetValue("Udreis").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Udreis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the UDREI value transmitted by SBAS for all satellites of the specified constellation.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------
  /// System string "GPS" or "SBAS".
  ///

  public class GetUdreiForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the UDREI value transmitted by SBAS for all satellites of the specified constellation."; }
    }

    internal const string CmdName = "GetUdreiForEachSV";

    public GetUdreiForEachSV()
      : base(CmdName)
    {}

    public GetUdreiForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetUdreiForEachSV.
  ///
  /// Name   Type      Description
  /// ------ --------- --------------------------------------------------------------------------------------------------------------------------
  /// System string    "GPS" or "SBAS".
  /// Udreis array int UDREI value to set for each satellite. Zero based index (index 0 => UDREI for SV ID 1, index 1 => UDREI for SV ID 2, etc).
  ///

  public class GetUdreiForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetUdreiForEachSV."; }
    }

    internal const string CmdName = "GetUdreiForEachSVResult";

    public GetUdreiForEachSVResult()
      : base(CmdName)
    {}

    public GetUdreiForEachSVResult(CommandBase relatedCommand, string system, List<int> udreis)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Udreis = udreis;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Udreis")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Udreis
    {
      get { return GetValue("Udreis").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Udreis", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Possible values for antenna patterns
  ///
  
  public enum AntennaPatternType { Default, AntennaNone, Custom }


  ///
  /// The different GNSS bands
  ///
  
  public enum GNSSBand { L1, L2, L5, E6 }


  ///
  /// Ask the master to broadcast its configuration to all slaves.
  ///
  /// 
  ///

  public class BroadcastConfig : CommandBase
  {
    public override string Documentation
    {
      get { return "Ask the master to broadcast its configuration to all slaves."; }
    }

    internal const string CmdName = "BroadcastConfig";

    public BroadcastConfig()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Cancel the current configuration broadcast if any.
  ///
  /// 
  ///

  public class CancelBroadcastConfig : CommandBase
  {
    public override string Documentation
    {
      get { return "Cancel the current configuration broadcast if any."; }
    }

    internal const string CmdName = "CancelBroadcastConfig";

    public CancelBroadcastConfig()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Set wether the master should send its configuration to every slave when simulation start.
  ///
  /// Name             Type Description
  /// ---------------- ---- --------------------------------------------------------------
  /// BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.
  ///

  public class SetConfigBroadcastOnStart : CommandBase
  {
    public override string Documentation
    {
      get { return "Set wether the master should send its configuration to every slave when simulation start."; }
    }

    internal const string CmdName = "SetConfigBroadcastOnStart";

    public SetConfigBroadcastOnStart()
      : base(CmdName)
    {}

    public SetConfigBroadcastOnStart(bool broadcastOnStart)
      : base(CmdName)
    {
      BroadcastOnStart = broadcastOnStart;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("BroadcastOnStart")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool BroadcastOnStart
    {
      get { return GetValue("BroadcastOnStart").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("BroadcastOnStart", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get wether the master should send its configuration to every slave when simulation start.
  ///
  /// 
  ///

  public class GetConfigBroadcastOnStart : CommandBase
  {
    public override string Documentation
    {
      get { return "Get wether the master should send its configuration to every slave when simulation start."; }
    }

    internal const string CmdName = "GetConfigBroadcastOnStart";

    public GetConfigBroadcastOnStart()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetConfigBroadcastOnStart.
  ///
  /// Name             Type Description
  /// ---------------- ---- --------------------------------------------------------------
  /// BroadcastOnStart bool True to broadcast the configuration on start, false otherwise.
  ///

  public class GetConfigBroadcastOnStartResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetConfigBroadcastOnStart."; }
    }

    internal const string CmdName = "GetConfigBroadcastOnStartResult";

    public GetConfigBroadcastOnStartResult()
      : base(CmdName)
    {}

    public GetConfigBroadcastOnStartResult(CommandBase relatedCommand, bool broadcastOnStart)
      : base(CmdName, relatedCommand)
    {
      BroadcastOnStart = broadcastOnStart;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("BroadcastOnStart")
      ;
      }
    }

    public bool BroadcastOnStart
    {
      get { return GetValue("BroadcastOnStart").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("BroadcastOnStart", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// The different kinds of filters for configuration.
  ///
  
  public enum ConfigFilter { Radios, OutputAndRadios, VehicleMotion, VehicleAntenna, Interference, PlugIn }


  ///
  /// Set the filter for configuration broadcast.
  ///
  /// Name   Type               Description
  /// ------ ------------------ ------------------------------------------------------------------------------
  /// Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.
  ///

  public class SetConfigBroadcastFilter : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the filter for configuration broadcast."; }
    }

    internal const string CmdName = "SetConfigBroadcastFilter";

    public SetConfigBroadcastFilter()
      : base(CmdName)
    {}

    public SetConfigBroadcastFilter(List<ConfigFilter> filter)
      : base(CmdName)
    {
      Filter = filter;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Filter")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<ConfigFilter> Filter
    {
      get { return GetValue("Filter").ToObject<List<ConfigFilter>>(CommandBase.Serializer); }
      set
      {
          SetValue("Filter", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the filter for configuration broadcast.
  ///
  /// 
  ///

  public class GetConfigBroadcastFilter : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the filter for configuration broadcast."; }
    }

    internal const string CmdName = "GetConfigBroadcastFilter";

    public GetConfigBroadcastFilter()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetConfigBroadcastFilter.
  ///
  /// Name   Type               Description
  /// ------ ------------------ ------------------------------------------------------------------------------
  /// Filter array ConfigFilter Every configuration section set in this array will be excluded from broadcast.
  ///

  public class GetConfigBroadcastFilterResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetConfigBroadcastFilter."; }
    }

    internal const string CmdName = "GetConfigBroadcastFilterResult";

    public GetConfigBroadcastFilterResult()
      : base(CmdName)
    {}

    public GetConfigBroadcastFilterResult(CommandBase relatedCommand, List<ConfigFilter> filter)
      : base(CmdName, relatedCommand)
    {
      Filter = filter;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Filter")
      ;
      }
    }

    public List<ConfigFilter> Filter
    {
      get { return GetValue("Filter").ToObject<List<ConfigFilter>>(CommandBase.Serializer); }
      set
      {
          SetValue("Filter", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the satellite pseudorange noise constant offset.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    Satellite SV ID.
  /// Enabled bool   If true, the offset is enabled (applied)
  /// Offset  double The constant offset in metters
  ///

  public class SetPseudorangeNoiseOffsetForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise constant offset."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseOffsetForSV";

    public SetPseudorangeNoiseOffsetForSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseOffsetForSV(string system, int svId, bool enabled, double offset)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise constant offset.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    Satellite SV ID.
  ///

  public class GetPseudorangeNoiseOffsetForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise constant offset."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseOffsetForSV";

    public GetPseudorangeNoiseOffsetForSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseOffsetForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseOffsetForSV.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    Satellite SV ID.
  /// Enabled bool   If true, the offset is enabled (applied)
  /// Offset  double The constant offset in metters
  ///

  public class GetPseudorangeNoiseOffsetForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseOffsetForSV."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseOffsetForSVResult";

    public GetPseudorangeNoiseOffsetForSVResult()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseOffsetForSVResult(CommandBase relatedCommand, string system, int svId, bool enabled, double offset)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Enabled = enabled;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Enabled")
        && Contains("Offset")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use SetPseudorangeNoiseOffsetForEachSV.
  /// 
  /// Set the satellite pseudorange noise constant offset for all satellites.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool   If true, the offset is enabled (applied)
  /// Offset  array double The constant offset in metters
  ///

  public class SetAllSatellitesPseudorangeNoiseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use SetPseudorangeNoiseOffsetForEachSV.\n\nSet the satellite pseudorange noise constant offset for all satellites."; }
    }

    internal const string CmdName = "SetAllSatellitesPseudorangeNoiseOffset";

    public SetAllSatellitesPseudorangeNoiseOffset()
      : base(CmdName)
    {}

    public SetAllSatellitesPseudorangeNoiseOffset(string system, List<bool> enabled, List<double> offset)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the satellite pseudorange noise constant offset for all satellites.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool   If true, the offset is enabled (applied)
  /// Offset  array double The constant offset in metters
  ///

  public class SetPseudorangeNoiseOffsetForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise constant offset for all satellites."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseOffsetForEachSV";

    public SetPseudorangeNoiseOffsetForEachSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseOffsetForEachSV(string system, List<bool> enabled, List<double> offset)
      : base(CmdName)
    {
      System = system;
      Enabled = enabled;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use GetPseudorangeNoiseOffsetForEachSV.
  /// 
  /// Get the satellite pseudorange noise constant offset for all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetAllSatellitesPseudorangeNoiseOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetAllSatellitesPseudorangeNoiseOffset is deprecated since 21.3. You may use GetPseudorangeNoiseOffsetForEachSV.\n\nGet the satellite pseudorange noise constant offset for all satellites."; }
    }

    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseOffset";

    public GetAllSatellitesPseudorangeNoiseOffset()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseOffset(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise constant offset for all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class GetPseudorangeNoiseOffsetForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise constant offset for all satellites."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseOffsetForEachSV";

    public GetPseudorangeNoiseOffsetForEachSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseOffsetForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseOffsetForEachSV.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool   If true, the offset is enabled (applied)
  /// Offset  array double The constant offset in metters
  ///

  public class GetAllSatellitesPseudorangeNoiseOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseOffsetForEachSV."; }
    }
  
    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseOffsetResult";

    public GetAllSatellitesPseudorangeNoiseOffsetResult()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseOffsetResult(CommandBase relatedCommand, string system, List<bool> enabled, List<double> offset)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Enabled = enabled;
      Offset = offset;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Enabled")
        && Contains("Offset")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("System", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Enabled array bool   If true, the offset is enabled (applied)
  /// Offset  array double The constant offset in metters
  ///

  public class GetPseudorangeNoiseOffsetForEachSVResult : GetAllSatellitesPseudorangeNoiseOffsetResult
  {
    internal new const string CmdName = "GetPseudorangeNoiseOffsetForEachSVResult";

    public GetPseudorangeNoiseOffsetForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetPseudorangeNoiseOffsetForEachSVResult(CommandBase relatedCommand, string system, List<bool> enabled, List<double> offset)
      : base(relatedCommand, system, enabled, offset)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set the satellite pseudorange noise sine wave attributes.
  ///
  /// Name      Type   Description
  /// --------- ------ ----------------------------------------------------------------
  /// System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId      int    The satellite's SV ID
  /// SineWave  int    Sine wave number (0 or 1)
  /// Enabled   bool   If true, sine wave is enabled
  /// Amplitude double Sine wave amplitude in meters
  /// Period    int    Sine wave period in seconds (minimum 3 seconds)
  /// Offset    double Phase offset in radians
  ///

  public class SetPseudorangeNoiseSineWaveForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise sine wave attributes."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseSineWaveForSV";

    public SetPseudorangeNoiseSineWaveForSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseSineWaveForSV(string system, int svId, int sineWave, bool enabled, double amplitude, int period, double offset)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SineWave = sineWave;
      Enabled = enabled;
      Amplitude = amplitude;
      Period = period;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SineWave")
        && Contains("Enabled")
        && Contains("Amplitude")
        && Contains("Period")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Amplitude
    {
      get { return GetValue("Amplitude").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Amplitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Period
    {
      get { return GetValue("Period").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Period", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise sine wave attributes.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------------
  /// System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId     int    The satellite's SV ID
  /// SineWave int    Sine wave number (0 or 1)
  ///

  public class GetPseudorangeNoiseSineWaveForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise sine wave attributes."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseSineWaveForSV";

    public GetPseudorangeNoiseSineWaveForSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseSineWaveForSV(string system, int svId, int sineWave)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      SineWave = sineWave;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SineWave")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseSineWaveForSV.
  ///
  /// Name      Type   Description
  /// --------- ------ ----------------------------------------------------------------
  /// System    string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId      int    The satellite's SV ID
  /// SineWave  int    Sine wave number (0 or 1)
  /// Enabled   bool   If true, sine wave is enabled
  /// Amplitude double Sine wave amplitude in meters
  /// Period    int    Sine wave period in seconds (minimum 3 seconds)
  /// Offset    double Phase offset in radians
  ///

  public class GetPseudorangeNoiseSineWaveForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseSineWaveForSV."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseSineWaveForSVResult";

    public GetPseudorangeNoiseSineWaveForSVResult()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseSineWaveForSVResult(CommandBase relatedCommand, string system, int svId, int sineWave, bool enabled, double amplitude, int period, double offset)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      SineWave = sineWave;
      Enabled = enabled;
      Amplitude = amplitude;
      Period = period;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("SineWave")
        && Contains("Enabled")
        && Contains("Amplitude")
        && Contains("Period")
        && Contains("Offset")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Amplitude
    {
      get { return GetValue("Amplitude").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Amplitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Period
    {
      get { return GetValue("Period").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Period", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Offset
    {
      get { return GetValue("Offset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use SetPseudorangeNoiseSineWaveForEachSV.
  /// 
  /// Set the satellite pseudorange noise sine wave attributes for all satellites.
  ///
  /// Name      Type         Description
  /// --------- ------------ ----------------------------------------------------------------
  /// System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave  int          Sine wave number (0 or 1)
  /// Enabled   array bool   If true, sine wave is enabled
  /// Amplitude array double Sine wave amplitude in meters
  /// Period    array int    sine wave period in seconds
  /// Offset    array double Phase offset in radians
  ///

  public class SetAllSatellitesPseudorangeNoiseSineWave : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use SetPseudorangeNoiseSineWaveForEachSV.\n\nSet the satellite pseudorange noise sine wave attributes for all satellites."; }
    }

    internal const string CmdName = "SetAllSatellitesPseudorangeNoiseSineWave";

    public SetAllSatellitesPseudorangeNoiseSineWave()
      : base(CmdName)
    {}

    public SetAllSatellitesPseudorangeNoiseSineWave(string system, int sineWave, List<bool> enabled, List<double> amplitude, List<int> period, List<double> offset)
      : base(CmdName)
    {
      System = system;
      SineWave = sineWave;
      Enabled = enabled;
      Amplitude = amplitude;
      Period = period;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SineWave")
        && Contains("Enabled")
        && Contains("Amplitude")
        && Contains("Period")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Amplitude
    {
      get { return GetValue("Amplitude").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Amplitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Period
    {
      get { return GetValue("Period").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Period", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the satellite pseudorange noise sine wave attributes for all satellites.
  ///
  /// Name      Type         Description
  /// --------- ------------ ----------------------------------------------------------------
  /// System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave  int          Sine wave number (0 or 1)
  /// Enabled   array bool   If true, sine wave is enabled
  /// Amplitude array double Sine wave amplitude in meters
  /// Period    array int    sine wave period in seconds
  /// Offset    array double Phase offset in radians
  ///

  public class SetPseudorangeNoiseSineWaveForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise sine wave attributes for all satellites."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseSineWaveForEachSV";

    public SetPseudorangeNoiseSineWaveForEachSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseSineWaveForEachSV(string system, int sineWave, List<bool> enabled, List<double> amplitude, List<int> period, List<double> offset)
      : base(CmdName)
    {
      System = system;
      SineWave = sineWave;
      Enabled = enabled;
      Amplitude = amplitude;
      Period = period;
      Offset = offset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SineWave")
        && Contains("Enabled")
        && Contains("Amplitude")
        && Contains("Period")
        && Contains("Offset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Amplitude
    {
      get { return GetValue("Amplitude").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Amplitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Period
    {
      get { return GetValue("Period").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Period", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use GetPseudorangeNoiseSineWaveForEachSV.
  /// 
  /// Get the satellite pseudorange noise sine wave attributes for all satellites.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------------
  /// System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave int    Sine wave number (0 or 1)
  ///

  public class GetAllSatellitesPseudorangeNoiseSineWave : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetAllSatellitesPseudorangeNoiseSineWave is deprecated since 21.3. You may use GetPseudorangeNoiseSineWaveForEachSV.\n\nGet the satellite pseudorange noise sine wave attributes for all satellites."; }
    }

    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseSineWave";

    public GetAllSatellitesPseudorangeNoiseSineWave()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseSineWave(string system, int sineWave)
      : base(CmdName)
    {
      System = system;
      SineWave = sineWave;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SineWave")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise sine wave attributes for all satellites.
  ///
  /// Name     Type   Description
  /// -------- ------ ----------------------------------------------------------------
  /// System   string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave int    Sine wave number (0 or 1)
  ///

  public class GetPseudorangeNoiseSineWaveForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise sine wave attributes for all satellites."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseSineWaveForEachSV";

    public GetPseudorangeNoiseSineWaveForEachSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseSineWaveForEachSV(string system, int sineWave)
      : base(CmdName)
    {
      System = system;
      SineWave = sineWave;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SineWave")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseSineWaveForEachSV.
  ///
  /// Name      Type         Description
  /// --------- ------------ ----------------------------------------------------------------
  /// System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave  int          Sine wave number (0 or 1)
  /// Enabled   array bool   If true, sine wave is enabled
  /// Amplitude array double Sine wave amplitude in meters
  /// Period    array int    sine wave period in seconds
  /// Offset    array double Phase offset in radians
  ///

  public class GetAllSatellitesPseudorangeNoiseSineWaveResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseSineWaveForEachSV."; }
    }
  
    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseSineWaveResult";

    public GetAllSatellitesPseudorangeNoiseSineWaveResult()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseSineWaveResult(CommandBase relatedCommand, string system, int sineWave, List<bool> enabled, List<double> amplitude, List<int> period, List<double> offset)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SineWave = sineWave;
      Enabled = enabled;
      Amplitude = amplitude;
      Period = period;
      Offset = offset;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SineWave")
        && Contains("Enabled")
        && Contains("Amplitude")
        && Contains("Period")
        && Contains("Offset")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("System", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public int SineWave
    {
      get { return GetValue("SineWave").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("SineWave", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Amplitude
    {
      get { return GetValue("Amplitude").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Amplitude", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<int> Period
    {
      get { return GetValue("Period").ToObject<List<int>>(CommandBase.Serializer); }
      set { SetValue("Period", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Offset
    {
      get { return GetValue("Offset").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Offset", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name      Type         Description
  /// --------- ------------ ----------------------------------------------------------------
  /// System    string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SineWave  int          Sine wave number (0 or 1)
  /// Enabled   array bool   If true, sine wave is enabled
  /// Amplitude array double Sine wave amplitude in meters
  /// Period    array int    sine wave period in seconds
  /// Offset    array double Phase offset in radians
  ///

  public class GetPseudorangeNoiseSineWaveForEachSVResult : GetAllSatellitesPseudorangeNoiseSineWaveResult
  {
    internal new const string CmdName = "GetPseudorangeNoiseSineWaveForEachSVResult";

    public GetPseudorangeNoiseSineWaveForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetPseudorangeNoiseSineWaveForEachSVResult(CommandBase relatedCommand, string system, int sineWave, List<bool> enabled, List<double> amplitude, List<int> period, List<double> offset)
      : base(relatedCommand, system, sineWave, enabled, amplitude, period, offset)
    {
      Name = CmdName;
    }
  }


  ///
  /// Set the satellite pseudorange noise Gauss-Markov process attributes.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    Satellite SV ID.
  /// Process int    Gauss-Markov Process number (0 or 1)
  /// Enabled bool   If true, Gauss-Markov process is enabled
  /// Sigma   double Standard devition in meters [0..5000]
  /// Time    double Time constant [1..2000]
  /// Seed    int    Random seed
  ///

  public class SetPseudorangeNoiseGaussMarkovForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise Gauss-Markov process attributes."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseGaussMarkovForSV";

    public SetPseudorangeNoiseGaussMarkovForSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseGaussMarkovForSV(string system, int svId, int process, bool enabled, double sigma, double time, int seed)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Process = process;
      Enabled = enabled;
      Sigma = sigma;
      Time = time;
      Seed = seed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Process")
        && Contains("Enabled")
        && Contains("Sigma")
        && Contains("Time")
        && Contains("Seed")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Sigma
    {
      get { return GetValue("Sigma").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Sigma", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Seed
    {
      get { return GetValue("Seed").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise Gauss-Markov process attributes.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    Satellite SV ID.
  /// Process int    Gauss-Markov Process number (0 or 1)
  ///

  public class GetPseudorangeNoiseGaussMarkovForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise Gauss-Markov process attributes."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseGaussMarkovForSV";

    public GetPseudorangeNoiseGaussMarkovForSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseGaussMarkovForSV(string system, int svId, int process)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Process = process;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Process")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseGaussMarkovForSV.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId    int    Satellite SV ID.
  /// Process int    Gauss-Markov Process number (0 or 1)
  /// Enabled bool   If true, Gauss-Markov process is enabled
  /// Sigma   double Standard devition in meters [0..5000]
  /// Time    double Time constant [1..2000]
  /// Seed    int    Random seed
  ///

  public class GetPseudorangeNoiseGaussMarkovForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseGaussMarkovForSV."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseGaussMarkovForSVResult";

    public GetPseudorangeNoiseGaussMarkovForSVResult()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseGaussMarkovForSVResult(CommandBase relatedCommand, string system, int svId, int process, bool enabled, double sigma, double time, int seed)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Process = process;
      Enabled = enabled;
      Sigma = sigma;
      Time = time;
      Seed = seed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Process")
        && Contains("Enabled")
        && Contains("Sigma")
        && Contains("Time")
        && Contains("Seed")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Sigma
    {
      get { return GetValue("Sigma").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Sigma", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Seed
    {
      get { return GetValue("Seed").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use SetPseudorangeNoiseGaussMarkovForEachSV.
  /// 
  /// Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int          Gauss-Markov Process number (0 or 1)
  /// Enabled array bool   If true, Gauss-Markov process is enabled
  /// Sigma   array double Standard devition
  /// Time    array double Time constant
  /// Seed    array int    Random seed
  ///

  public class SetAllSatellitesPseudorangeNoiseGaussMarkov : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use SetPseudorangeNoiseGaussMarkovForEachSV.\n\nSet the satellite pseudorange noise Gauss-Markov process attributes for all satellites."; }
    }

    internal const string CmdName = "SetAllSatellitesPseudorangeNoiseGaussMarkov";

    public SetAllSatellitesPseudorangeNoiseGaussMarkov()
      : base(CmdName)
    {}

    public SetAllSatellitesPseudorangeNoiseGaussMarkov(string system, int process, List<bool> enabled, List<double> sigma, List<double> time, List<int> seed)
      : base(CmdName)
    {
      System = system;
      Process = process;
      Enabled = enabled;
      Sigma = sigma;
      Time = time;
      Seed = seed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Process")
        && Contains("Enabled")
        && Contains("Sigma")
        && Contains("Time")
        && Contains("Seed")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Sigma
    {
      get { return GetValue("Sigma").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Sigma", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Time
    {
      get { return GetValue("Time").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Seed
    {
      get { return GetValue("Seed").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int          Gauss-Markov Process number (0 or 1)
  /// Enabled array bool   If true, Gauss-Markov process is enabled
  /// Sigma   array double Standard devition
  /// Time    array double Time constant
  /// Seed    array int    Random seed
  ///

  public class SetPseudorangeNoiseGaussMarkovForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite pseudorange noise Gauss-Markov process attributes for all satellites."; }
    }

    internal const string CmdName = "SetPseudorangeNoiseGaussMarkovForEachSV";

    public SetPseudorangeNoiseGaussMarkovForEachSV()
      : base(CmdName)
    {}

    public SetPseudorangeNoiseGaussMarkovForEachSV(string system, int process, List<bool> enabled, List<double> sigma, List<double> time, List<int> seed)
      : base(CmdName)
    {
      System = system;
      Process = process;
      Enabled = enabled;
      Sigma = sigma;
      Time = time;
      Seed = seed;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Process")
        && Contains("Enabled")
        && Contains("Sigma")
        && Contains("Time")
        && Contains("Seed")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Sigma
    {
      get { return GetValue("Sigma").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Sigma", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<double> Time
    {
      get { return GetValue("Time").ToObject<List<double>>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> Seed
    {
      get { return GetValue("Seed").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use GetPseudorangeNoiseGaussMarkovForEachSV.
  /// 
  /// Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int    Gauss-Markov Process number (0 or 1)
  ///

  public class GetAllSatellitesPseudorangeNoiseGaussMarkov : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use GetPseudorangeNoiseGaussMarkovForEachSV.\n\nGet the satellite pseudorange noise Gauss-Markov process attributes for all satellites."; }
    }

    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseGaussMarkov";

    public GetAllSatellitesPseudorangeNoiseGaussMarkov()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseGaussMarkov(string system, int process)
      : base(CmdName)
    {
      System = system;
      Process = process;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Process")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites.
  ///
  /// Name    Type   Description
  /// ------- ------ ----------------------------------------------------------------
  /// System  string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int    Gauss-Markov Process number (0 or 1)
  ///

  public class GetPseudorangeNoiseGaussMarkovForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite pseudorange noise Gauss-Markov process attributes for all satellites."; }
    }

    internal const string CmdName = "GetPseudorangeNoiseGaussMarkovForEachSV";

    public GetPseudorangeNoiseGaussMarkovForEachSV()
      : base(CmdName)
    {}

    public GetPseudorangeNoiseGaussMarkovForEachSV(string system, int process)
      : base(CmdName)
    {
      System = system;
      Process = process;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Process")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Process", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPseudorangeNoiseGaussMarkovForEachSV.
  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int          Gauss-Markov Process number (0 or 1)
  /// Enabled array bool   If true, Gauss-Markov process is enabled
  /// Sigma   array double Standard devition
  /// Time    array double Time constant
  /// Seed    array int    Random seed
  ///

  public class GetAllSatellitesPseudorangeNoiseGaussMarkovResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPseudorangeNoiseGaussMarkovForEachSV."; }
    }
  
    internal const string CmdName = "GetAllSatellitesPseudorangeNoiseGaussMarkovResult";

    public GetAllSatellitesPseudorangeNoiseGaussMarkovResult()
      : base(CmdName)
    {}

    public GetAllSatellitesPseudorangeNoiseGaussMarkovResult(CommandBase relatedCommand, string system, int process, List<bool> enabled, List<double> sigma, List<double> time, List<int> seed)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Process = process;
      Enabled = enabled;
      Sigma = sigma;
      Time = time;
      Seed = seed;
    }

    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Process")
        && Contains("Enabled")
        && Contains("Sigma")
        && Contains("Time")
        && Contains("Seed")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set { SetValue("System", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public int Process
    {
      get { return GetValue("Process").ToObject<int>(CommandBase.Serializer); }
      set { SetValue("Process", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<bool> Enabled
    {
      get { return GetValue("Enabled").ToObject<List<bool>>(CommandBase.Serializer); }
      set { SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Sigma
    {
      get { return GetValue("Sigma").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Sigma", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<double> Time
    {
      get { return GetValue("Time").ToObject<List<double>>(CommandBase.Serializer); }
      set { SetValue("Time", JToken.FromObject(value, CommandBase.Serializer)); }
    }

    public List<int> Seed
    {
      get { return GetValue("Seed").ToObject<List<int>>(CommandBase.Serializer); }
      set { SetValue("Seed", JToken.FromObject(value, CommandBase.Serializer)); }
    }
  }

  ///
  /// Name    Type         Description
  /// ------- ------------ ----------------------------------------------------------------
  /// System  string       "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// Process int          Gauss-Markov Process number (0 or 1)
  /// Enabled array bool   If true, Gauss-Markov process is enabled
  /// Sigma   array double Standard devition
  /// Time    array double Time constant
  /// Seed    array int    Random seed
  ///

  public class GetPseudorangeNoiseGaussMarkovForEachSVResult : GetAllSatellitesPseudorangeNoiseGaussMarkovResult
  {
    internal new const string CmdName = "GetPseudorangeNoiseGaussMarkovForEachSVResult";

    public GetPseudorangeNoiseGaussMarkovForEachSVResult()
      : base()
    {
       Name = CmdName;
    }

    public GetPseudorangeNoiseGaussMarkovForEachSVResult(CommandBase relatedCommand, string system, int process, List<bool> enabled, List<double> sigma, List<double> time, List<int> seed)
      : base(relatedCommand, system, process, enabled, sigma, time, seed)
    {
      Name = CmdName;
    }
  }


  ///
  /// Please note the command RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV.
  /// 
  /// Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov is deprecated since 21.3. You may use RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV.\n\nGenerate new seeds for pseudorange noise Gauss-Markov process error on all satellites."; }
    }

    internal const string CmdName = "RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov";

    public RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov()
      : base(CmdName)
    {}

    public RandomizeSeedsForAllSatellitesPseudorangeNoiseGaussMarkov(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  ///

  public class RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Generate new seeds for pseudorange noise Gauss-Markov process error on all satellites."; }
    }

    internal const string CmdName = "RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV";

    public RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV()
      : base(CmdName)
    {}

    public RandomizePseudorangeNoiseGaussMarkovSeedsForAllSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Relative orbit frame.
  ///
  /// Name Type   Description
  /// ---- ------ -------------------------------------------------------------------
  /// R    double The radial component of the relative position vector, in meter
  /// I    double The in-track component of the relative position vector, in meter
  /// C    double The cross-track component of the relative position vector, in meter
  ///

  public struct RIC
  {
    public double R;
    public double I;
    public double C;
  }


  ///
  /// Set the satellite ephemeris error.
  ///
  /// Name     Type   Description
  /// -------- ------ -----------------------------------------------------------------------------------
  /// System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
  /// SvId     int    Satellite SV ID.
  /// Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
  /// DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
  /// DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.
  ///

  public class SetEphemerisErrorForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the satellite ephemeris error."; }
    }

    internal const string CmdName = "SetEphemerisErrorForSV";

    public SetEphemerisErrorForSV()
      : base(CmdName)
    {}

    public SetEphemerisErrorForSV(string system, int svId, RIC orbit, double deltaAf0, double deltaAf1)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      Orbit = orbit;
      DeltaAf0 = deltaAf0;
      DeltaAf1 = deltaAf1;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Orbit")
        && Contains("DeltaAf0")
        && Contains("DeltaAf1")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public RIC Orbit
    {
      get { return GetValue("Orbit").ToObject<RIC>(CommandBase.Serializer); }
      set
      {
          SetValue("Orbit", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DeltaAf0
    {
      get { return GetValue("DeltaAf0").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaAf0", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DeltaAf1
    {
      get { return GetValue("DeltaAf1").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaAf1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the satellite ephemeris error.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------
  /// System string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
  /// SvId   int    Satellite SV ID.
  ///

  public class GetEphemerisErrorForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the satellite ephemeris error."; }
    }

    internal const string CmdName = "GetEphemerisErrorForSV";

    public GetEphemerisErrorForSV()
      : base(CmdName)
    {}

    public GetEphemerisErrorForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetEphemerisErrorForSV.
  ///
  /// Name     Type   Description
  /// -------- ------ -----------------------------------------------------------------------------------
  /// System   string "GPS", "Galileo", "GLONASS", "BeiDou", "QZSS" or "NavIC"
  /// SvId     int    Satellite SV ID.
  /// Orbit    RIC    The orbit error, in relative orbit frame. In-track error not available for GLONASS.
  /// DeltaAf0 double The clock bias error, in second. DeltaTaun for GLONASS.
  /// DeltaAf1 double The clock drift error, in second/second. Not available for GLONASS.
  ///

  public class GetEphemerisErrorForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetEphemerisErrorForSV."; }
    }

    internal const string CmdName = "GetEphemerisErrorForSVResult";

    public GetEphemerisErrorForSVResult()
      : base(CmdName)
    {}

    public GetEphemerisErrorForSVResult(CommandBase relatedCommand, string system, int svId, RIC orbit, double deltaAf0, double deltaAf1)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      Orbit = orbit;
      DeltaAf0 = deltaAf0;
      DeltaAf1 = deltaAf1;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("Orbit")
        && Contains("DeltaAf0")
        && Contains("DeltaAf1")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public RIC Orbit
    {
      get { return GetValue("Orbit").ToObject<RIC>(CommandBase.Serializer); }
      set
      {
          SetValue("Orbit", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DeltaAf0
    {
      get { return GetValue("DeltaAf0").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaAf0", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double DeltaAf1
    {
      get { return GetValue("DeltaAf1").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaAf1", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether SBAS message 25 should send velocity corrections
  ///
  /// Name        Type Description
  /// ----------- ---- --------------------------------------------------------
  /// UseVelocity bool Whether SBAS message 25 should send velocity corrections
  ///

  public class SetUsingVelocityInSbasMessage25 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether SBAS message 25 should send velocity corrections"; }
    }

    internal const string CmdName = "SetUsingVelocityInSbasMessage25";

    public SetUsingVelocityInSbasMessage25()
      : base(CmdName)
    {}

    public SetUsingVelocityInSbasMessage25(bool useVelocity)
      : base(CmdName)
    {
      UseVelocity = useVelocity;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UseVelocity")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool UseVelocity
    {
      get { return GetValue("UseVelocity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UseVelocity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether SBAS message 25 should send velocity corrections
  ///
  /// 
  ///

  public class IsUsingVelocityInSbasMessage25 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether SBAS message 25 should send velocity corrections"; }
    }

    internal const string CmdName = "IsUsingVelocityInSbasMessage25";

    public IsUsingVelocityInSbasMessage25()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsUsingVelocityInSbasMessage25.
  ///
  /// Name        Type Description
  /// ----------- ---- --------------------------------------------------------
  /// UseVelocity bool Whether SBAS message 25 should send velocity corrections
  ///

  public class IsUsingVelocityInSbasMessage25Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsUsingVelocityInSbasMessage25."; }
    }

    internal const string CmdName = "IsUsingVelocityInSbasMessage25Result";

    public IsUsingVelocityInSbasMessage25Result()
      : base(CmdName)
    {}

    public IsUsingVelocityInSbasMessage25Result(CommandBase relatedCommand, bool useVelocity)
      : base(CmdName, relatedCommand)
    {
      UseVelocity = useVelocity;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UseVelocity")
      ;
      }
    }

    public bool UseVelocity
    {
      get { return GetValue("UseVelocity").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("UseVelocity", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether SBAS should transmit message 2 instead of message 0.
  ///
  /// Name             Type Description
  /// ---------------- ---- ---------------------------------------------------------
  /// TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.
  ///

  public class SetTransmitMessage2InSbasMessage0 : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether SBAS should transmit message 2 instead of message 0."; }
    }

    internal const string CmdName = "SetTransmitMessage2InSbasMessage0";

    public SetTransmitMessage2InSbasMessage0()
      : base(CmdName)
    {}

    public SetTransmitMessage2InSbasMessage0(bool transmitMessage2)
      : base(CmdName)
    {
      TransmitMessage2 = transmitMessage2;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitMessage2")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool TransmitMessage2
    {
      get { return GetValue("TransmitMessage2").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitMessage2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether SBAS should transmit message 2 instead of message 0.
  ///
  /// 
  ///

  public class IsTransmitMessage2InSbasMessage0 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether SBAS should transmit message 2 instead of message 0."; }
    }

    internal const string CmdName = "IsTransmitMessage2InSbasMessage0";

    public IsTransmitMessage2InSbasMessage0()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsTransmitMessage2InSbasMessage0.
  ///
  /// Name             Type Description
  /// ---------------- ---- ---------------------------------------------------------
  /// TransmitMessage2 bool Whether SBAS should transmit message type 2 instead of 0.
  ///

  public class IsTransmitMessage2InSbasMessage0Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsTransmitMessage2InSbasMessage0."; }
    }

    internal const string CmdName = "IsTransmitMessage2InSbasMessage0Result";

    public IsTransmitMessage2InSbasMessage0Result()
      : base(CmdName)
    {}

    public IsTransmitMessage2InSbasMessage0Result(CommandBase relatedCommand, bool transmitMessage2)
      : base(CmdName, relatedCommand)
    {
      TransmitMessage2 = transmitMessage2;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TransmitMessage2")
      ;
      }
    }

    public bool TransmitMessage2
    {
      get { return GetValue("TransmitMessage2").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitMessage2", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a satellite is geostationary
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite SV ID
  /// IsGeo       bool            True for geostationary satellite
  /// Longitude   double          The longitude to use, in degree
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class ForceSVGeo : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a satellite is geostationary"; }
    }

    internal const string CmdName = "ForceSVGeo";

    public ForceSVGeo()
      : base(CmdName)
    {}

    public ForceSVGeo(string system, int svId, bool isGeo, double longitude, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      IsGeo = isGeo;
      Longitude = longitude;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("IsGeo")
        && Contains("Longitude")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsGeo
    {
      get { return GetValue("IsGeo").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsGeo", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Longitude
    {
      get { return GetValue("Longitude").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Longitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a satellite is geostationary
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite SV ID
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class IsSVForcedGeo : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a satellite is geostationary"; }
    }

    internal const string CmdName = "IsSVForcedGeo";

    public IsSVForcedGeo()
      : base(CmdName)
    {}

    public IsSVForcedGeo(string system, int svId, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSVForcedGeo.
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "QZSS" or "NavIC"
  /// SvId        int             The satellite SV ID
  /// IsGeo       bool            True for geostationary satellite
  /// Longitude   double          The longitude to use, in degree
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class IsSVForcedGeoResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSVForcedGeo."; }
    }

    internal const string CmdName = "IsSVForcedGeoResult";

    public IsSVForcedGeoResult()
      : base(CmdName)
    {}

    public IsSVForcedGeoResult(CommandBase relatedCommand, string system, int svId, bool isGeo, double longitude, string dataSetName = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      IsGeo = isGeo;
      Longitude = longitude;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("IsGeo")
        && Contains("Longitude")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsGeo
    {
      get { return GetValue("IsGeo").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsGeo", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Longitude
    {
      get { return GetValue("Longitude").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Longitude", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether specific errors type for this constellation should be compensated in SBAS fast corrections
  ///
  /// Name      Type            Description
  /// --------- --------------- ----------------------------------------------------------------------------------------------------
  /// System    string          "GPS" or "SBAS"
  /// IsEnabled bool            True if corrections are enabled
  /// ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
  ///                           Default value is "PSR error". Getter only accepts one error type.
  ///

  public class EnableSbasFastCorrectionsFor : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether specific errors type for this constellation should be compensated in SBAS fast corrections"; }
    }

    internal const string CmdName = "EnableSbasFastCorrectionsFor";

    public EnableSbasFastCorrectionsFor()
      : base(CmdName)
    {}

    public EnableSbasFastCorrectionsFor(string system, bool isEnabled, string errorType = null)
      : base(CmdName)
    {
      System = system;
      IsEnabled = isEnabled;
      ErrorType = errorType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("IsEnabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ErrorType
    {
      get { return GetValue("ErrorType").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ErrorType");
        else
          SetValue("ErrorType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether specific errors type for this constellation should be compensated in SBAS fast corrections
  ///
  /// Name      Type            Description
  /// --------- --------------- ----------------------------------------------------------------------------------------------------
  /// System    string          "GPS" or "SBAS"
  /// ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
  ///                           Default value is "PSR error". Getter only accepts one error type.
  ///

  public class IsSbasFastCorrectionsEnabledFor : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether specific errors type for this constellation should be compensated in SBAS fast corrections"; }
    }

    internal const string CmdName = "IsSbasFastCorrectionsEnabledFor";

    public IsSbasFastCorrectionsEnabledFor()
      : base(CmdName)
    {}

    public IsSbasFastCorrectionsEnabledFor(string system, string errorType = null)
      : base(CmdName)
    {
      System = system;
      ErrorType = errorType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ErrorType
    {
      get { return GetValue("ErrorType").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ErrorType");
        else
          SetValue("ErrorType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSbasFastCorrectionsEnabledFor.
  ///
  /// Name      Type            Description
  /// --------- --------------- ----------------------------------------------------------------------------------------------------
  /// System    string          "GPS" or "SBAS"
  /// IsEnabled bool            True if corrections are enabled
  /// ErrorType optional string Comma separated error type to enable/disable. Accepted error types are "PSR offset" and "PSR error".
  ///                           Default value is "PSR error". Getter only accepts one error type.
  ///

  public class IsSbasFastCorrectionsEnabledForResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSbasFastCorrectionsEnabledFor."; }
    }

    internal const string CmdName = "IsSbasFastCorrectionsEnabledForResult";

    public IsSbasFastCorrectionsEnabledForResult()
      : base(CmdName)
    {}

    public IsSbasFastCorrectionsEnabledForResult(CommandBase relatedCommand, string system, bool isEnabled, string errorType = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      IsEnabled = isEnabled;
      ErrorType = errorType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("IsEnabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ErrorType
    {
      get { return GetValue("ErrorType").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ErrorType");
        else
          SetValue("ErrorType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether the ionospheric offsets grid should be used for SBAS corrections in message 26
  ///
  /// Name      Type Description
  /// --------- ---- --------------------------------------------
  /// IsEnabled bool True if offsets are applied in Sbas messages
  ///

  public class ApplyDelayInSbas : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether the ionospheric offsets grid should be used for SBAS corrections in message 26"; }
    }

    internal const string CmdName = "ApplyDelayInSbas";

    public ApplyDelayInSbas()
      : base(CmdName)
    {}

    public ApplyDelayInSbas(bool isEnabled)
      : base(CmdName)
    {
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsEnabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether the ionospheric offsets grid should be used for SBAS corrections in message 26
  ///
  /// 
  ///

  public class IsDelayAppliedInSbas : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether the ionospheric offsets grid should be used for SBAS corrections in message 26"; }
    }

    internal const string CmdName = "IsDelayAppliedInSbas";

    public IsDelayAppliedInSbas()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of IsDelayAppliedInSbas.
  ///
  /// Name      Type Description
  /// --------- ---- --------------------------------------------
  /// IsEnabled bool True if offsets are applied in Sbas messages
  ///

  public class IsDelayAppliedInSbasResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsDelayAppliedInSbas."; }
    }

    internal const string CmdName = "IsDelayAppliedInSbasResult";

    public IsDelayAppliedInSbasResult()
      : base(CmdName)
    {}

    public IsDelayAppliedInSbasResult(CommandBase relatedCommand, bool isEnabled)
      : base(CmdName, relatedCommand)
    {
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsEnabled")
      ;
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether the ionospheric offsets grid should be applied to the ionosphere
  ///
  /// Name      Type Description
  /// --------- ---- ---------------------------------------------
  /// IsEnabled bool True if offsets are applied on the ionosphere
  ///

  public class EnableIonoOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether the ionospheric offsets grid should be applied to the ionosphere"; }
    }

    internal const string CmdName = "EnableIonoOffset";

    public EnableIonoOffset()
      : base(CmdName)
    {}

    public EnableIonoOffset(bool isEnabled)
      : base(CmdName)
    {
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsEnabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether the ionospheric offsets grid should be applied to the ionosphere
  ///
  /// 
  ///

  public class IsIonoOffsetEnabled : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether the ionospheric offsets grid should be applied to the ionosphere"; }
    }

    internal const string CmdName = "IsIonoOffsetEnabled";

    public IsIonoOffsetEnabled()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of IsIonoOffsetEnabled.
  ///
  /// Name      Type Description
  /// --------- ---- ---------------------------------------------
  /// IsEnabled bool True if offsets are applied on the ionosphere
  ///

  public class IsIonoOffsetEnabledResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsIonoOffsetEnabled."; }
    }

    internal const string CmdName = "IsIonoOffsetEnabledResult";

    public IsIonoOffsetEnabledResult()
      : base(CmdName)
    {}

    public IsIonoOffsetEnabledResult(CommandBase relatedCommand, bool isEnabled)
      : base(CmdName, relatedCommand)
    {
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsEnabled")
      ;
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether ephemeris errors for this constellation should be compensated in SBAS long term corrections.
  ///
  /// Name      Type   Description
  /// --------- ------ -------------------------------------
  /// System    string As of today, only "GPS" is supported.
  /// IsEnabled bool   True if corrections are enabled.
  ///

  public class EnableSbasLongTermCorrectionsFor : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether ephemeris errors for this constellation should be compensated in SBAS long term corrections."; }
    }

    internal const string CmdName = "EnableSbasLongTermCorrectionsFor";

    public EnableSbasLongTermCorrectionsFor()
      : base(CmdName)
    {}

    public EnableSbasLongTermCorrectionsFor(string system, bool isEnabled)
      : base(CmdName)
    {
      System = system;
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("IsEnabled")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether ephemeris errors for this constellation should be compensated in SBAS long term corrections.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------
  /// System string As of today, only "GPS" is supported.
  ///

  public class IsSbasLongTermCorrectionsEnabledFor : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether ephemeris errors for this constellation should be compensated in SBAS long term corrections."; }
    }

    internal const string CmdName = "IsSbasLongTermCorrectionsEnabledFor";

    public IsSbasLongTermCorrectionsEnabledFor()
      : base(CmdName)
    {}

    public IsSbasLongTermCorrectionsEnabledFor(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSbasLongTermCorrectionsEnabledFor.
  ///
  /// Name      Type   Description
  /// --------- ------ -------------------------------------
  /// System    string As of today, only "GPS" is supported.
  /// IsEnabled bool   True if corrections are enabled.
  ///

  public class IsSbasLongTermCorrectionsEnabledForResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSbasLongTermCorrectionsEnabledFor."; }
    }

    internal const string CmdName = "IsSbasLongTermCorrectionsEnabledForResult";

    public IsSbasLongTermCorrectionsEnabledForResult()
      : base(CmdName)
    {}

    public IsSbasLongTermCorrectionsEnabledForResult(CommandBase relatedCommand, string system, bool isEnabled)
      : base(CmdName, relatedCommand)
    {
      System = system;
      IsEnabled = isEnabled;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("IsEnabled")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool IsEnabled
    {
      get { return GetValue("IsEnabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsEnabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the ura index of a GPS satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGpsUraIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the ura index of a GPS satellite"; }
    }

    internal const string CmdName = "SetGpsUraIndexForSV";

    public SetGpsUraIndexForSV()
      : base(CmdName)
    {}

    public SetGpsUraIndexForSV(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the ura index of a BeiDou satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetBeiDouUraIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the ura index of a BeiDou satellite"; }
    }

    internal const string CmdName = "SetBeiDouUraIndexForSV";

    public SetBeiDouUraIndexForSV()
      : base(CmdName)
    {}

    public SetBeiDouUraIndexForSV(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetQzssUraIndex is deprecated since 21.3. You may use SetQzssUraIndexForSV.
  /// 
  /// Set the URA index of a QZSS satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssUraIndex : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetQzssUraIndex is deprecated since 21.3. You may use SetQzssUraIndexForSV.\n\nSet the URA index of a QZSS satellite"; }
    }

    internal const string CmdName = "SetQzssUraIndex";

    public SetQzssUraIndex()
      : base(CmdName)
    {}

    public SetQzssUraIndex(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the URA index of a QZSS satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetQzssUraIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the URA index of a QZSS satellite"; }
    }

    internal const string CmdName = "SetQzssUraIndexForSV";

    public SetQzssUraIndexForSV()
      : base(CmdName)
    {}

    public SetQzssUraIndexForSV(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetNavICUraIndex is deprecated since 21.3. You may use SetNavICUraIndexForSV.
  /// 
  /// Set the URA index of a NavIC satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICUraIndex : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetNavICUraIndex is deprecated since 21.3. You may use SetNavICUraIndexForSV.\n\nSet the URA index of a NavIC satellite"; }
    }

    internal const string CmdName = "SetNavICUraIndex";

    public SetNavICUraIndex()
      : base(CmdName)
    {}

    public SetNavICUraIndex(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the URA index of a NavIC satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetNavICUraIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the URA index of a NavIC satellite"; }
    }

    internal const string CmdName = "SetNavICUraIndexForSV";

    public SetNavICUraIndexForSV()
      : base(CmdName)
    {}

    public SetNavICUraIndexForSV(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the URA index of a Sbas satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Urai        int             URA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetSbasUraIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the URA index of a Sbas satellite"; }
    }

    internal const string CmdName = "SetSbasUraIndexForSV";

    public SetSbasUraIndexForSV()
      : base(CmdName)
    {}

    public SetSbasUraIndexForSV(int svId, int urai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Urai = urai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Urai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Urai
    {
      get { return GetValue("Urai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Urai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the SISA(E1,E5a) index of a Galileo satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Sisai       int             SISA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoSisaE1E5aIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the SISA(E1,E5a) index of a Galileo satellite"; }
    }

    internal const string CmdName = "SetGalileoSisaE1E5aIndexForSV";

    public SetGalileoSisaE1E5aIndexForSV()
      : base(CmdName)
    {}

    public SetGalileoSisaE1E5aIndexForSV(int svId, int sisai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Sisai = sisai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Sisai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Sisai
    {
      get { return GetValue("Sisai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Sisai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the SISA(E1,E5b) index of a Galileo satellite
  ///
  /// Name        Type            Description
  /// ----------- --------------- -------------------------------------------------------------------------------------------
  /// SvId        int             The satellite SV ID, or use 0 to apply new value to all satellites.
  /// Sisai       int             SISA index.
  /// DataSetName optional string Optional name of the data set to use. If no value is provided, the active data set is used.
  ///

  public class SetGalileoSisaE1E5bIndexForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the SISA(E1,E5b) index of a Galileo satellite"; }
    }

    internal const string CmdName = "SetGalileoSisaE1E5bIndexForSV";

    public SetGalileoSisaE1E5bIndexForSV()
      : base(CmdName)
    {}

    public SetGalileoSisaE1E5bIndexForSV(int svId, int sisai, string dataSetName = null)
      : base(CmdName)
    {
      SvId = svId;
      Sisai = sisai;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SvId")
        && Contains("Sisai")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Sisai
    {
      get { return GetValue("Sisai").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Sisai", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set CW pilot added to signal
  ///
  /// Name              Type   Description
  /// ----------------- ------ ---------------------------------------------------
  /// Enabled           bool   Enable (true) or disable (false) the signal
  /// OutputIdx         int    RF Output index (zero-based)
  /// CentralFreqOffset double Central frequency offset of the Pilot (Hz)
  /// Power             double Power (dB), relative to transmitter reference power
  /// PilotId           string CW Pilot unique identifier.
  ///

  public class SetPilotCW : CommandBase
  {
    public override string Documentation
    {
      get { return "Set CW pilot added to signal"; }
    }

    internal const string CmdName = "SetPilotCW";

    public SetPilotCW()
      : base(CmdName)
    {}

    public SetPilotCW(bool enabled, int outputIdx, double centralFreqOffset, double power, string pilotId)
      : base(CmdName)
    {
      Enabled = enabled;
      OutputIdx = outputIdx;
      CentralFreqOffset = centralFreqOffset;
      Power = power;
      PilotId = pilotId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("OutputIdx")
        && Contains("CentralFreqOffset")
        && Contains("Power")
        && Contains("PilotId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int OutputIdx
    {
      get { return GetValue("OutputIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("OutputIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreqOffset
    {
      get { return GetValue("CentralFreqOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreqOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string PilotId
    {
      get { return GetValue("PilotId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("PilotId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set PRN pilot added to signal
  ///
  /// Name              Type   Description
  /// ----------------- ------ ---------------------------------------------------
  /// Enabled           bool   Enable (true) or disable (false) the signal
  /// OutputIdx         int    RF Output index (zero-based)
  /// CentralFreqOffset double Central frequency offset of the Pilot (Hz)
  /// Power             double Power (dB), relative to transmitter reference power
  /// Prn               int    The PRN to use
  /// Type              string The type of PRN to use (CA or Gold)
  /// PilotId           string CW Pilot unique identifier.
  ///

  public class SetPilotPRN : CommandBase
  {
    public override string Documentation
    {
      get { return "Set PRN pilot added to signal"; }
    }

    internal const string CmdName = "SetPilotPRN";

    public SetPilotPRN()
      : base(CmdName)
    {}

    public SetPilotPRN(bool enabled, int outputIdx, double centralFreqOffset, double power, int prn, string type, string pilotId)
      : base(CmdName)
    {
      Enabled = enabled;
      OutputIdx = outputIdx;
      CentralFreqOffset = centralFreqOffset;
      Power = power;
      Prn = prn;
      Type = type;
      PilotId = pilotId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("OutputIdx")
        && Contains("CentralFreqOffset")
        && Contains("Power")
        && Contains("Prn")
        && Contains("Type")
        && Contains("PilotId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int OutputIdx
    {
      get { return GetValue("OutputIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("OutputIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CentralFreqOffset
    {
      get { return GetValue("CentralFreqOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CentralFreqOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Type
    {
      get { return GetValue("Type").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string PilotId
    {
      get { return GetValue("PilotId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("PilotId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Calibrate a pilot output
  ///
  /// Name         Type   Description
  /// ------------ ------ ---------------------------------------------------
  /// OutputIdx    int    RF Output index (zero-based)
  /// Power        double Power (dB), relative to transmitter reference power
  /// Time         double Code time offset in second
  /// CarrierPhase double Carrier phase offset in radians
  ///

  public class CalibratePilotOutput : CommandBase
  {
    public override string Documentation
    {
      get { return "Calibrate a pilot output"; }
    }

    internal const string CmdName = "CalibratePilotOutput";

    public CalibratePilotOutput()
      : base(CmdName)
    {}

    public CalibratePilotOutput(int outputIdx, double power, double time, double carrierPhase)
      : base(CmdName)
    {
      OutputIdx = outputIdx;
      Power = power;
      Time = time;
      CarrierPhase = carrierPhase;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("OutputIdx")
        && Contains("Power")
        && Contains("Time")
        && Contains("CarrierPhase")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public int OutputIdx
    {
      get { return GetValue("OutputIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("OutputIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Time
    {
      get { return GetValue("Time").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Time", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double CarrierPhase
    {
      get { return GetValue("CarrierPhase").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("CarrierPhase", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Remove all pilots on all outputs
  ///
  /// 
  ///

  public class RemoveAllPilots : CommandBase
  {
    public override string Documentation
    {
      get { return "Remove all pilots on all outputs"; }
    }

    internal const string CmdName = "RemoveAllPilots";

    public RemoveAllPilots()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Change modulation offsets of one RF output
  ///
  /// Name        Type   Description
  /// ----------- ------ ----------------------------------------------------------------
  /// OutputIdx   int    RF Output index (zero-based)
  /// PowerOffset double Power offset (dB), to apply on all signals of the RF Output
  /// TimeOffset  double Time offset (seconds), to apply on all signals of the RF Output
  /// PhaseOffset double Phase offset (radians), to apply on all signals of the RF Output
  ///

  public class SetRFOutputOffsets : CommandBase
  {
    public override string Documentation
    {
      get { return "Change modulation offsets of one RF output"; }
    }

    internal const string CmdName = "SetRFOutputOffsets";

    public SetRFOutputOffsets()
      : base(CmdName)
    {}

    public SetRFOutputOffsets(int outputIdx, double powerOffset, double timeOffset, double phaseOffset)
      : base(CmdName)
    {
      OutputIdx = outputIdx;
      PowerOffset = powerOffset;
      TimeOffset = timeOffset;
      PhaseOffset = phaseOffset;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("OutputIdx")
        && Contains("PowerOffset")
        && Contains("TimeOffset")
        && Contains("PhaseOffset")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public int OutputIdx
    {
      get { return GetValue("OutputIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("OutputIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PowerOffset
    {
      get { return GetValue("PowerOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PowerOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double TimeOffset
    {
      get { return GetValue("TimeOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("TimeOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PhaseOffset
    {
      get { return GetValue("PhaseOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PhaseOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Returns whether the vehicle trajectory was completed.
  /// For fixed, circular and earth-orbiting spacecraft, this will always return false.
  /// For track playback and vehicle simulation, this will return true once the vehicle will reach the last position in the track/route.
  /// The value is unreliable for HIL trajectories.
  ///
  /// 
  ///

  public class IsTrajectoryCompleted : CommandBase
  {
    public override string Documentation
    {
      get { return "Returns whether the vehicle trajectory was completed.\nFor fixed, circular and earth-orbiting spacecraft, this will always return false.\nFor track playback and vehicle simulation, this will return true once the vehicle will reach the last position in the track/route.\nThe value is unreliable for HIL trajectories."; }
    }

    internal const string CmdName = "IsTrajectoryCompleted";

    public IsTrajectoryCompleted()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of IsTrajectoryCompleted.
  ///
  /// Name        Type Description
  /// ----------- ---- ------------------------------------------
  /// IsCompleted bool Whether the trajectory is completed or not
  ///

  public class IsTrajectoryCompletedResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsTrajectoryCompleted."; }
    }

    internal const string CmdName = "IsTrajectoryCompletedResult";

    public IsTrajectoryCompletedResult()
      : base(CmdName)
    {}

    public IsTrajectoryCompletedResult(CommandBase relatedCommand, bool isCompleted)
      : base(CmdName, relatedCommand)
    {
      IsCompleted = isCompleted;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsCompleted")
      ;
      }
    }

    public bool IsCompleted
    {
      get { return GetValue("IsCompleted").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsCompleted", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the error offset for a ionospheric grid point
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------
  /// Band  int    The ionospheric grid band index
  /// Point int    The IGP index
  /// Error double The error offset at the IGP
  ///

  public class SetIonoGridError : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the error offset for a ionospheric grid point"; }
    }

    internal const string CmdName = "SetIonoGridError";

    public SetIonoGridError()
      : base(CmdName)
    {}

    public SetIonoGridError(int band, int point, double error)
      : base(CmdName)
    {
      Band = band;
      Point = point;
      Error = error;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
        && Contains("Error")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Error
    {
      get { return GetValue("Error").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Error", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the error offset for a ionospheric grid point
  ///
  /// Name  Type Description
  /// ----- ---- -------------------------------
  /// Band  int  The ionospheric grid band index
  /// Point int  The IGP index
  ///

  public class GetIonoGridError : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the error offset for a ionospheric grid point"; }
    }

    internal const string CmdName = "GetIonoGridError";

    public GetIonoGridError()
      : base(CmdName)
    {}

    public GetIonoGridError(int band, int point)
      : base(CmdName)
    {
      Band = band;
      Point = point;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoGridError.
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------
  /// Band  int    The ionospheric grid band index
  /// Point int    The IGP index
  /// Error double The error offset at the IGP
  ///

  public class GetIonoGridErrorResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridError."; }
    }

    internal const string CmdName = "GetIonoGridErrorResult";

    public GetIonoGridErrorResult()
      : base(CmdName)
    {}

    public GetIonoGridErrorResult(CommandBase relatedCommand, int band, int point, double error)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      Point = point;
      Error = error;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
        && Contains("Error")
      ;
      }
    }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Error
    {
      get { return GetValue("Error").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Error", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the GIVEI for a ionospheric grid point
  ///
  /// Name            Type            Description
  /// --------------- --------------- -------------------------------
  /// Band            int             The ionospheric grid band index
  /// Point           int             The IGP index
  /// GiveI           int             The GIVEI at the IGP
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class SetIonoGridGIVEI : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the GIVEI for a ionospheric grid point"; }
    }

    internal const string CmdName = "SetIonoGridGIVEI";

    public SetIonoGridGIVEI()
      : base(CmdName)
    {}

    public SetIonoGridGIVEI(int band, int point, int giveI, string serviceProvider = null)
      : base(CmdName)
    {
      Band = band;
      Point = point;
      GiveI = giveI;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
        && Contains("GiveI")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int GiveI
    {
      get { return GetValue("GiveI").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("GiveI", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the GIVEI for a ionospheric grid point
  ///
  /// Name            Type            Description
  /// --------------- --------------- -------------------------------
  /// Band            int             The ionospheric grid band index
  /// Point           int             The IGP index
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class GetIonoGridGIVEI : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the GIVEI for a ionospheric grid point"; }
    }

    internal const string CmdName = "GetIonoGridGIVEI";

    public GetIonoGridGIVEI()
      : base(CmdName)
    {}

    public GetIonoGridGIVEI(int band, int point, string serviceProvider = null)
      : base(CmdName)
    {
      Band = band;
      Point = point;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoGridGIVEI.
  ///
  /// Name            Type            Description
  /// --------------- --------------- -------------------------------
  /// Band            int             The ionospheric grid band index
  /// Point           int             The IGP index
  /// GiveI           int             The GIVEI at the IGP
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class GetIonoGridGIVEIResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridGIVEI."; }
    }

    internal const string CmdName = "GetIonoGridGIVEIResult";

    public GetIonoGridGIVEIResult()
      : base(CmdName)
    {}

    public GetIonoGridGIVEIResult(CommandBase relatedCommand, int band, int point, int giveI, string serviceProvider = null)
      : base(CmdName, relatedCommand)
    {
      Band = band;
      Point = point;
      GiveI = giveI;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Band")
        && Contains("Point")
        && Contains("GiveI")
      ;
      }
    }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int GiveI
    {
      get { return GetValue("GiveI").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("GiveI", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// Name Type               Description
  /// ---- ------------------ -----------------------------------------------------------------------
  /// Grid array array double Array containing each band, each band is an array containing the errors
  ///

  public class SetIonoGridErrorAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "SetIonoGridErrorAll";

    public SetIonoGridErrorAll()
      : base(CmdName)
    {}

    public SetIonoGridErrorAll(List<List<double>> grid)
      : base(CmdName)
    {
      Grid = grid;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Grid")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// 
  ///

  public class GetIonoGridErrorAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Error offsets in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "GetIonoGridErrorAll";

    public GetIonoGridErrorAll()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetIonoGridErrorAll.
  ///
  /// Name Type               Description
  /// ---- ------------------ -----------------------------------------------------------------------
  /// Grid array array double Array containing each band, each band is an array containing the errors
  ///

  public class GetIonoGridErrorAllResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridErrorAll."; }
    }

    internal const string CmdName = "GetIonoGridErrorAllResult";

    public GetIonoGridErrorAllResult()
      : base(CmdName)
    {}

    public GetIonoGridErrorAllResult(CommandBase relatedCommand, List<List<double>> grid)
      : base(CmdName, relatedCommand)
    {
      Grid = grid;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Grid")
      ;
      }
    }

    public List<List<double>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// Name            Type            Description
  /// --------------- --------------- ----------------------------------------------------------------------
  /// Grid            array array int Array containing each band, each band is an array containing the GIVEI
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class SetIonoGridGIVEIAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Set GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "SetIonoGridGIVEIAll";

    public SetIonoGridGIVEIAll()
      : base(CmdName)
    {}

    public SetIonoGridGIVEIAll(List<List<int>> grid, string serviceProvider = null)
      : base(CmdName)
    {
      Grid = grid;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Grid")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<int>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<int>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// Name            Type            Description
  /// --------------- --------------- -------------------------------
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class GetIonoGridGIVEIAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Get GIVEI in the ionospheric grid.  The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "GetIonoGridGIVEIAll";

    public GetIonoGridGIVEIAll()
      : base(CmdName)
    {}

    public GetIonoGridGIVEIAll(string serviceProvider = null)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoGridGIVEIAll.
  ///
  /// Name            Type            Description
  /// --------------- --------------- ----------------------------------------------------------------------
  /// Grid            array array int Array containing each band, each band is an array containing the GIVEI
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class GetIonoGridGIVEIAllResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridGIVEIAll."; }
    }

    internal const string CmdName = "GetIonoGridGIVEIAllResult";

    public GetIonoGridGIVEIAllResult()
      : base(CmdName)
    {}

    public GetIonoGridGIVEIAllResult(CommandBase relatedCommand, List<List<int>> grid, string serviceProvider = null)
      : base(CmdName, relatedCommand)
    {
      Grid = grid;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Grid")
      ;
      }
    }

    public List<List<int>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<int>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the flag for a ionospheric grid point in the SBAS message 18 mask
  ///
  /// Name            Type   Description
  /// --------------- ------ -------------------------------
  /// ServiceProvider string The service provider
  /// Band            int    The ionospheric grid band index
  /// Point           int    The IGP index
  /// Flag            bool   Is the IGP monitored
  ///

  public class SetIonoGridMask : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the flag for a ionospheric grid point in the SBAS message 18 mask"; }
    }

    internal const string CmdName = "SetIonoGridMask";

    public SetIonoGridMask()
      : base(CmdName)
    {}

    public SetIonoGridMask(string serviceProvider, int band, int point, bool flag)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Band = band;
      Point = point;
      Flag = flag;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Band")
        && Contains("Point")
        && Contains("Flag")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Flag
    {
      get { return GetValue("Flag").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Flag", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the flag for a ionospheric grid point in the SBAS message 18 mask
  ///
  /// Name            Type   Description
  /// --------------- ------ -------------------------------
  /// ServiceProvider string The service provider
  /// Band            int    The ionospheric grid band index
  /// Point           int    The IGP index
  ///

  public class GetIonoGridMask : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the flag for a ionospheric grid point in the SBAS message 18 mask"; }
    }

    internal const string CmdName = "GetIonoGridMask";

    public GetIonoGridMask()
      : base(CmdName)
    {}

    public GetIonoGridMask(string serviceProvider, int band, int point)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Band = band;
      Point = point;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Band")
        && Contains("Point")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoGridMask.
  ///
  /// Name            Type   Description
  /// --------------- ------ -------------------------------
  /// ServiceProvider string The service provider
  /// Band            int    The ionospheric grid band index
  /// Point           int    The IGP index
  /// Flag            bool   Is the IGP monitored
  ///

  public class GetIonoGridMaskResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridMask."; }
    }

    internal const string CmdName = "GetIonoGridMaskResult";

    public GetIonoGridMaskResult()
      : base(CmdName)
    {}

    public GetIonoGridMaskResult(CommandBase relatedCommand, string serviceProvider, int band, int point, bool flag)
      : base(CmdName, relatedCommand)
    {
      ServiceProvider = serviceProvider;
      Band = band;
      Point = point;
      Flag = flag;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Band")
        && Contains("Point")
        && Contains("Flag")
      ;
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Band
    {
      get { return GetValue("Band").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Band", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Point
    {
      get { return GetValue("Point").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Point", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Flag
    {
      get { return GetValue("Flag").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Flag", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// Name            Type             Description
  /// --------------- ---------------- ----------------------------------------------------------------------
  /// ServiceProvider string           The service provider
  /// Grid            array array bool Array containing each band, each band is an array containing the flags
  ///

  public class SetIonoGridMaskAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "SetIonoGridMaskAll";

    public SetIonoGridMaskAll()
      : base(CmdName)
    {}

    public SetIonoGridMaskAll(string serviceProvider, List<List<bool>> grid)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Grid = grid;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Grid")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<bool>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<bool>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc.
  ///
  /// Name            Type   Description
  /// --------------- ------ --------------------
  /// ServiceProvider string The service provider
  ///

  public class GetIonoGridMaskAll : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Mask flags in the ionospheric grid for a given service provider. The array is zero based, the index 0 in a band array is for the IGP with an index 1, etc."; }
    }

    internal const string CmdName = "GetIonoGridMaskAll";

    public GetIonoGridMaskAll()
      : base(CmdName)
    {}

    public GetIonoGridMaskAll(string serviceProvider)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetIonoGridMaskAll.
  ///
  /// Name            Type             Description
  /// --------------- ---------------- ----------------------------------------------------------------------
  /// ServiceProvider string           The service provider
  /// Grid            array array bool Array containing each band, each band is an array containing the flags
  ///

  public class GetIonoGridMaskAllResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetIonoGridMaskAll."; }
    }

    internal const string CmdName = "GetIonoGridMaskAllResult";

    public GetIonoGridMaskAllResult()
      : base(CmdName)
    {}

    public GetIonoGridMaskAllResult(CommandBase relatedCommand, string serviceProvider, List<List<bool>> grid)
      : base(CmdName, relatedCommand)
    {
      ServiceProvider = serviceProvider;
      Grid = grid;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Grid")
      ;
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<List<bool>> Grid
    {
      get { return GetValue("Grid").ToObject<List<List<bool>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Grid", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import ionospheric grid errors.
  ///
  /// Name        Type   Description
  /// ----------- ------ ------------------------------------
  /// Overwriting bool   Overwrite the previous grid if true.
  /// Path        string Grid file path
  ///

  public class ImportIonoGridErrors : CommandBase
  {
    public override string Documentation
    {
      get { return "Import ionospheric grid errors."; }
    }

    internal const string CmdName = "ImportIonoGridErrors";

    public ImportIonoGridErrors()
      : base(CmdName)
    {}

    public ImportIonoGridErrors(bool overwriting, string path)
      : base(CmdName)
    {
      Overwriting = overwriting;
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import ionospheric grid GIVEI.
  ///
  /// Name            Type            Description
  /// --------------- --------------- ------------------------------------
  /// Overwriting     bool            Overwrite the previous grid if true.
  /// Path            string          Grid file path
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class ImportIonoGridGIVEI : CommandBase
  {
    public override string Documentation
    {
      get { return "Import ionospheric grid GIVEI."; }
    }

    internal const string CmdName = "ImportIonoGridGIVEI";

    public ImportIonoGridGIVEI()
      : base(CmdName)
    {}

    public ImportIonoGridGIVEI(bool overwriting, string path, string serviceProvider = null)
      : base(CmdName)
    {
      Overwriting = overwriting;
      Path = path;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Import ionospheric grid mask for a giver service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ ------------------------------------
  /// ServiceProvider string The service provider
  /// Overwriting     bool   Overwrite the previous mask if true.
  /// Path            string Grid file path
  ///

  public class ImportIonoGridMask : CommandBase
  {
    public override string Documentation
    {
      get { return "Import ionospheric grid mask for a giver service provider."; }
    }

    internal const string CmdName = "ImportIonoGridMask";

    public ImportIonoGridMask()
      : base(CmdName)
    {}

    public ImportIonoGridMask(string serviceProvider, bool overwriting, string path)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Overwriting = overwriting;
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export ionospheric grid errors.
  ///
  /// Name        Type   Description
  /// ----------- ------ -------------------------------
  /// Overwriting bool   Overwrite the old file if true.
  /// Path        string Grid file path
  ///

  public class ExportIonoGridErrors : CommandBase
  {
    public override string Documentation
    {
      get { return "Export ionospheric grid errors."; }
    }

    internal const string CmdName = "ExportIonoGridErrors";

    public ExportIonoGridErrors()
      : base(CmdName)
    {}

    public ExportIonoGridErrors(bool overwriting, string path)
      : base(CmdName)
    {
      Overwriting = overwriting;
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export ionospheric grid GIVEI.
  ///
  /// Name            Type            Description
  /// --------------- --------------- -------------------------------
  /// Overwriting     bool            Overwrite the old file if true.
  /// Path            string          Grid file path
  /// ServiceProvider optional string The service provider (optional)
  ///

  public class ExportIonoGridGIVEI : CommandBase
  {
    public override string Documentation
    {
      get { return "Export ionospheric grid GIVEI."; }
    }

    internal const string CmdName = "ExportIonoGridGIVEI";

    public ExportIonoGridGIVEI()
      : base(CmdName)
    {}

    public ExportIonoGridGIVEI(bool overwriting, string path, string serviceProvider = null)
      : base(CmdName)
    {
      Overwriting = overwriting;
      Path = path;
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ServiceProvider");
        else
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Export ionospheric grid mask for a given service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ -------------------------------
  /// ServiceProvider string The service provider
  /// Overwriting     bool   Overwrite the old file if true.
  /// Path            string Grid file path
  ///

  public class ExportIonoGridMask : CommandBase
  {
    public override string Documentation
    {
      get { return "Export ionospheric grid mask for a given service provider."; }
    }

    internal const string CmdName = "ExportIonoGridMask";

    public ExportIonoGridMask()
      : base(CmdName)
    {}

    public ExportIonoGridMask(string serviceProvider, bool overwriting, string path)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Overwriting = overwriting;
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Overwriting")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Overwriting
    {
      get { return GetValue("Overwriting").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Overwriting", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a list of paths for all the files in the Configurations folder.
  ///
  /// 
  ///

  public class GetConfigPaths : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a list of paths for all the files in the Configurations folder."; }
    }

    internal const string CmdName = "GetConfigPaths";

    public GetConfigPaths()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetConfigPaths.
  ///
  /// Name  Type         Description
  /// ----- ------------ --------------------------------
  /// Paths array string Paths of the configuration files
  ///

  public class GetConfigPathsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetConfigPaths."; }
    }

    internal const string CmdName = "GetConfigPathsResult";

    public GetConfigPathsResult()
      : base(CmdName)
    {}

    public GetConfigPathsResult(CommandBase relatedCommand, List<string> paths)
      : base(CmdName, relatedCommand)
    {
      Paths = paths;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Paths")
      ;
      }
    }

    public List<string> Paths
    {
      get { return GetValue("Paths").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Paths", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the 0th PPS' date time
  ///
  /// Name    Type     Description
  /// ------- -------- --------------------------------------------------------------
  /// GpsTime datetime GPS date and time (it is the GPS time expressed in UTC format)
  ///

  public class SetPps0GpsTime : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the 0th PPS' date time"; }
    }

    internal const string CmdName = "SetPps0GpsTime";

    public SetPps0GpsTime()
      : base(CmdName)
    {}

    public SetPps0GpsTime(DateTime gpsTime)
      : base(CmdName)
    {
      GpsTime = gpsTime;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("GpsTime")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public DateTime GpsTime
    {
      get { return GetValue("GpsTime").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("GpsTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Returns the official leap second for a given date
  ///
  /// Name Type     Description
  /// ---- -------- ------------------------------
  /// Date datetime A date expressed in UTC format
  ///

  public class GetOfficialLeapSecond : CommandBase
  {
    public override string Documentation
    {
      get { return "Returns the official leap second for a given date"; }
    }

    internal const string CmdName = "GetOfficialLeapSecond";

    public GetOfficialLeapSecond()
      : base(CmdName)
    {}

    public GetOfficialLeapSecond(DateTime date)
      : base(CmdName)
    {
      Date = date;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Date")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public DateTime Date
    {
      get { return GetValue("Date").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Date", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetOfficialLeapSecond
  ///
  /// Name       Type Description
  /// ---------- ---- -----------------
  /// LeapSecond int  Leap second value
  ///

  public class GetOfficialLeapSecondResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetOfficialLeapSecond"; }
    }

    internal const string CmdName = "GetOfficialLeapSecondResult";

    public GetOfficialLeapSecondResult()
      : base(CmdName)
    {}

    public GetOfficialLeapSecondResult(CommandBase relatedCommand, int leapSecond)
      : base(CmdName, relatedCommand)
    {
      LeapSecond = leapSecond;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("LeapSecond")
      ;
      }
    }

    public int LeapSecond
    {
      get { return GetValue("LeapSecond").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("LeapSecond", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Returns the last known leap second date
  ///
  /// 
  ///

  public class GetLastLeapSecondDate : CommandBase
  {
    public override string Documentation
    {
      get { return "Returns the last known leap second date"; }
    }

    internal const string CmdName = "GetLastLeapSecondDate";

    public GetLastLeapSecondDate()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetLastLeapSecondDate.
  ///
  /// Name Type Description
  /// ---- ---- ----------------
  /// Date date Leap second date
  ///

  public class GetLastLeapSecondDateResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetLastLeapSecondDate."; }
    }

    internal const string CmdName = "GetLastLeapSecondDateResult";

    public GetLastLeapSecondDateResult()
      : base(CmdName)
    {}

    public GetLastLeapSecondDateResult(CommandBase relatedCommand, DateTime date)
      : base(CmdName, relatedCommand)
    {
      Date = date;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Date")
      ;
      }
    }

    public DateTime Date
    {
      get { return GetValue("Date").ToObject<DateTime>(CommandBase.Serializer); }
      set
      {
          SetValue("Date", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set The CRPA LNA gain
  ///
  /// Name Type Description
  /// ---- ---- -----------------
  /// Gain int  The CRPA LNA gain
  ///

  public class SetWFAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Set The CRPA LNA gain"; }
    }

    internal const string CmdName = "SetWFAntennaGain";

    public SetWFAntennaGain()
      : base(CmdName)
    {}

    public SetWFAntennaGain(int gain)
      : base(CmdName)
    {
      Gain = gain;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get The CRPA LNA gain
  ///
  /// 
  ///

  public class GetWFAntennaGain : CommandBase
  {
    public override string Documentation
    {
      get { return "Get The CRPA LNA gain"; }
    }

    internal const string CmdName = "GetWFAntennaGain";

    public GetWFAntennaGain()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetWFAntennaGain.
  ///
  /// Name Type Description
  /// ---- ---- -----------------
  /// Gain int  The CRPA LNA gain
  ///

  public class GetWFAntennaGainResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetWFAntennaGain."; }
    }

    internal const string CmdName = "GetWFAntennaGainResult";

    public GetWFAntennaGainResult()
      : base(CmdName)
    {}

    public GetWFAntennaGainResult(CommandBase relatedCommand, int gain)
      : base(CmdName, relatedCommand)
    {
      Gain = gain;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
      ;
      }
    }

    public int Gain
    {
      get { return GetValue("Gain").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Adds a custom signal
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------------------------
  /// Path string Path to the custom signal XML file
  /// Id   string Unique identifier automatically set by simulator
  ///

  public class AddCustomSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Adds a custom signal"; }
    }

    internal const string CmdName = "AddCustomSignal";

    public AddCustomSignal()
      : base(CmdName)
    {}

    public AddCustomSignal(string path, string id)
      : base(CmdName)
    {
      Path = path;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the custom signal with the given ID
  ///
  /// Name Type   Description
  /// ---- ------ ----------------
  /// Id   string Custom signal ID
  ///

  public class RemoveCustomSignal : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the custom signal with the given ID"; }
    }

    internal const string CmdName = "RemoveCustomSignal";

    public RemoveCustomSignal()
      : base(CmdName)
    {}

    public RemoveCustomSignal(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes all the custom signals
  ///
  /// 
  ///

  public class RemoveAllCustomSignals : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes all the custom signals"; }
    }

    internal const string CmdName = "RemoveAllCustomSignals";

    public RemoveAllCustomSignals()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Changes the custom signal color
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------------------------------------------------------
  /// Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
  /// Id    string Custom signal ID
  ///

  public class ChangeCustomSignalColor : CommandBase
  {
    public override string Documentation
    {
      get { return "Changes the custom signal color"; }
    }

    internal const string CmdName = "ChangeCustomSignalColor";

    public ChangeCustomSignalColor()
      : base(CmdName)
    {}

    public ChangeCustomSignalColor(string color, string id)
      : base(CmdName)
    {
      Color = color;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Color")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Color
    {
      get { return GetValue("Color").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Color", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the ID of all spoofer transmitters.
  ///
  /// 
  ///

  public class GetAllSpoofTxID : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the ID of all spoofer transmitters."; }
    }

    internal const string CmdName = "GetAllSpoofTxID";

    public GetAllSpoofTxID()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetAllSpoofTxID.
  ///
  /// Name Type         Description
  /// ---- ------------ ------------------------------------
  /// Ids  array string ID list of all spoofer transmitters.
  ///

  public class GetAllSpoofTxIDResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetAllSpoofTxID."; }
    }

    internal const string CmdName = "GetAllSpoofTxIDResult";

    public GetAllSpoofTxIDResult()
      : base(CmdName)
    {}

    public GetAllSpoofTxIDResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
  /// Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
  /// command will fail.
  ///
  /// Name       Type   Description
  /// ---------- ------ ------------------------------------------------
  /// UsualName  string Usual name for the transmitter.
  /// Enabled    bool   Enable (true) or disable (false) the transmitter
  /// Address    string Remote instance IP address.
  /// InstanceId int    Remote instance ID.
  /// Id         string Transmitter unique identifier.
  ///

  public class AddSpoofTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Set a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),\nSkydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the\ncommand will fail."; }
    }

    internal const string CmdName = "AddSpoofTx";

    public AddSpoofTx()
      : base(CmdName)
    {}

    public AddSpoofTx(string usualName, bool enabled, string address, int instanceId, string id)
      : base(CmdName)
    {
      UsualName = usualName;
      Enabled = enabled;
      Address = address;
      InstanceId = instanceId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Enabled")
        && Contains("Address")
        && Contains("InstanceId")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int InstanceId
    {
      get { return GetValue("InstanceId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("InstanceId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),
  /// Skydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the
  /// command will fail.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a spoofer transmitter. For set : the transmitter Id parameter is not set (empty string),\nSkydel will assign a unique Id to the transmitter. If the Id is set and already used by Skydel, the\ncommand will fail."; }
    }

    internal const string CmdName = "GetSpoofTx";

    public GetSpoofTx()
      : base(CmdName)
    {}

    public GetSpoofTx(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTx.
  ///
  /// Name       Type   Description
  /// ---------- ------ ------------------------------------------------
  /// UsualName  string Usual name for the transmitter.
  /// Enabled    bool   Enable (true) or disable (false) the transmitter
  /// Address    string Remote instance IP address.
  /// InstanceId int    Remote instance ID.
  /// Id         string Transmitter unique identifier.
  ///

  public class GetSpoofTxResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTx."; }
    }

    internal const string CmdName = "GetSpoofTxResult";

    public GetSpoofTxResult()
      : base(CmdName)
    {}

    public GetSpoofTxResult(CommandBase relatedCommand, string usualName, bool enabled, string address, int instanceId, string id)
      : base(CmdName, relatedCommand)
    {
      UsualName = usualName;
      Enabled = enabled;
      Address = address;
      InstanceId = instanceId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Enabled")
        && Contains("Address")
        && Contains("InstanceId")
        && Contains("Id")
      ;
      }
    }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int InstanceId
    {
      get { return GetValue("InstanceId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("InstanceId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes the spoofer transmitter. See EnableSpoofTx if all you want is to
  /// disable the interference temporarily.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class RemoveSpoofTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes the spoofer transmitter. See EnableSpoofTx if all you want is to\ndisable the interference temporarily."; }
    }

    internal const string CmdName = "RemoveSpoofTx";

    public RemoveSpoofTx()
      : base(CmdName)
    {}

    public RemoveSpoofTx(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Rename a spoofer.
  ///
  /// Name      Type   Description
  /// --------- ------ -------------------------------
  /// UsualName string Usual name for the transmitter.
  /// Id        string Transmitter unique identifier.
  ///

  public class RenameSpoofTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Rename a spoofer."; }
    }

    internal const string CmdName = "RenameSpoofTx";

    public RenameSpoofTx()
      : base(CmdName)
    {}

    public RenameSpoofTx(string usualName, string id)
      : base(CmdName)
    {
      UsualName = usualName;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("UsualName")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string UsualName
    {
      get { return GetValue("UsualName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("UsualName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set a spoofer color in spectrums
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------------------------------------------------------
  /// Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
  /// Id    string Transmitter unique identifier.
  ///

  public class ChangeSpoofTxColor : CommandBase
  {
    public override string Documentation
    {
      get { return "Set a spoofer color in spectrums"; }
    }

    internal const string CmdName = "ChangeSpoofTxColor";

    public ChangeSpoofTxColor()
      : base(CmdName)
    {}

    public ChangeSpoofTxColor(string color, string id)
      : base(CmdName)
    {
      Color = color;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Color")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Color
    {
      get { return GetValue("Color").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Color", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get a spoofer color in spectrums
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxColor : CommandBase
  {
    public override string Documentation
    {
      get { return "Get a spoofer color in spectrums"; }
    }

    internal const string CmdName = "GetSpoofTxColor";

    public GetSpoofTxColor()
      : base(CmdName)
    {}

    public GetSpoofTxColor(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxColor.
  ///
  /// Name  Type   Description
  /// ----- ------ -------------------------------------------------------------------------------
  /// Color string Color 'name'. Either a common color (red, white, ...) or an hex code (#FFFFFF).
  /// Id    string Transmitter unique identifier.
  ///

  public class GetSpoofTxColorResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxColor."; }
    }

    internal const string CmdName = "GetSpoofTxColorResult";

    public GetSpoofTxColorResult()
      : base(CmdName)
    {}

    public GetSpoofTxColorResult(CommandBase relatedCommand, string color, string id)
      : base(CmdName, relatedCommand)
    {
      Color = color;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Color")
        && Contains("Id")
      ;
      }
    }

    public string Color
    {
      get { return GetValue("Color").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Color", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Enable/Disable the spoofer.
  ///
  /// Name    Type   Description
  /// ------- ------ ------------------------------------------------
  /// Enabled bool   Enable (true) or disable (false) the transmitter
  /// Id      string Transmitter unique identifier.
  ///

  public class EnableSpoofTx : CommandBase
  {
    public override string Documentation
    {
      get { return "Enable/Disable the spoofer."; }
    }

    internal const string CmdName = "EnableSpoofTx";

    public EnableSpoofTx()
      : base(CmdName)
    {}

    public EnableSpoofTx(bool enabled, string id)
      : base(CmdName)
    {
      Enabled = enabled;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Enabled")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Enabled
    {
      get { return GetValue("Enabled").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Enabled", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the manual propagation loss for the given spoofer signal. Value is used only if SetSpoofTxUseManualPropagationLoss has been set on the corresponding spoofer. This value is not preserved after simulation end.
  ///
  /// Name            Type   Description
  /// --------------- ------ --------------------------------------------------------------------------------------------------------
  /// PropagationLoss double The propagation loss in dB to use until the next call of this command, or until manual mode is disabled.
  /// TransmitterId   string Transmitter unique identifier.
  /// SignalId        string Signal unique identifier.
  ///

  public class SetSpoofSignalManualPropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the manual propagation loss for the given spoofer signal. Value is used only if SetSpoofTxUseManualPropagationLoss has been set on the corresponding spoofer. This value is not preserved after simulation end."; }
    }

    internal const string CmdName = "SetSpoofSignalManualPropagationLoss";

    public SetSpoofSignalManualPropagationLoss()
      : base(CmdName)
    {}

    public SetSpoofSignalManualPropagationLoss(double propagationLoss, string transmitterId, string signalId)
      : base(CmdName)
    {
      PropagationLoss = propagationLoss;
      TransmitterId = transmitterId;
      SignalId = signalId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("PropagationLoss")
        && Contains("TransmitterId")
        && Contains("SignalId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public double PropagationLoss
    {
      get { return GetValue("PropagationLoss").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PropagationLoss", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string TransmitterId
    {
      get { return GetValue("TransmitterId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TransmitterId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SignalId
    {
      get { return GetValue("SignalId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a spoofer should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Manual bool   If true, propagation loss will be 1000 dB until set manually.
  /// Id     string Spoofing transmitter unique identifier.
  ///

  public class SetSpoofTxUseManualPropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a spoofer should only use user-provided propagation loss values. Propagation loss will not update automatically if set. This state is not preserved after simulation end."; }
    }

    internal const string CmdName = "SetSpoofTxUseManualPropagationLoss";

    public SetSpoofTxUseManualPropagationLoss()
      : base(CmdName)
    {}

    public SetSpoofTxUseManualPropagationLoss(bool manual, string id)
      : base(CmdName)
    {
      Manual = manual;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Manual")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING | EXECUTE_IF_IDLE; } }

    public bool Manual
    {
      get { return GetValue("Manual").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Manual", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a spoofer should ignore propagation loss or not.
  ///
  /// Name   Type   Description
  /// ------ ------ ------------------------------------------
  /// Ignore bool   If true, propagation loss will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetSpoofTxIgnorePropagationLoss : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a spoofer should ignore propagation loss or not."; }
    }

    internal const string CmdName = "SetSpoofTxIgnorePropagationLoss";

    public SetSpoofTxIgnorePropagationLoss()
      : base(CmdName)
    {}

    public SetSpoofTxIgnorePropagationLoss(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a spoofer should ignore the receiver's antenna patterns (gain and phase).
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna patterns (gain and phase) will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetSpoofTxIgnoreRxAntennaPatterns : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a spoofer should ignore the receiver's antenna patterns (gain and phase)."; }
    }

    internal const string CmdName = "SetSpoofTxIgnoreRxAntennaPatterns";

    public SetSpoofTxIgnoreRxAntennaPatterns()
      : base(CmdName)
    {}

    public SetSpoofTxIgnoreRxAntennaPatterns(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a spoofer should ignore the receiver's antenna gain pattern.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetSpoofTxIgnoreRxAntennaGainPattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a spoofer should ignore the receiver's antenna gain pattern."; }
    }

    internal const string CmdName = "SetSpoofTxIgnoreRxAntennaGainPattern";

    public SetSpoofTxIgnoreRxAntennaGainPattern()
      : base(CmdName)
    {}

    public SetSpoofTxIgnoreRxAntennaGainPattern(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a spoofer ignore the receiver's antenna gain pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsSpoofTxIgnoreRxAntennaGainPattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a spoofer ignore the receiver's antenna gain pattern."; }
    }

    internal const string CmdName = "IsSpoofTxIgnoreRxAntennaGainPattern";

    public IsSpoofTxIgnoreRxAntennaGainPattern()
      : base(CmdName)
    {}

    public IsSpoofTxIgnoreRxAntennaGainPattern(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSpoofTxIgnoreRxAntennaGainPattern.
  ///
  /// Name   Type   Description
  /// ------ ------ -------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna gain pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class IsSpoofTxIgnoreRxAntennaGainPatternResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSpoofTxIgnoreRxAntennaGainPattern."; }
    }

    internal const string CmdName = "IsSpoofTxIgnoreRxAntennaGainPatternResult";

    public IsSpoofTxIgnoreRxAntennaGainPatternResult()
      : base(CmdName)
    {}

    public IsSpoofTxIgnoreRxAntennaGainPatternResult(CommandBase relatedCommand, bool ignore, string id)
      : base(CmdName, relatedCommand)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether a spoofer should ignore the receiver's antenna phase pattern.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class SetSpoofTxIgnoreRxAntennaPhasePattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether a spoofer should ignore the receiver's antenna phase pattern."; }
    }

    internal const string CmdName = "SetSpoofTxIgnoreRxAntennaPhasePattern";

    public SetSpoofTxIgnoreRxAntennaPhasePattern()
      : base(CmdName)
    {}

    public SetSpoofTxIgnoreRxAntennaPhasePattern(bool ignore, string id)
      : base(CmdName)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get whether a spoofer ignore the receiver's antenna phase pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class IsSpoofTxIgnoreRxAntennaPhasePattern : CommandBase
  {
    public override string Documentation
    {
      get { return "Get whether a spoofer ignore the receiver's antenna phase pattern."; }
    }

    internal const string CmdName = "IsSpoofTxIgnoreRxAntennaPhasePattern";

    public IsSpoofTxIgnoreRxAntennaPhasePattern()
      : base(CmdName)
    {}

    public IsSpoofTxIgnoreRxAntennaPhasePattern(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of IsSpoofTxIgnoreRxAntennaPhasePattern.
  ///
  /// Name   Type   Description
  /// ------ ------ --------------------------------------------------------------
  /// Ignore bool   If true, the receiver's antenna phase pattern will be ignored.
  /// Id     string Transmitter unique identifier.
  ///

  public class IsSpoofTxIgnoreRxAntennaPhasePatternResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of IsSpoofTxIgnoreRxAntennaPhasePattern."; }
    }

    internal const string CmdName = "IsSpoofTxIgnoreRxAntennaPhasePatternResult";

    public IsSpoofTxIgnoreRxAntennaPhasePatternResult()
      : base(CmdName)
    {}

    public IsSpoofTxIgnoreRxAntennaPhasePatternResult(CommandBase relatedCommand, bool ignore, string id)
      : base(CmdName, relatedCommand)
    {
      Ignore = ignore;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ignore")
        && Contains("Id")
      ;
      }
    }

    public bool Ignore
    {
      get { return GetValue("Ignore").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Ignore", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set spoofer transmitter static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetSpoofTxFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Set spoofer transmitter static position and orientation"; }
    }

    internal const string CmdName = "SetSpoofTxFix";

    public SetSpoofTxFix()
      : base(CmdName)
    {}

    public SetSpoofTxFix(double lat, double lon, double alt, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get spoofer transmitter static position and orientation
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxFix : CommandBase
  {
    public override string Documentation
    {
      get { return "Get spoofer transmitter static position and orientation"; }
    }

    internal const string CmdName = "GetSpoofTxFix";

    public GetSpoofTxFix()
      : base(CmdName)
    {}

    public GetSpoofTxFix(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxFix.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Lat   double Latitude (rad)
  /// Lon   double Longitude (rad)
  /// Alt   double Altitude (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class GetSpoofTxFixResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxFix."; }
    }

    internal const string CmdName = "GetSpoofTxFixResult";

    public GetSpoofTxFixResult()
      : base(CmdName)
    {}

    public GetSpoofTxFixResult(CommandBase relatedCommand, double lat, double lon, double alt, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set spoofer transmitter static position and orientation
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetSpoofTxFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Set spoofer transmitter static position and orientation"; }
    }

    internal const string CmdName = "SetSpoofTxFixEcef";

    public SetSpoofTxFixEcef()
      : base(CmdName)
    {}

    public SetSpoofTxFixEcef(double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get spoofer transmitter static position and orientation
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxFixEcef : CommandBase
  {
    public override string Documentation
    {
      get { return "Get spoofer transmitter static position and orientation"; }
    }

    internal const string CmdName = "GetSpoofTxFixEcef";

    public GetSpoofTxFixEcef()
      : base(CmdName)
    {}

    public GetSpoofTxFixEcef(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxFixEcef.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// X     double ECEF X (m)
  /// Y     double ECEF Y (m)
  /// Z     double ECEF Z (m)
  /// Yaw   double Yaw (rad)
  /// Pitch double Pitch (rad)
  /// Roll  double Roll (rad)
  /// Id    string Transmitter unique identifier.
  ///

  public class GetSpoofTxFixEcefResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxFixEcef."; }
    }

    internal const string CmdName = "GetSpoofTxFixEcefResult";

    public GetSpoofTxFixEcefResult()
      : base(CmdName)
    {}

    public GetSpoofTxFixEcefResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set spoofer transmitter circular trajectory
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// Id          string          Transmitter unique identifier.
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class SetSpoofTxCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Set spoofer transmitter circular trajectory"; }
    }

    internal const string CmdName = "SetSpoofTxCircular";

    public SetSpoofTxCircular()
      : base(CmdName)
    {}

    public SetSpoofTxCircular(double lat, double lon, double alt, double radius, double speed, bool clockwise, string id, double? originAngle = null)
      : base(CmdName)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      Id = id;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get spoofer transmitter circular trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxCircular : CommandBase
  {
    public override string Documentation
    {
      get { return "Get spoofer transmitter circular trajectory"; }
    }

    internal const string CmdName = "GetSpoofTxCircular";

    public GetSpoofTxCircular()
      : base(CmdName)
    {}

    public GetSpoofTxCircular(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxCircular.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------
  /// Lat         double          Center latitude (rad)
  /// Lon         double          Center longitude (rad)
  /// Alt         double          Altitude (m)
  /// Radius      double          Radius (m)
  /// Speed       double          Speed (m/s)
  /// Clockwise   bool            If true, vehicle turns clockwise
  /// Id          string          Transmitter unique identifier.
  /// OriginAngle optional double Vehicle angle at elapsed time 0.
  ///

  public class GetSpoofTxCircularResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxCircular."; }
    }

    internal const string CmdName = "GetSpoofTxCircularResult";

    public GetSpoofTxCircularResult()
      : base(CmdName)
    {}

    public GetSpoofTxCircularResult(CommandBase relatedCommand, double lat, double lon, double alt, double radius, double speed, bool clockwise, string id, double? originAngle = null)
      : base(CmdName, relatedCommand)
    {
      Lat = lat;
      Lon = lon;
      Alt = alt;
      Radius = radius;
      Speed = speed;
      Clockwise = clockwise;
      Id = id;
      OriginAngle = originAngle;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Lat")
        && Contains("Lon")
        && Contains("Alt")
        && Contains("Radius")
        && Contains("Speed")
        && Contains("Clockwise")
        && Contains("Id")
      ;
      }
    }

    public double Lat
    {
      get { return GetValue("Lat").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lat", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Lon
    {
      get { return GetValue("Lon").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Lon", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Alt
    {
      get { return GetValue("Alt").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Alt", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Radius
    {
      get { return GetValue("Radius").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Radius", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Speed
    {
      get { return GetValue("Speed").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Speed", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool Clockwise
    {
      get { return GetValue("Clockwise").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("Clockwise", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double? OriginAngle
    {
      get { return GetValue("OriginAngle").ToObject<double?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("OriginAngle");
        else
          SetValue("OriginAngle", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set spoofer transmitter HIL trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class SetSpoofTxHil : CommandBase
  {
    public override string Documentation
    {
      get { return "Set spoofer transmitter HIL trajectory"; }
    }

    internal const string CmdName = "SetSpoofTxHil";

    public SetSpoofTxHil()
      : base(CmdName)
    {}

    public SetSpoofTxHil(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get spoofer transmitter trajectory
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxTrajectory : CommandBase
  {
    public override string Documentation
    {
      get { return "Get spoofer transmitter trajectory"; }
    }

    internal const string CmdName = "GetSpoofTxTrajectory";

    public GetSpoofTxTrajectory()
      : base(CmdName)
    {}

    public GetSpoofTxTrajectory(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxTrajectory.
  ///
  /// Name           Type   Description
  /// -------------- ------ ---------------------------------------------------
  /// TrajectoryType string Type of the trajectory of the spoofer transmitters.
  /// Id             string Transmitter unique identifier.
  ///

  public class GetSpoofTxTrajectoryResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxTrajectory."; }
    }

    internal const string CmdName = "GetSpoofTxTrajectoryResult";

    public GetSpoofTxTrajectoryResult()
      : base(CmdName)
    {}

    public GetSpoofTxTrajectoryResult(CommandBase relatedCommand, string trajectoryType, string id)
      : base(CmdName, relatedCommand)
    {
      TrajectoryType = trajectoryType;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("TrajectoryType")
        && Contains("Id")
      ;
      }
    }

    public string TrajectoryType
    {
      get { return GetValue("TrajectoryType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("TrajectoryType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set transmitter antenna pattern.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Id   string             Transmitter unique identifier.
  ///

  public class SetSpoofTxAntenna : CommandBase
  {
    public override string Documentation
    {
      get { return "Set transmitter antenna pattern."; }
    }

    internal const string CmdName = "SetSpoofTxAntenna";

    public SetSpoofTxAntenna()
      : base(CmdName)
    {}

    public SetSpoofTxAntenna(List<List<double>> gain, AntennaPatternType type, string id)
      : base(CmdName)
    {
      Gain = gain;
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get transmitter antenna pattern.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxAntenna : CommandBase
  {
    public override string Documentation
    {
      get { return "Get transmitter antenna pattern."; }
    }

    internal const string CmdName = "GetSpoofTxAntenna";

    public GetSpoofTxAntenna()
      : base(CmdName)
    {}

    public GetSpoofTxAntenna(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxAntenna.
  ///
  /// Name Type               Description
  /// ---- ------------------ -------------------------------------------------------------------------------------------------------------------------
  /// Gain array array double Gain matrix (dB). The first dimension will be mapped to elevation [-90, 90] and the second dimension to azimuth [0, 360[.
  /// Type AntennaPatternType Pattern type
  /// Id   string             Transmitter unique identifier.
  ///

  public class GetSpoofTxAntennaResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxAntenna."; }
    }

    internal const string CmdName = "GetSpoofTxAntennaResult";

    public GetSpoofTxAntennaResult()
      : base(CmdName)
    {}

    public GetSpoofTxAntennaResult(CommandBase relatedCommand, List<List<double>> gain, AntennaPatternType type, string id)
      : base(CmdName, relatedCommand)
    {
      Gain = gain;
      Type = type;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Gain")
        && Contains("Type")
        && Contains("Id")
      ;
      }
    }

    public List<List<double>> Gain
    {
      get { return GetValue("Gain").ToObject<List<List<double>>>(CommandBase.Serializer); }
      set
      {
          SetValue("Gain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public AntennaPatternType Type
    {
      get { return GetValue("Type").ToObject<AntennaPatternType>(CommandBase.Serializer); }
      set
      {
          SetValue("Type", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the transmitter trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// X     double Antenna X offset in the body frame
  /// Y     double Antenna Y offset in the body frame
  /// Z     double Antenna Z offset in the body frame
  /// Yaw   double Antenna Yaw offset in the body frame
  /// Pitch double Antenna Pitch offset in the body frame
  /// Roll  double Antenna Roll offset in the body frame
  /// Id    string Transmitter unique identifier.
  ///

  public class SetSpoofTxAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Set antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the transmitter trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "SetSpoofTxAntennaOffset";

    public SetSpoofTxAntennaOffset()
      : base(CmdName)
    {}

    public SetSpoofTxAntennaOffset(double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get antenna offset and orientation relative to body frame.
  /// The origin of the body frame follows the transmitter trajectory.
  /// When the body yaw/pitch/roll are zeros, the body X-axis is pointing north
  ///                          Y-axis is pointing east
  ///                          Z-axis is pointing down
  /// The antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and
  /// the Roll is rotating arond the X-axis of the body frame.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxAntennaOffset : CommandBase
  {
    public override string Documentation
    {
      get { return "Get antenna offset and orientation relative to body frame.\nThe origin of the body frame follows the transmitter trajectory.\nWhen the body yaw/pitch/roll are zeros, the body X-axis is pointing north\n                         Y-axis is pointing east\n                         Z-axis is pointing down\nThe antenna Yaw is rotating around Z-axis. Pitch is rotating around Y-axis and\nthe Roll is rotating arond the X-axis of the body frame."; }
    }

    internal const string CmdName = "GetSpoofTxAntennaOffset";

    public GetSpoofTxAntennaOffset()
      : base(CmdName)
    {}

    public GetSpoofTxAntennaOffset(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxAntennaOffset.
  ///
  /// Name  Type   Description
  /// ----- ------ --------------------------------------
  /// X     double Antenna X offset in the body frame
  /// Y     double Antenna Y offset in the body frame
  /// Z     double Antenna Z offset in the body frame
  /// Yaw   double Antenna Yaw offset in the body frame
  /// Pitch double Antenna Pitch offset in the body frame
  /// Roll  double Antenna Roll offset in the body frame
  /// Id    string Transmitter unique identifier.
  ///

  public class GetSpoofTxAntennaOffsetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxAntennaOffset."; }
    }

    internal const string CmdName = "GetSpoofTxAntennaOffsetResult";

    public GetSpoofTxAntennaOffsetResult()
      : base(CmdName)
    {}

    public GetSpoofTxAntennaOffsetResult(CommandBase relatedCommand, double x, double y, double z, double yaw, double pitch, double roll, string id)
      : base(CmdName, relatedCommand)
    {
      X = x;
      Y = y;
      Z = z;
      Yaw = yaw;
      Pitch = pitch;
      Roll = roll;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("X")
        && Contains("Y")
        && Contains("Z")
        && Contains("Yaw")
        && Contains("Pitch")
        && Contains("Roll")
        && Contains("Id")
      ;
      }
    }

    public double X
    {
      get { return GetValue("X").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("X", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Y
    {
      get { return GetValue("Y").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Y", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Z
    {
      get { return GetValue("Z").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Z", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Yaw
    {
      get { return GetValue("Yaw").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Yaw", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Pitch
    {
      get { return GetValue("Pitch").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Pitch", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Roll
    {
      get { return GetValue("Roll").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Roll", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the address of the spoofer instance that will
  /// generate the signal for this spoofer transmitter.
  ///
  /// Name       Type   Description
  /// ---------- ------ ------------------------------
  /// Address    string Remote instance IP address.
  /// InstanceId int    Remote instance ID.
  /// Id         string Transmitter unique identifier.
  ///

  public class SetSpoofTxRemoteAddress : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the address of the spoofer instance that will\ngenerate the signal for this spoofer transmitter."; }
    }

    internal const string CmdName = "SetSpoofTxRemoteAddress";

    public SetSpoofTxRemoteAddress()
      : base(CmdName)
    {}

    public SetSpoofTxRemoteAddress(string address, int instanceId, string id)
      : base(CmdName)
    {
      Address = address;
      InstanceId = instanceId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Address")
        && Contains("InstanceId")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int InstanceId
    {
      get { return GetValue("InstanceId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("InstanceId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get the address of the spoofer instance that will
  /// generate the signal for this spoofer transmitter.
  ///
  /// Name Type   Description
  /// ---- ------ ------------------------------
  /// Id   string Transmitter unique identifier.
  ///

  public class GetSpoofTxRemoteAddress : CommandBase
  {
    public override string Documentation
    {
      get { return "Get the address of the spoofer instance that will\ngenerate the signal for this spoofer transmitter."; }
    }

    internal const string CmdName = "GetSpoofTxRemoteAddress";

    public GetSpoofTxRemoteAddress()
      : base(CmdName)
    {}

    public GetSpoofTxRemoteAddress(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSpoofTxRemoteAddress.
  ///
  /// Name       Type   Description
  /// ---------- ------ ------------------------------
  /// Address    string Remote instance IP address.
  /// InstanceId int    Remote instance ID.
  /// Id         string Transmitter unique identifier.
  ///

  public class GetSpoofTxRemoteAddressResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSpoofTxRemoteAddress."; }
    }

    internal const string CmdName = "GetSpoofTxRemoteAddressResult";

    public GetSpoofTxRemoteAddressResult()
      : base(CmdName)
    {}

    public GetSpoofTxRemoteAddressResult(CommandBase relatedCommand, string address, int instanceId, string id)
      : base(CmdName, relatedCommand)
    {
      Address = address;
      InstanceId = instanceId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Address")
        && Contains("InstanceId")
        && Contains("Id")
      ;
      }
    }

    public string Address
    {
      get { return GetValue("Address").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Address", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int InstanceId
    {
      get { return GetValue("InstanceId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("InstanceId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the spoofing transmitter reference power.
  ///
  /// Name  Type   Description
  /// ----- ------ ------------------------------
  /// Power double Reference Power (dBm)
  /// Id    string Transmitter unique identifier.
  ///

  public class SetSpoofTxRefPower : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the spoofing transmitter reference power."; }
    }

    internal const string CmdName = "SetSpoofTxRefPower";

    public SetSpoofTxRefPower()
      : base(CmdName)
    {}

    public SetSpoofTxRefPower(double power, string id)
      : base(CmdName)
    {
      Power = power;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Power")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public double Power
    {
      get { return GetValue("Power").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Power", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Reset the spoofer's signal GPU index to default.
  ///
  /// Name     Type   Description
  /// -------- ------ -------------------------------
  /// SignalId int    Spoofer output number, 0-based.
  /// Id       string Transmitter unique identifier.
  ///

  public class ClearSpoofTxGpuIdx : CommandBase
  {
    public override string Documentation
    {
      get { return "Reset the spoofer's signal GPU index to default."; }
    }

    internal const string CmdName = "ClearSpoofTxGpuIdx";

    public ClearSpoofTxGpuIdx()
      : base(CmdName)
    {}

    public ClearSpoofTxGpuIdx(int signalId, string id)
      : base(CmdName)
    {
      SignalId = signalId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("SignalId")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int SignalId
    {
      get { return GetValue("SignalId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set the GPU index on which this spoofer signal will be modulated.
  ///
  /// Name     Type   Description
  /// -------- ------ -------------------------------
  /// GpuIdx   int    The GPU index.
  /// SignalId int    Spoofer output number, 0-based.
  /// Id       string Transmitter unique identifier.
  ///

  public class SetSpoofTxGpuIdx : CommandBase
  {
    public override string Documentation
    {
      get { return "Set the GPU index on which this spoofer signal will be modulated."; }
    }

    internal const string CmdName = "SetSpoofTxGpuIdx";

    public SetSpoofTxGpuIdx()
      : base(CmdName)
    {}

    public SetSpoofTxGpuIdx(int gpuIdx, int signalId, string id)
      : base(CmdName)
    {
      GpuIdx = gpuIdx;
      SignalId = signalId;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("GpuIdx")
        && Contains("SignalId")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int GpuIdx
    {
      get { return GetValue("GpuIdx").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("GpuIdx", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SignalId
    {
      get { return GetValue("SignalId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set external channels path.
  ///
  /// Name Type   Description
  /// ---- ------ -----------------------------
  /// Path string Path to the sdxpand directory
  ///

  public class SetExternalChannelsPath : CommandBase
  {
    public override string Documentation
    {
      get { return "Set external channels path."; }
    }

    internal const string CmdName = "SetExternalChannelsPath";

    public SetExternalChannelsPath()
      : base(CmdName)
    {}

    public SetExternalChannelsPath(string path)
      : base(CmdName)
    {
      Path = path;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_NO_CONFIG | EXECUTE_IF_IDLE; } }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Mapping PRN to the corresponding SV ID. Get a list of SV IDs based on a specific signal. Accepted signal keys: "L1CA", "L1C", "L1P", "L1ME", "L1MR", "L2C", "L2P", "L5", "G1", "G2", "E1", "E1PRS", "E5a", "E5b", "E6BC", "E6PRS", "B1", "B2", "B2a", "B1C", "SBASL1", "SBASL5", "QZSSL1CA", "QZSSL1CB", "QZSSL1C", "QZSSL2C", "QZSSL5", "QZSSL1S", "QZSSL5S" and "NAVICL5"
  ///
  /// Name   Type   Description
  /// ------ ------ ----------------------------------------------------------------------
  /// Signal string Signal key - see GetSVIDsOfPrn command description for possible values
  /// Prn    int    Satellite PRN number
  ///

  public class GetSVIDsOfPrn : CommandBase
  {
    public override string Documentation
    {
      get { return "Mapping PRN to the corresponding SV ID. Get a list of SV IDs based on a specific signal. Accepted signal keys: \"L1CA\", \"L1C\", \"L1P\", \"L1ME\", \"L1MR\", \"L2C\", \"L2P\", \"L5\", \"G1\", \"G2\", \"E1\", \"E1PRS\", \"E5a\", \"E5b\", \"E6BC\", \"E6PRS\", \"B1\", \"B2\", \"B2a\", \"B1C\", \"SBASL1\", \"SBASL5\", \"QZSSL1CA\", \"QZSSL1CB\", \"QZSSL1C\", \"QZSSL2C\", \"QZSSL5\", \"QZSSL1S\", \"QZSSL5S\" and \"NAVICL5\""; }
    }

    internal const string CmdName = "GetSVIDsOfPrn";

    public GetSVIDsOfPrn()
      : base(CmdName)
    {}

    public GetSVIDsOfPrn(string signal, int prn)
      : base(CmdName)
    {
      Signal = signal;
      Prn = prn;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Prn")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSVIDsOfPrn.
  ///
  /// Name     Type      Description
  /// -------- --------- ----------------------------------------------------------------------
  /// Signal   string    Signal key - see GetSVIDsOfPrn command description for possible values
  /// Prn      int       Satellite PRN number
  /// SvIdList array int A list containing all SV ID of a specific signal
  ///

  public class GetSVIDsOfPrnResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSVIDsOfPrn."; }
    }

    internal const string CmdName = "GetSVIDsOfPrnResult";

    public GetSVIDsOfPrnResult()
      : base(CmdName)
    {}

    public GetSVIDsOfPrnResult(CommandBase relatedCommand, string signal, int prn, List<int> svIdList)
      : base(CmdName, relatedCommand)
    {
      Signal = signal;
      Prn = prn;
      SvIdList = svIdList;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Signal")
        && Contains("Prn")
        && Contains("SvIdList")
      ;
      }
    }

    public string Signal
    {
      get { return GetValue("Signal").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Signal", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<int> SvIdList
    {
      get { return GetValue("SvIdList").ToObject<List<int>>(CommandBase.Serializer); }
      set
      {
          SetValue("SvIdList", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set Add an augmentation to the L1S navigation messages.
  ///
  /// Name       Type   Description
  /// ---------- ------ ----------------------------------------------------------------------------------
  /// System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
  /// Prn        int    Satellite PRN number.
  /// AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
  /// AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
  /// Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
  /// Id         string Unique identifier of the augmentation.
  ///

  public class SetQzssL1SAugmentation : CommandBase
  {
    public override string Documentation
    {
      get { return "Set Add an augmentation to the L1S navigation messages."; }
    }

    internal const string CmdName = "SetQzssL1SAugmentation";

    public SetQzssL1SAugmentation()
      : base(CmdName)
    {}

    public SetQzssL1SAugmentation(string system, int prn, bool augmentIOD, bool augmentPRC, double prc, string id)
      : base(CmdName)
    {
      System = system;
      Prn = prn;
      AugmentIOD = augmentIOD;
      AugmentPRC = augmentPRC;
      Prc = prc;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Prn")
        && Contains("AugmentIOD")
        && Contains("AugmentPRC")
        && Contains("Prc")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool AugmentIOD
    {
      get { return GetValue("AugmentIOD").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("AugmentIOD", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool AugmentPRC
    {
      get { return GetValue("AugmentPRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("AugmentPRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Prc
    {
      get { return GetValue("Prc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Prc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get Add an augmentation to the L1S navigation messages.
  ///
  /// Name Type   Description
  /// ---- ------ --------------------------------------
  /// Id   string Unique identifier of the augmentation.
  ///

  public class GetQzssL1SAugmentation : CommandBase
  {
    public override string Documentation
    {
      get { return "Get Add an augmentation to the L1S navigation messages."; }
    }

    internal const string CmdName = "GetQzssL1SAugmentation";

    public GetQzssL1SAugmentation()
      : base(CmdName)
    {}

    public GetQzssL1SAugmentation(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetQzssL1SAugmentation.
  ///
  /// Name       Type   Description
  /// ---------- ------ ----------------------------------------------------------------------------------
  /// System     string "GPS", "GLONASS", "Galileo", "BeiDou" or "QZSS"
  /// Prn        int    Satellite PRN number.
  /// AugmentIOD bool   Include the satellite Issue Of Data in L1S message.
  /// AugmentPRC bool   Include the satellite Pseudorange Correction in L1S message.
  /// Prc        double Pseudorange Correction to include in L1S message. Only used if AugmentPSR is True.
  /// Id         string Unique identifier of the augmentation.
  ///

  public class GetQzssL1SAugmentationResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL1SAugmentation."; }
    }

    internal const string CmdName = "GetQzssL1SAugmentationResult";

    public GetQzssL1SAugmentationResult()
      : base(CmdName)
    {}

    public GetQzssL1SAugmentationResult(CommandBase relatedCommand, string system, int prn, bool augmentIOD, bool augmentPRC, double prc, string id)
      : base(CmdName, relatedCommand)
    {
      System = system;
      Prn = prn;
      AugmentIOD = augmentIOD;
      AugmentPRC = augmentPRC;
      Prc = prc;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Prn")
        && Contains("AugmentIOD")
        && Contains("AugmentPRC")
        && Contains("Prc")
        && Contains("Id")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int Prn
    {
      get { return GetValue("Prn").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Prn", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool AugmentIOD
    {
      get { return GetValue("AugmentIOD").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("AugmentIOD", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool AugmentPRC
    {
      get { return GetValue("AugmentPRC").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("AugmentPRC", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Prc
    {
      get { return GetValue("Prc").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Prc", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes a QZSS L1S augmentation.
  ///
  /// Name Type   Description
  /// ---- ------ ----------------------------------------------
  /// Id   string Unique identifier (see SetQzssL1SAugmentation)
  ///

  public class RemoveQzssL1SAugmentation : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes a QZSS L1S augmentation."; }
    }

    internal const string CmdName = "RemoveQzssL1SAugmentation";

    public RemoveQzssL1SAugmentation()
      : base(CmdName)
    {}

    public RemoveQzssL1SAugmentation(string id)
      : base(CmdName)
    {
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clears all QZSS L1S augmentations.
  ///
  /// 
  ///

  public class ClearQzssL1SAugmentations : CommandBase
  {
    public override string Documentation
    {
      get { return "Clears all QZSS L1S augmentations."; }
    }

    internal const string CmdName = "ClearQzssL1SAugmentations";

    public ClearQzssL1SAugmentations()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Get all QZSS L1S augmentation's IDs.
  ///
  /// 
  ///

  public class GetQzssL1SAugmentations : CommandBase
  {
    public override string Documentation
    {
      get { return "Get all QZSS L1S augmentation's IDs."; }
    }

    internal const string CmdName = "GetQzssL1SAugmentations";

    public GetQzssL1SAugmentations()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetQzssL1SAugmentations.
  ///
  /// Name Type         Description
  /// ---- ------------ --------------------------------------
  /// Ids  array string List of IDs of QZSS L1S augmentations.
  ///

  public class GetQzssL1SAugmentationsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetQzssL1SAugmentations."; }
    }

    internal const string CmdName = "GetQzssL1SAugmentationsResult";

    public GetQzssL1SAugmentationsResult()
      : base(CmdName)
    {}

    public GetQzssL1SAugmentationsResult(CommandBase relatedCommand, List<string> ids)
      : base(CmdName, relatedCommand)
    {
      Ids = ids;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Ids")
      ;
      }
    }

    public List<string> Ids
    {
      get { return GetValue("Ids").ToObject<List<string>>(CommandBase.Serializer); }
      set
      {
          SetValue("Ids", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set whether the JAM Calibration output is transmitting.
  ///
  /// Name  Type Description
  /// ----- ---- ------------------------------------------------------------------------------
  /// State bool True for the signal to go through the JAM Calibration output, False otherwise.
  ///

  public class SetWavefrontJamCalibrationState : CommandBase
  {
    public override string Documentation
    {
      get { return "Set whether the JAM Calibration output is transmitting."; }
    }

    internal const string CmdName = "SetWavefrontJamCalibrationState";

    public SetWavefrontJamCalibrationState()
      : base(CmdName)
    {}

    public SetWavefrontJamCalibrationState(bool state)
      : base(CmdName)
    {
      State = state;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("State")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public bool State
    {
      get { return GetValue("State").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("State", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Add a new data set for the specified constellation. This could come from a Rinex, SEM or YUMA file for GPS. Only Rinex for the others.
  ///
  /// Name        Type            Description
  /// ----------- --------------- --------------------------------------------------------------------------------------------------------------------
  /// System      string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// Path        string          Data set file path
  /// Rollover    optional int    Rollover for file types that does not precise it (YUMA, SEM). Default value is the current rollover.
  /// DataSetName optional string Name of the data set to import. This parameter is optional, the default value will be the name of the imported file.
  ///

  public class AddDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Add a new data set for the specified constellation. This could come from a Rinex, SEM or YUMA file for GPS. Only Rinex for the others."; }
    }

    internal const string CmdName = "AddDataSet";

    public AddDataSet()
      : base(CmdName)
    {}

    public AddDataSet(string system, string path, int? rollover = null, string dataSetName = null)
      : base(CmdName)
    {
      System = system;
      Path = path;
      Rollover = rollover;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("Path")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Path
    {
      get { return GetValue("Path").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Path", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int? Rollover
    {
      get { return GetValue("Rollover").ToObject<int?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("Rollover");
        else
          SetValue("Rollover", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("DataSetName");
        else
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set data set assignation for the specified constellation.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetType string "Almanac", "Ephemeris" or "Orbit"
  /// DataSetName string The name of the assigned data set.
  ///

  public class SetDataSetAssignation : CommandBase
  {
    public override string Documentation
    {
      get { return "Set data set assignation for the specified constellation."; }
    }

    internal const string CmdName = "SetDataSetAssignation";

    public SetDataSetAssignation()
      : base(CmdName)
    {}

    public SetDataSetAssignation(string system, string dataSetType, string dataSetName)
      : base(CmdName)
    {
      System = system;
      DataSetType = dataSetType;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetType")
        && Contains("DataSetName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetType
    {
      get { return GetValue("DataSetType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get data set assignation for the specified constellation.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetType string "Almanac", "Ephemeris" or "Orbit"
  ///

  public class GetDataSetAssignation : CommandBase
  {
    public override string Documentation
    {
      get { return "Get data set assignation for the specified constellation."; }
    }

    internal const string CmdName = "GetDataSetAssignation";

    public GetDataSetAssignation()
      : base(CmdName)
    {}

    public GetDataSetAssignation(string system, string dataSetType)
      : base(CmdName)
    {
      System = system;
      DataSetType = dataSetType;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetType")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetType
    {
      get { return GetValue("DataSetType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetDataSetAssignation.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetType string "Almanac", "Ephemeris" or "Orbit"
  /// DataSetName string The name of the assigned data set.
  ///

  public class GetDataSetAssignationResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetDataSetAssignation."; }
    }

    internal const string CmdName = "GetDataSetAssignationResult";

    public GetDataSetAssignationResult()
      : base(CmdName)
    {}

    public GetDataSetAssignationResult(CommandBase relatedCommand, string system, string dataSetType, string dataSetName)
      : base(CmdName, relatedCommand)
    {
      System = system;
      DataSetType = dataSetType;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetType")
        && Contains("DataSetName")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetType
    {
      get { return GetValue("DataSetType").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetType", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Rename data set.
  ///
  /// Name           Type   Description
  /// -------------- ------ ---------------------------------------------
  /// System         string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetName    string The name of the data set to rename.
  /// NewDataSetName string The new name to be given to the data set.
  ///

  public class RenameDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Rename data set."; }
    }

    internal const string CmdName = "RenameDataSet";

    public RenameDataSet()
      : base(CmdName)
    {}

    public RenameDataSet(string system, string dataSetName, string newDataSetName)
      : base(CmdName)
    {
      System = system;
      DataSetName = dataSetName;
      NewDataSetName = newDataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetName")
        && Contains("NewDataSetName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string NewDataSetName
    {
      get { return GetValue("NewDataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("NewDataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Delete data set.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetName string The name of the data set to delete.
  ///

  public class DeleteDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Delete data set."; }
    }

    internal const string CmdName = "DeleteDataSet";

    public DeleteDataSet()
      : base(CmdName)
    {}

    public DeleteDataSet(string system, string dataSetName)
      : base(CmdName)
    {
      System = system;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set active data set.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetName string The name of the data set to set as active.
  ///

  public class SetActiveDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Set active data set."; }
    }

    internal const string CmdName = "SetActiveDataSet";

    public SetActiveDataSet()
      : base(CmdName)
    {}

    public SetActiveDataSet(string system, string dataSetName)
      : base(CmdName)
    {
      System = system;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get active data set.
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------------------------------
  /// System string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  ///

  public class GetActiveDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Get active data set."; }
    }

    internal const string CmdName = "GetActiveDataSet";

    public GetActiveDataSet()
      : base(CmdName)
    {}

    public GetActiveDataSet(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetActiveDataSet.
  ///
  /// Name        Type   Description
  /// ----------- ------ ---------------------------------------------
  /// System      string "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetName string The name of the data set to set as active.
  ///

  public class GetActiveDataSetResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetActiveDataSet."; }
    }

    internal const string CmdName = "GetActiveDataSetResult";

    public GetActiveDataSetResult()
      : base(CmdName)
    {}

    public GetActiveDataSetResult(CommandBase relatedCommand, string system, string dataSetName)
      : base(CmdName, relatedCommand)
    {
      System = system;
      DataSetName = dataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetName")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Duplicate an existing data set.
  ///
  /// Name           Type            Description
  /// -------------- --------------- ----------------------------------------------------------------------------------
  /// System         string          "GPS", "Galileo", "BeiDou", "NavIC" or "QZSS"
  /// DataSetName    string          The name of the data set to duplicate.
  /// NewDataSetName optional string The name of the new duplicate data set. If omitted, a copy name will be generated.
  ///

  public class DuplicateDataSet : CommandBase
  {
    public override string Documentation
    {
      get { return "Duplicate an existing data set."; }
    }

    internal const string CmdName = "DuplicateDataSet";

    public DuplicateDataSet()
      : base(CmdName)
    {}

    public DuplicateDataSet(string system, string dataSetName, string newDataSetName = null)
      : base(CmdName)
    {
      System = system;
      DataSetName = dataSetName;
      NewDataSetName = newDataSetName;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("DataSetName")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string DataSetName
    {
      get { return GetValue("DataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("DataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string NewDataSetName
    {
      get { return GetValue("NewDataSetName").ToObject<string>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("NewDataSetName");
        else
          SetValue("NewDataSetName", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Elevation and Azimuth angular position.
  ///
  /// Name      Type   Description
  /// --------- ------ ----------------
  /// Elevation double Elevation angle.
  /// Azimuth   double Azimuth angle.
  ///

  public struct ElevationAzimuth
  {
    public double Elevation;
    public double Azimuth;
  }


  ///
  /// Get elevation and azimuth position angles for all satellites.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  ///

  public class GetElevationAzimuthForEachSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get elevation and azimuth position angles for all satellites."; }
    }

    internal const string CmdName = "GetElevationAzimuthForEachSV";

    public GetElevationAzimuthForEachSV()
      : base(CmdName)
    {}

    public GetElevationAzimuthForEachSV(string system)
      : base(CmdName)
    {
      System = system;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetElevationAzimuthForEachSV.
  ///
  /// Name              Type                            Description
  /// ----------------- ------------------------------- -----------------------------------------------------------------
  /// System            string                          "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// ElevationAzimuths array optional ElevationAzimuth Elevation and Azimuth position angles of the satellites.
  ///

  public class GetElevationAzimuthForEachSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetElevationAzimuthForEachSV."; }
    }

    internal const string CmdName = "GetElevationAzimuthForEachSVResult";

    public GetElevationAzimuthForEachSVResult()
      : base(CmdName)
    {}

    public GetElevationAzimuthForEachSVResult(CommandBase relatedCommand, string system, List<ElevationAzimuth?> elevationAzimuths)
      : base(CmdName, relatedCommand)
    {
      System = system;
      ElevationAzimuths = elevationAzimuths;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("ElevationAzimuths")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<ElevationAzimuth?> ElevationAzimuths
    {
      get { return GetValue("ElevationAzimuths").ToObject<List<ElevationAzimuth?>>(CommandBase.Serializer); }
      set
      {
          SetValue("ElevationAzimuths", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get elevation and azimuth position angles for satellite.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------
  /// System string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId   int    Satellite's SV ID.
  ///

  public class GetElevationAzimuthForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Get elevation and azimuth position angles for satellite."; }
    }

    internal const string CmdName = "GetElevationAzimuthForSV";

    public GetElevationAzimuthForSV()
      : base(CmdName)
    {}

    public GetElevationAzimuthForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE | EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetElevationAzimuthForSV.
  ///
  /// Name             Type                      Description
  /// ---------------- ------------------------- -----------------------------------------------------------------
  /// System           string                    "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC".
  /// SvId             int                       Satellite's SV ID.
  /// ElevationAzimuth optional ElevationAzimuth Elevation and Azimuth position angles of the satellite.
  ///

  public class GetElevationAzimuthForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetElevationAzimuthForSV."; }
    }

    internal const string CmdName = "GetElevationAzimuthForSVResult";

    public GetElevationAzimuthForSVResult()
      : base(CmdName)
    {}

    public GetElevationAzimuthForSVResult(CommandBase relatedCommand, string system, int svId, ElevationAzimuth? elevationAzimuth = null)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      ElevationAzimuth = elevationAzimuth;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public ElevationAzimuth? ElevationAzimuth
    {
      get { return GetValue("ElevationAzimuth").ToObject<ElevationAzimuth?>(CommandBase.Serializer); }
      set
      {
        if (value == null)
          RemoveValue("ElevationAzimuth");
        else
          SetValue("ElevationAzimuth", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// SBAS service message region.
  ///
  /// Name            Type   Description
  /// --------------- ------ -------------------------------------------------
  /// FirstLatitude   int    First latitude (deg).
  /// FirstLongitude  int    First longitude (deg).
  /// SecondLatitude  int    Second latitude (deg).
  /// SecondLongitude int    Second longitude (deg).
  /// Shape           string Region shape, accepts "Triangle" and "Rectangle".
  ///

  public struct SbasServiceMessageRegion
  {
    public int FirstLatitude;
    public int FirstLongitude;
    public int SecondLatitude;
    public int SecondLongitude;
    public string Shape;
  }


  ///
  /// Set (or Modify) a SBAS service message region group.
  ///
  /// Name            Type                           Description
  /// --------------- ------------------------------ ---------------------------------------------------------------------------------
  /// ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
  /// PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
  /// Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
  /// Id              string                         Unique identifier of the SBAS service message region group.
  ///

  public class SetSbasServiceMessageRegionGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Set (or Modify) a SBAS service message region group."; }
    }

    internal const string CmdName = "SetSbasServiceMessageRegionGroup";

    public SetSbasServiceMessageRegionGroup()
      : base(CmdName)
    {}

    public SetSbasServiceMessageRegionGroup(string serviceProvider, int deltaUdrei, int priorityCode, List<SbasServiceMessageRegion> regions, string id)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      DeltaUdrei = deltaUdrei;
      PriorityCode = priorityCode;
      Regions = regions;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("DeltaUdrei")
        && Contains("PriorityCode")
        && Contains("Regions")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int DeltaUdrei
    {
      get { return GetValue("DeltaUdrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaUdrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int PriorityCode
    {
      get { return GetValue("PriorityCode").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("PriorityCode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<SbasServiceMessageRegion> Regions
    {
      get { return GetValue("Regions").ToObject<List<SbasServiceMessageRegion>>(CommandBase.Serializer); }
      set
      {
          SetValue("Regions", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get infos about the SBAS service message region group at this index.
  ///
  /// Name            Type   Description
  /// --------------- ------ -----------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// Id              string Unique identifier of the SBAS service message region group.
  ///

  public class GetSbasServiceMessageRegionGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Get infos about the SBAS service message region group at this index."; }
    }

    internal const string CmdName = "GetSbasServiceMessageRegionGroup";

    public GetSbasServiceMessageRegionGroup()
      : base(CmdName)
    {}

    public GetSbasServiceMessageRegionGroup(string serviceProvider, string id)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSbasServiceMessageRegionGroup.
  ///
  /// Name            Type                           Description
  /// --------------- ------------------------------ ---------------------------------------------------------------------------------
  /// ServiceProvider string                         Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// DeltaUdrei      int                            Delta UDREI applicable inside the defined regions. Accepted range is [0..15].
  /// PriorityCode    int                            Priority code of the SBAS service message region group. Accepted range is [0..3].
  /// Regions         array SbasServiceMessageRegion Array of SBAS service message regions. Accepted size range is [1..5].
  /// Id              string                         Unique identifier of the SBAS service message region group.
  ///

  public class GetSbasServiceMessageRegionGroupResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasServiceMessageRegionGroup."; }
    }

    internal const string CmdName = "GetSbasServiceMessageRegionGroupResult";

    public GetSbasServiceMessageRegionGroupResult()
      : base(CmdName)
    {}

    public GetSbasServiceMessageRegionGroupResult(CommandBase relatedCommand, string serviceProvider, int deltaUdrei, int priorityCode, List<SbasServiceMessageRegion> regions, string id)
      : base(CmdName, relatedCommand)
    {
      ServiceProvider = serviceProvider;
      DeltaUdrei = deltaUdrei;
      PriorityCode = priorityCode;
      Regions = regions;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("DeltaUdrei")
        && Contains("PriorityCode")
        && Contains("Regions")
        && Contains("Id")
      ;
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int DeltaUdrei
    {
      get { return GetValue("DeltaUdrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaUdrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int PriorityCode
    {
      get { return GetValue("PriorityCode").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("PriorityCode", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public List<SbasServiceMessageRegion> Regions
    {
      get { return GetValue("Regions").ToObject<List<SbasServiceMessageRegion>>(CommandBase.Serializer); }
      set
      {
          SetValue("Regions", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Set SBAS delta UDREI outside all the defined regions for this service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ ----------------------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].
  ///

  public class SetSbasDeltaUdreiOutsideOfRegions : CommandBase
  {
    public override string Documentation
    {
      get { return "Set SBAS delta UDREI outside all the defined regions for this service provider."; }
    }

    internal const string CmdName = "SetSbasDeltaUdreiOutsideOfRegions";

    public SetSbasDeltaUdreiOutsideOfRegions()
      : base(CmdName)
    {}

    public SetSbasDeltaUdreiOutsideOfRegions(string serviceProvider, int deltaUdrei)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      DeltaUdrei = deltaUdrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("DeltaUdrei")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int DeltaUdrei
    {
      get { return GetValue("DeltaUdrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaUdrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get SBAS delta UDREI outside all the defined regions for this service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ -----------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  ///

  public class GetSbasDeltaUdreiOutsideOfRegions : CommandBase
  {
    public override string Documentation
    {
      get { return "Get SBAS delta UDREI outside all the defined regions for this service provider."; }
    }

    internal const string CmdName = "GetSbasDeltaUdreiOutsideOfRegions";

    public GetSbasDeltaUdreiOutsideOfRegions()
      : base(CmdName)
    {}

    public GetSbasDeltaUdreiOutsideOfRegions(string serviceProvider)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetSbasDeltaUdreiOutsideOfRegions.
  ///
  /// Name            Type   Description
  /// --------------- ------ ----------------------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// DeltaUdrei      int    Delta UDREI applicable outside all the defined regions. Accepted range is [0..15].
  ///

  public class GetSbasDeltaUdreiOutsideOfRegionsResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasDeltaUdreiOutsideOfRegions."; }
    }

    internal const string CmdName = "GetSbasDeltaUdreiOutsideOfRegionsResult";

    public GetSbasDeltaUdreiOutsideOfRegionsResult()
      : base(CmdName)
    {}

    public GetSbasDeltaUdreiOutsideOfRegionsResult(CommandBase relatedCommand, string serviceProvider, int deltaUdrei)
      : base(CmdName, relatedCommand)
    {
      ServiceProvider = serviceProvider;
      DeltaUdrei = deltaUdrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("DeltaUdrei")
      ;
      }
    }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int DeltaUdrei
    {
      get { return GetValue("DeltaUdrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("DeltaUdrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Removes a SBAS service message region group for the service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ -----------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// Id              string Unique identifier of the SBAS service message region group to remove.
  ///

  public class RemoveSbasServiceMessageRegionGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Removes a SBAS service message region group for the service provider."; }
    }

    internal const string CmdName = "RemoveSbasServiceMessageRegionGroup";

    public RemoveSbasServiceMessageRegionGroup()
      : base(CmdName)
    {}

    public RemoveSbasServiceMessageRegionGroup(string serviceProvider, string id)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      Id = id;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("Id")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string Id
    {
      get { return GetValue("Id").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("Id", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Clears all SBAS service message region group for this service provider.
  ///
  /// Name            Type   Description
  /// --------------- ------ -----------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  ///

  public class ClearAllSbasServiceMessageRegionGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Clears all SBAS service message region group for this service provider."; }
    }

    internal const string CmdName = "ClearAllSbasServiceMessageRegionGroup";

    public ClearAllSbasServiceMessageRegionGroup()
      : base(CmdName)
    {}

    public ClearAllSbasServiceMessageRegionGroup(string serviceProvider)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Swaps 2 SBAS service message region group.
  ///
  /// Name            Type   Description
  /// --------------- ------ ---------------------------------------------------------------------------------
  /// ServiceProvider string Service providers, accepts "WAAS", "EGNOS", "MSAS", "GAGAN" and "SDCM".
  /// FirstId         string Unique identifier of the SBAS service message region group to swap with SecondId.
  /// SecondId        string Unique identifier of the SBAS service message region group to swap with FirstId.
  ///

  public class SwapSbasServiceMessageRegionGroup : CommandBase
  {
    public override string Documentation
    {
      get { return "Swaps 2 SBAS service message region group."; }
    }

    internal const string CmdName = "SwapSbasServiceMessageRegionGroup";

    public SwapSbasServiceMessageRegionGroup()
      : base(CmdName)
    {}

    public SwapSbasServiceMessageRegionGroup(string serviceProvider, string firstId, string secondId)
      : base(CmdName)
    {
      ServiceProvider = serviceProvider;
      FirstId = firstId;
      SecondId = secondId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("ServiceProvider")
        && Contains("FirstId")
        && Contains("SecondId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public string ServiceProvider
    {
      get { return GetValue("ServiceProvider").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("ServiceProvider", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string FirstId
    {
      get { return GetValue("FirstId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("FirstId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public string SecondId
    {
      get { return GetValue("SecondId").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("SecondId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Get  the computer system time since epoch at PPS0, for the computer running this Skydel instance.
  /// Use this command after StartPPS.
  ///
  /// 
  ///

  public class GetComputerSystemTimeSinceEpochAtPps0 : CommandBase
  {
    public override string Documentation
    {
      get { return "Get  the computer system time since epoch at PPS0, for the computer running this Skydel instance.\nUse this command after StartPPS."; }
    }

    internal const string CmdName = "GetComputerSystemTimeSinceEpochAtPps0";

    public GetComputerSystemTimeSinceEpochAtPps0()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetComputerSystemTimeSinceEpochAtPps0.
  ///
  /// Name         Type   Description
  /// ------------ ------ ---------------------------------------------------------
  /// Milliseconds double Computer system time since epoch at PPS0 in milliseconds.
  ///

  public class GetComputerSystemTimeSinceEpochAtPps0Result : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetComputerSystemTimeSinceEpochAtPps0."; }
    }

    internal const string CmdName = "GetComputerSystemTimeSinceEpochAtPps0Result";

    public GetComputerSystemTimeSinceEpochAtPps0Result()
      : base(CmdName)
    {}

    public GetComputerSystemTimeSinceEpochAtPps0Result(CommandBase relatedCommand, double milliseconds)
      : base(CmdName, relatedCommand)
    {
      Milliseconds = milliseconds;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Milliseconds")
      ;
      }
    }

    public double Milliseconds
    {
      get { return GetValue("Milliseconds").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Milliseconds", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// A pair of string
  ///
  /// Name   Type   Description
  /// ------ ------ ---------------------
  /// First  string First string in pair
  /// Second string Second string in pair
  ///

  public struct StringPair
  {
    public string First;
    public string Second;
  }


  ///
  /// Please note the command ResetHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.
  /// 
  /// Reset Hardware in the loop trajectory server warning message.
  ///
  /// 
  ///

  public class ResetHilWarning : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command ResetHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.\n\nReset Hardware in the loop trajectory server warning message."; }
    }

    public override string Deprecated
    {
      get { return "Please note the command ResetHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState."; }
    }

    internal const string CmdName = "ResetHilWarning";

    public ResetHilWarning()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Please note the command GetLastHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.
  /// 
  /// Get last Hardware in the loop trajectory server warning message. Returns HilWarningResult.
  ///
  /// 
  ///

  public class GetLastHilWarning : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetLastHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState.\n\nGet last Hardware in the loop trajectory server warning message. Returns HilWarningResult."; }
    }

    public override string Deprecated
    {
      get { return "Please note the command GetLastHilWarning is deprecated since 22.5. You may use GetHilExtrapolationState."; }
    }

    internal const string CmdName = "GetLastHilWarning";

    public GetLastHilWarning()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }
  }


  ///
  /// Result of GetLastHilWarning.
  ///
  /// Name              Type Description
  /// ----------------- ---- -----------------------------------------------------------------------------------------------------------------------------------
  /// IsExtrapolated    bool Indicate if there is receiver position has been extrapolated because of the HIL client that did not send receiver position in time.
  /// ExtrapolationTime int  Time of last extrapolated position
  ///

  public class HilWarningResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetLastHilWarning."; }
    }

    internal const string CmdName = "HilWarningResult";

    public HilWarningResult()
      : base(CmdName)
    {}

    public HilWarningResult(CommandBase relatedCommand, bool isExtrapolated, int extrapolationTime)
      : base(CmdName, relatedCommand)
    {
      IsExtrapolated = isExtrapolated;
      ExtrapolationTime = extrapolationTime;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("IsExtrapolated")
        && Contains("ExtrapolationTime")
      ;
      }
    }

    public bool IsExtrapolated
    {
      get { return GetValue("IsExtrapolated").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("IsExtrapolated", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int ExtrapolationTime
    {
      get { return GetValue("ExtrapolationTime").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("ExtrapolationTime", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV.
  /// 
  /// Set the global UDREI value transmitted by SBAS
  ///
  /// Name  Type Description
  /// ----- ---- ---------------
  /// Udrei int  The UDREI value
  ///

  public class SetSbasUdrei : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV.\n\nSet the global UDREI value transmitted by SBAS"; }
    }

    public override string Deprecated
    {
      get { return "Please note the command SetSbasUdrei is deprecated since 22.2. You may use SetUdreiForSV."; }
    }

    internal const string CmdName = "SetSbasUdrei";

    public SetSbasUdrei()
      : base(CmdName)
    {}

    public SetSbasUdrei(int udrei)
      : base(CmdName)
    {
      Udrei = udrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Udrei")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }

    public int Udrei
    {
      get { return GetValue("Udrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Udrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV.
  /// 
  /// Get the global UDREI value transmitted by SBAS
  ///
  /// 
  ///

  public class GetSbasUdrei : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV.\n\nGet the global UDREI value transmitted by SBAS"; }
    }

    public override string Deprecated
    {
      get { return "Please note the command GetSbasUdrei is deprecated since 22.2. You may use GetUdreiForSV."; }
    }

    internal const string CmdName = "GetSbasUdrei";

    public GetSbasUdrei()
      : base(CmdName)
    {}
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_IDLE; } }
  }


  ///
  /// Result of GetSbasUdrei.
  ///
  /// Name  Type Description
  /// ----- ---- ---------------
  /// Udrei int  The UDREI value
  ///

  public class GetSbasUdreiResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetSbasUdrei."; }
    }

    internal const string CmdName = "GetSbasUdreiResult";

    public GetSbasUdreiResult()
      : base(CmdName)
    {}

    public GetSbasUdreiResult(CommandBase relatedCommand, int udrei)
      : base(CmdName, relatedCommand)
    {
      Udrei = udrei;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("Udrei")
      ;
      }
    }

    public int Udrei
    {
      get { return GetValue("Udrei").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("Udrei", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command SetPowerForSV is deprecated since 22.7. You may use SetManualPowerOffsetForSV.
  /// 
  /// Set power offset for specified satellite SV ID. Use SV ID 0 to set power for all satellites.
  ///
  /// Name            Type   Description
  /// --------------- ------ -----------------------------------------------------------------------------------------
  /// System          string "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId            int    The Satellite SV ID
  /// PowerOffset     double Power offset in dB (relative to signal power reference level)
  /// OtherSatsFollow bool   If true, other sats power will be adjusted to maintain current offsets between satellites
  ///

  public class SetPowerForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command SetPowerForSV is deprecated since 22.7. You may use SetManualPowerOffsetForSV.\n\nSet power offset for specified satellite SV ID. Use SV ID 0 to set power for all satellites."; }
    }

    public override string Deprecated
    {
      get { return "Please note the command SetPowerForSV is deprecated since 22.7. You may use SetManualPowerOffsetForSV."; }
    }

    internal const string CmdName = "SetPowerForSV";

    public SetPowerForSV()
      : base(CmdName)
    {}

    public SetPowerForSV(string system, int svId, double powerOffset, bool otherSatsFollow)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
      PowerOffset = powerOffset;
      OtherSatsFollow = otherSatsFollow;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("PowerOffset")
        && Contains("OtherSatsFollow")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double PowerOffset
    {
      get { return GetValue("PowerOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("PowerOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public bool OtherSatsFollow
    {
      get { return GetValue("OtherSatsFollow").ToObject<bool>(CommandBase.Serializer); }
      set
      {
          SetValue("OtherSatsFollow", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Please note the command GetPowerForSV is deprecated since 22.7. You may use GetAllPowerForSV.
  /// 
  /// Get the power offset for specified satellite SV ID.
  ///
  /// Name   Type   Description
  /// ------ ------ -----------------------------------------------------------------------------------
  /// System string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId   int    The Satellite SV ID
  ///

  public class GetPowerForSV : CommandBase
  {
    public override string Documentation
    {
      get { return "Please note the command GetPowerForSV is deprecated since 22.7. You may use GetAllPowerForSV.\n\nGet the power offset for specified satellite SV ID."; }
    }

    public override string Deprecated
    {
      get { return "Please note the command GetPowerForSV is deprecated since 22.7. You may use GetAllPowerForSV."; }
    }

    internal const string CmdName = "GetPowerForSV";

    public GetPowerForSV()
      : base(CmdName)
    {}

    public GetPowerForSV(string system, int svId)
      : base(CmdName)
    {
      System = system;
      SvId = svId;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
      ;
      }
    }

    public override int ExecutePermission { get { return EXECUTE_IF_SIMULATING; } }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }


  ///
  /// Result of GetPowerForSV.
  ///
  /// Name                Type   Description
  /// ------------------- ------ -----------------------------------------------------------------------------------------------------------
  /// System              string The system, can be "GPS", "GLONASS", "Galileo", "BeiDou", "SBAS", "QZSS" or "NavIC"
  /// SvId                int    The Satellite SV ID
  /// NominalPower        double The nominal power in dBm
  /// SignalStrengthModel double The power difference coming from the Signal Strength Model (dB)
  /// Antenna             double The receiver antenna power offset (dB). It depends on antenna pattern and relative orientation with signal.
  /// SignalLevelOffset   double The global power offset (dB)
  /// ManualGain          double The power offset provided by the user (dB). See SetPowerForSV
  /// Total               double The sum of all the other fields (dBm)
  ///

  public class GetPowerForSVResult : CommandResult
  {
    public override string Documentation
    {
      get { return "Result of GetPowerForSV."; }
    }

    internal const string CmdName = "GetPowerForSVResult";

    public GetPowerForSVResult()
      : base(CmdName)
    {}

    public GetPowerForSVResult(CommandBase relatedCommand, string system, int svId, double nominalPower, double signalStrengthModel, double antenna, double signalLevelOffset, double manualGain, double total)
      : base(CmdName, relatedCommand)
    {
      System = system;
      SvId = svId;
      NominalPower = nominalPower;
      SignalStrengthModel = signalStrengthModel;
      Antenna = antenna;
      SignalLevelOffset = signalLevelOffset;
      ManualGain = manualGain;
      Total = total;
    }
      
    public override bool IsValid
    {
      get
      {
        return base.IsValid
        && Contains("System")
        && Contains("SvId")
        && Contains("NominalPower")
        && Contains("SignalStrengthModel")
        && Contains("Antenna")
        && Contains("SignalLevelOffset")
        && Contains("ManualGain")
        && Contains("Total")
      ;
      }
    }

    public string System
    {
      get { return GetValue("System").ToObject<string>(CommandBase.Serializer); }
      set
      {
          SetValue("System", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public int SvId
    {
      get { return GetValue("SvId").ToObject<int>(CommandBase.Serializer); }
      set
      {
          SetValue("SvId", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double NominalPower
    {
      get { return GetValue("NominalPower").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("NominalPower", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SignalStrengthModel
    {
      get { return GetValue("SignalStrengthModel").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalStrengthModel", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Antenna
    {
      get { return GetValue("Antenna").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Antenna", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double SignalLevelOffset
    {
      get { return GetValue("SignalLevelOffset").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("SignalLevelOffset", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double ManualGain
    {
      get { return GetValue("ManualGain").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("ManualGain", JToken.FromObject(value, CommandBase.Serializer));
      }
    }

    public double Total
    {
      get { return GetValue("Total").ToObject<double>(CommandBase.Serializer); }
      set
      {
          SetValue("Total", JToken.FromObject(value, CommandBase.Serializer));
      }
    }
  }

}
